//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace NRHPStubber {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("NrhpDatabase")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class NrhpDatabase : System.Data.DataSet {
        
        private APCRITDDataTable tableAPCRITD;
        
        private STATEMDataTable tableSTATEM;
        
        private APCRITMDataTable tableAPCRITM;
        
        private ARCHTECDDataTable tableARCHTECD;
        
        private AREASGDDataTable tableAREASGD;
        
        private AREASGMDataTable tableAREASGM;
        
        private CERTMDataTable tableCERTM;
        
        private CFUNCDDataTable tableCFUNCD;
        
        private COUNTYDDataTable tableCOUNTYD;
        
        private COUNTYMDataTable tableCOUNTYM;
        
        private CRITCNDDataTable tableCRITCND;
        
        private CRITCNMDataTable tableCRITCNM;
        
        private CSFUNCDDataTable tableCSFUNCD;
        
        private CULTAFFDDataTable tableCULTAFFD;
        
        private FEDAGDDataTable tableFEDAGD;
        
        private FEDAGMDataTable tableFEDAGM;
        
        private FUNCMDataTable tableFUNCM;
        
        private HFUNCDDataTable tableHFUNCD;
        
        private HSFUNCDDataTable tableHSFUNCD;
        
        private LEVSGDDataTable tableLEVSGD;
        
        private LEVSGMDataTable tableLEVSGM;
        
        private MATDDataTable tableMATD;
        
        private MATMDataTable tableMATM;
        
        private NOMNADDataTable tableNOMNAD;
        
        private NOMNAMDataTable tableNOMNAM;
        
        private NOMNAMEDDataTable tableNOMNAMED;
        
        private OSTATEDDataTable tableOSTATED;
        
        private OTHCERTDDataTable tableOTHCERTD;
        
        private OTHDOCDDataTable tableOTHDOCD;
        
        private OTHDOCMDataTable tableOTHDOCM;
        
        private OTHNAMEDDataTable tableOTHNAMED;
        
        private OWNERDDataTable tableOWNERD;
        
        private OWNERMDataTable tableOWNERM;
        
        private PERIODDDataTable tablePERIODD;
        
        private PERIODMDataTable tablePERIODM;
        
        private PossibleArticlesDataTable tablePossibleArticles;
        
        private PROPMAINDataTable tablePROPMAIN;
        
        private RETYPEMDataTable tableRETYPEM;
        
        private SIGNAMEDDataTable tableSIGNAMED;
        
        private SIGYEARDDataTable tableSIGYEARD;
        
        private ARSTYLDDataTable tableARSTYLD;
        
        private ARSTYLMDataTable tableARSTYLM;
        
        private GEOCODEMDataTable tableGEOCODEM;
        
        private System.Data.DataRelation relationFK_FEDAGD_PROPMAIN;
        
        private System.Data.DataRelation relationFK_PossibleArticles_PROPMAIN;
        
        private System.Data.DataRelation relationFK_APCRITD_APCRITM;
        
        private System.Data.DataRelation relationFK_APCRITD_PROPMAIN;
        
        private System.Data.DataRelation relationFK_ARCHTECD_PROPMAIN;
        
        private System.Data.DataRelation relationFK_AREASGD_AREASGM;
        
        private System.Data.DataRelation relationFK_AREASGD_PROPMAIN;
        
        private System.Data.DataRelation relationFK_CFUNCD_FUNCM;
        
        private System.Data.DataRelation relationFK_CFUNCD_PROPMAIN;
        
        private System.Data.DataRelation relationFK_COUNTYD_COUNTYM;
        
        private System.Data.DataRelation relationFK_COUNTYD_PROPMAIN;
        
        private System.Data.DataRelation relationFK_COUNTYD_STATEM;
        
        private System.Data.DataRelation relationFK_CRITCND_CRITCNM;
        
        private System.Data.DataRelation relationFK_CRITCND_PROPMAIN;
        
        private System.Data.DataRelation relationFK_CSFUNCD_FUNCM;
        
        private System.Data.DataRelation relationFK_CSFUNCD_PROPMAIN;
        
        private System.Data.DataRelation relationFK_CULTAFFD_PROPMAIN;
        
        private System.Data.DataRelation relationFK_FEDAGD_FEDAGM;
        
        private System.Data.DataRelation relationFK_HFUNCD_FUNCM;
        
        private System.Data.DataRelation relationFK_HFUNCD_PROPMAIN;
        
        private System.Data.DataRelation relationFK_HSFUNCD_FUNCM;
        
        private System.Data.DataRelation relationFK_HSFUNCD_PROPMAIN;
        
        private System.Data.DataRelation relationFK_LEVSGD_LEVSGM;
        
        private System.Data.DataRelation relationFK_LEVSGD_PROPMAIN;
        
        private System.Data.DataRelation relationFK_MATD_MATM;
        
        private System.Data.DataRelation relationFK_MATD_PROPMAIN;
        
        private System.Data.DataRelation relationFK_NOMNAD_NOMNAM;
        
        private System.Data.DataRelation relationFK_NOMNAD_PROPMAIN;
        
        private System.Data.DataRelation relationFK_NOMNAMED_PROPMAIN;
        
        private System.Data.DataRelation relationFK_OSTATED_PROPMAIN;
        
        private System.Data.DataRelation relationFK_OSTATED_STATEM;
        
        private System.Data.DataRelation relationFK_OTHCERTD_CERTM;
        
        private System.Data.DataRelation relationFK_OTHCERTD_PROPMAIN;
        
        private System.Data.DataRelation relationFK_OTHDOCD_OTHDOCM;
        
        private System.Data.DataRelation relationFK_OTHDOCD_PROPMAIN;
        
        private System.Data.DataRelation relationFK_OTHNAMED_PROPMAIN;
        
        private System.Data.DataRelation relationFK_OWNERD_OWNERM;
        
        private System.Data.DataRelation relationFK_OWNERD_PROPMAIN;
        
        private System.Data.DataRelation relationFK_PERIODD_PERIODM;
        
        private System.Data.DataRelation relationFK_PERIODD_PROPMAIN;
        
        private System.Data.DataRelation relationFK_PROPMAIN_CERTM;
        
        private System.Data.DataRelation relationFK_PROPMAIN_RETYPEM;
        
        private System.Data.DataRelation relationFK_SIGNAMED_PROPMAIN;
        
        private System.Data.DataRelation relationFK_SIGYEARD_PROPMAIN;
        
        private System.Data.DataRelation relationFK_PROPMAIN_PROPMAIN;
        
        private System.Data.DataRelation relationFK_ARSTYLD_ARSTYLM;
        
        private System.Data.DataRelation relationFK_PROPMAIN_ARSTYLD;
        
        private System.Data.DataRelation relationFK_GEOCODEM_STATEM;
        
        private System.Data.DataRelation relationFK_GEOCODEM_STATEM1;
        
        private System.Data.DataRelation relationFK_GEOCODEM_PROPMAIN;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NrhpDatabase() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected NrhpDatabase(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["APCRITD"] != null)) {
                    base.Tables.Add(new APCRITDDataTable(ds.Tables["APCRITD"]));
                }
                if ((ds.Tables["STATEM"] != null)) {
                    base.Tables.Add(new STATEMDataTable(ds.Tables["STATEM"]));
                }
                if ((ds.Tables["APCRITM"] != null)) {
                    base.Tables.Add(new APCRITMDataTable(ds.Tables["APCRITM"]));
                }
                if ((ds.Tables["ARCHTECD"] != null)) {
                    base.Tables.Add(new ARCHTECDDataTable(ds.Tables["ARCHTECD"]));
                }
                if ((ds.Tables["AREASGD"] != null)) {
                    base.Tables.Add(new AREASGDDataTable(ds.Tables["AREASGD"]));
                }
                if ((ds.Tables["AREASGM"] != null)) {
                    base.Tables.Add(new AREASGMDataTable(ds.Tables["AREASGM"]));
                }
                if ((ds.Tables["CERTM"] != null)) {
                    base.Tables.Add(new CERTMDataTable(ds.Tables["CERTM"]));
                }
                if ((ds.Tables["CFUNCD"] != null)) {
                    base.Tables.Add(new CFUNCDDataTable(ds.Tables["CFUNCD"]));
                }
                if ((ds.Tables["COUNTYD"] != null)) {
                    base.Tables.Add(new COUNTYDDataTable(ds.Tables["COUNTYD"]));
                }
                if ((ds.Tables["COUNTYM"] != null)) {
                    base.Tables.Add(new COUNTYMDataTable(ds.Tables["COUNTYM"]));
                }
                if ((ds.Tables["CRITCND"] != null)) {
                    base.Tables.Add(new CRITCNDDataTable(ds.Tables["CRITCND"]));
                }
                if ((ds.Tables["CRITCNM"] != null)) {
                    base.Tables.Add(new CRITCNMDataTable(ds.Tables["CRITCNM"]));
                }
                if ((ds.Tables["CSFUNCD"] != null)) {
                    base.Tables.Add(new CSFUNCDDataTable(ds.Tables["CSFUNCD"]));
                }
                if ((ds.Tables["CULTAFFD"] != null)) {
                    base.Tables.Add(new CULTAFFDDataTable(ds.Tables["CULTAFFD"]));
                }
                if ((ds.Tables["FEDAGD"] != null)) {
                    base.Tables.Add(new FEDAGDDataTable(ds.Tables["FEDAGD"]));
                }
                if ((ds.Tables["FEDAGM"] != null)) {
                    base.Tables.Add(new FEDAGMDataTable(ds.Tables["FEDAGM"]));
                }
                if ((ds.Tables["FUNCM"] != null)) {
                    base.Tables.Add(new FUNCMDataTable(ds.Tables["FUNCM"]));
                }
                if ((ds.Tables["HFUNCD"] != null)) {
                    base.Tables.Add(new HFUNCDDataTable(ds.Tables["HFUNCD"]));
                }
                if ((ds.Tables["HSFUNCD"] != null)) {
                    base.Tables.Add(new HSFUNCDDataTable(ds.Tables["HSFUNCD"]));
                }
                if ((ds.Tables["LEVSGD"] != null)) {
                    base.Tables.Add(new LEVSGDDataTable(ds.Tables["LEVSGD"]));
                }
                if ((ds.Tables["LEVSGM"] != null)) {
                    base.Tables.Add(new LEVSGMDataTable(ds.Tables["LEVSGM"]));
                }
                if ((ds.Tables["MATD"] != null)) {
                    base.Tables.Add(new MATDDataTable(ds.Tables["MATD"]));
                }
                if ((ds.Tables["MATM"] != null)) {
                    base.Tables.Add(new MATMDataTable(ds.Tables["MATM"]));
                }
                if ((ds.Tables["NOMNAD"] != null)) {
                    base.Tables.Add(new NOMNADDataTable(ds.Tables["NOMNAD"]));
                }
                if ((ds.Tables["NOMNAM"] != null)) {
                    base.Tables.Add(new NOMNAMDataTable(ds.Tables["NOMNAM"]));
                }
                if ((ds.Tables["NOMNAMED"] != null)) {
                    base.Tables.Add(new NOMNAMEDDataTable(ds.Tables["NOMNAMED"]));
                }
                if ((ds.Tables["OSTATED"] != null)) {
                    base.Tables.Add(new OSTATEDDataTable(ds.Tables["OSTATED"]));
                }
                if ((ds.Tables["OTHCERTD"] != null)) {
                    base.Tables.Add(new OTHCERTDDataTable(ds.Tables["OTHCERTD"]));
                }
                if ((ds.Tables["OTHDOCD"] != null)) {
                    base.Tables.Add(new OTHDOCDDataTable(ds.Tables["OTHDOCD"]));
                }
                if ((ds.Tables["OTHDOCM"] != null)) {
                    base.Tables.Add(new OTHDOCMDataTable(ds.Tables["OTHDOCM"]));
                }
                if ((ds.Tables["OTHNAMED"] != null)) {
                    base.Tables.Add(new OTHNAMEDDataTable(ds.Tables["OTHNAMED"]));
                }
                if ((ds.Tables["OWNERD"] != null)) {
                    base.Tables.Add(new OWNERDDataTable(ds.Tables["OWNERD"]));
                }
                if ((ds.Tables["OWNERM"] != null)) {
                    base.Tables.Add(new OWNERMDataTable(ds.Tables["OWNERM"]));
                }
                if ((ds.Tables["PERIODD"] != null)) {
                    base.Tables.Add(new PERIODDDataTable(ds.Tables["PERIODD"]));
                }
                if ((ds.Tables["PERIODM"] != null)) {
                    base.Tables.Add(new PERIODMDataTable(ds.Tables["PERIODM"]));
                }
                if ((ds.Tables["PossibleArticles"] != null)) {
                    base.Tables.Add(new PossibleArticlesDataTable(ds.Tables["PossibleArticles"]));
                }
                if ((ds.Tables["PROPMAIN"] != null)) {
                    base.Tables.Add(new PROPMAINDataTable(ds.Tables["PROPMAIN"]));
                }
                if ((ds.Tables["RETYPEM"] != null)) {
                    base.Tables.Add(new RETYPEMDataTable(ds.Tables["RETYPEM"]));
                }
                if ((ds.Tables["SIGNAMED"] != null)) {
                    base.Tables.Add(new SIGNAMEDDataTable(ds.Tables["SIGNAMED"]));
                }
                if ((ds.Tables["SIGYEARD"] != null)) {
                    base.Tables.Add(new SIGYEARDDataTable(ds.Tables["SIGYEARD"]));
                }
                if ((ds.Tables["ARSTYLD"] != null)) {
                    base.Tables.Add(new ARSTYLDDataTable(ds.Tables["ARSTYLD"]));
                }
                if ((ds.Tables["ARSTYLM"] != null)) {
                    base.Tables.Add(new ARSTYLMDataTable(ds.Tables["ARSTYLM"]));
                }
                if ((ds.Tables["GEOCODEM"] != null)) {
                    base.Tables.Add(new GEOCODEMDataTable(ds.Tables["GEOCODEM"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public APCRITDDataTable APCRITD {
            get {
                return this.tableAPCRITD;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public STATEMDataTable STATEM {
            get {
                return this.tableSTATEM;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public APCRITMDataTable APCRITM {
            get {
                return this.tableAPCRITM;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ARCHTECDDataTable ARCHTECD {
            get {
                return this.tableARCHTECD;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AREASGDDataTable AREASGD {
            get {
                return this.tableAREASGD;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AREASGMDataTable AREASGM {
            get {
                return this.tableAREASGM;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CERTMDataTable CERTM {
            get {
                return this.tableCERTM;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CFUNCDDataTable CFUNCD {
            get {
                return this.tableCFUNCD;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public COUNTYDDataTable COUNTYD {
            get {
                return this.tableCOUNTYD;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public COUNTYMDataTable COUNTYM {
            get {
                return this.tableCOUNTYM;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CRITCNDDataTable CRITCND {
            get {
                return this.tableCRITCND;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CRITCNMDataTable CRITCNM {
            get {
                return this.tableCRITCNM;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CSFUNCDDataTable CSFUNCD {
            get {
                return this.tableCSFUNCD;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CULTAFFDDataTable CULTAFFD {
            get {
                return this.tableCULTAFFD;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FEDAGDDataTable FEDAGD {
            get {
                return this.tableFEDAGD;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FEDAGMDataTable FEDAGM {
            get {
                return this.tableFEDAGM;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FUNCMDataTable FUNCM {
            get {
                return this.tableFUNCM;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HFUNCDDataTable HFUNCD {
            get {
                return this.tableHFUNCD;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HSFUNCDDataTable HSFUNCD {
            get {
                return this.tableHSFUNCD;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LEVSGDDataTable LEVSGD {
            get {
                return this.tableLEVSGD;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LEVSGMDataTable LEVSGM {
            get {
                return this.tableLEVSGM;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MATDDataTable MATD {
            get {
                return this.tableMATD;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MATMDataTable MATM {
            get {
                return this.tableMATM;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NOMNADDataTable NOMNAD {
            get {
                return this.tableNOMNAD;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NOMNAMDataTable NOMNAM {
            get {
                return this.tableNOMNAM;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NOMNAMEDDataTable NOMNAMED {
            get {
                return this.tableNOMNAMED;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OSTATEDDataTable OSTATED {
            get {
                return this.tableOSTATED;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OTHCERTDDataTable OTHCERTD {
            get {
                return this.tableOTHCERTD;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OTHDOCDDataTable OTHDOCD {
            get {
                return this.tableOTHDOCD;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OTHDOCMDataTable OTHDOCM {
            get {
                return this.tableOTHDOCM;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OTHNAMEDDataTable OTHNAMED {
            get {
                return this.tableOTHNAMED;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OWNERDDataTable OWNERD {
            get {
                return this.tableOWNERD;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OWNERMDataTable OWNERM {
            get {
                return this.tableOWNERM;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PERIODDDataTable PERIODD {
            get {
                return this.tablePERIODD;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PERIODMDataTable PERIODM {
            get {
                return this.tablePERIODM;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PossibleArticlesDataTable PossibleArticles {
            get {
                return this.tablePossibleArticles;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PROPMAINDataTable PROPMAIN {
            get {
                return this.tablePROPMAIN;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RETYPEMDataTable RETYPEM {
            get {
                return this.tableRETYPEM;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SIGNAMEDDataTable SIGNAMED {
            get {
                return this.tableSIGNAMED;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SIGYEARDDataTable SIGYEARD {
            get {
                return this.tableSIGYEARD;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ARSTYLDDataTable ARSTYLD {
            get {
                return this.tableARSTYLD;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ARSTYLMDataTable ARSTYLM {
            get {
                return this.tableARSTYLM;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GEOCODEMDataTable GEOCODEM {
            get {
                return this.tableGEOCODEM;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            NrhpDatabase cln = ((NrhpDatabase)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["APCRITD"] != null)) {
                    base.Tables.Add(new APCRITDDataTable(ds.Tables["APCRITD"]));
                }
                if ((ds.Tables["STATEM"] != null)) {
                    base.Tables.Add(new STATEMDataTable(ds.Tables["STATEM"]));
                }
                if ((ds.Tables["APCRITM"] != null)) {
                    base.Tables.Add(new APCRITMDataTable(ds.Tables["APCRITM"]));
                }
                if ((ds.Tables["ARCHTECD"] != null)) {
                    base.Tables.Add(new ARCHTECDDataTable(ds.Tables["ARCHTECD"]));
                }
                if ((ds.Tables["AREASGD"] != null)) {
                    base.Tables.Add(new AREASGDDataTable(ds.Tables["AREASGD"]));
                }
                if ((ds.Tables["AREASGM"] != null)) {
                    base.Tables.Add(new AREASGMDataTable(ds.Tables["AREASGM"]));
                }
                if ((ds.Tables["CERTM"] != null)) {
                    base.Tables.Add(new CERTMDataTable(ds.Tables["CERTM"]));
                }
                if ((ds.Tables["CFUNCD"] != null)) {
                    base.Tables.Add(new CFUNCDDataTable(ds.Tables["CFUNCD"]));
                }
                if ((ds.Tables["COUNTYD"] != null)) {
                    base.Tables.Add(new COUNTYDDataTable(ds.Tables["COUNTYD"]));
                }
                if ((ds.Tables["COUNTYM"] != null)) {
                    base.Tables.Add(new COUNTYMDataTable(ds.Tables["COUNTYM"]));
                }
                if ((ds.Tables["CRITCND"] != null)) {
                    base.Tables.Add(new CRITCNDDataTable(ds.Tables["CRITCND"]));
                }
                if ((ds.Tables["CRITCNM"] != null)) {
                    base.Tables.Add(new CRITCNMDataTable(ds.Tables["CRITCNM"]));
                }
                if ((ds.Tables["CSFUNCD"] != null)) {
                    base.Tables.Add(new CSFUNCDDataTable(ds.Tables["CSFUNCD"]));
                }
                if ((ds.Tables["CULTAFFD"] != null)) {
                    base.Tables.Add(new CULTAFFDDataTable(ds.Tables["CULTAFFD"]));
                }
                if ((ds.Tables["FEDAGD"] != null)) {
                    base.Tables.Add(new FEDAGDDataTable(ds.Tables["FEDAGD"]));
                }
                if ((ds.Tables["FEDAGM"] != null)) {
                    base.Tables.Add(new FEDAGMDataTable(ds.Tables["FEDAGM"]));
                }
                if ((ds.Tables["FUNCM"] != null)) {
                    base.Tables.Add(new FUNCMDataTable(ds.Tables["FUNCM"]));
                }
                if ((ds.Tables["HFUNCD"] != null)) {
                    base.Tables.Add(new HFUNCDDataTable(ds.Tables["HFUNCD"]));
                }
                if ((ds.Tables["HSFUNCD"] != null)) {
                    base.Tables.Add(new HSFUNCDDataTable(ds.Tables["HSFUNCD"]));
                }
                if ((ds.Tables["LEVSGD"] != null)) {
                    base.Tables.Add(new LEVSGDDataTable(ds.Tables["LEVSGD"]));
                }
                if ((ds.Tables["LEVSGM"] != null)) {
                    base.Tables.Add(new LEVSGMDataTable(ds.Tables["LEVSGM"]));
                }
                if ((ds.Tables["MATD"] != null)) {
                    base.Tables.Add(new MATDDataTable(ds.Tables["MATD"]));
                }
                if ((ds.Tables["MATM"] != null)) {
                    base.Tables.Add(new MATMDataTable(ds.Tables["MATM"]));
                }
                if ((ds.Tables["NOMNAD"] != null)) {
                    base.Tables.Add(new NOMNADDataTable(ds.Tables["NOMNAD"]));
                }
                if ((ds.Tables["NOMNAM"] != null)) {
                    base.Tables.Add(new NOMNAMDataTable(ds.Tables["NOMNAM"]));
                }
                if ((ds.Tables["NOMNAMED"] != null)) {
                    base.Tables.Add(new NOMNAMEDDataTable(ds.Tables["NOMNAMED"]));
                }
                if ((ds.Tables["OSTATED"] != null)) {
                    base.Tables.Add(new OSTATEDDataTable(ds.Tables["OSTATED"]));
                }
                if ((ds.Tables["OTHCERTD"] != null)) {
                    base.Tables.Add(new OTHCERTDDataTable(ds.Tables["OTHCERTD"]));
                }
                if ((ds.Tables["OTHDOCD"] != null)) {
                    base.Tables.Add(new OTHDOCDDataTable(ds.Tables["OTHDOCD"]));
                }
                if ((ds.Tables["OTHDOCM"] != null)) {
                    base.Tables.Add(new OTHDOCMDataTable(ds.Tables["OTHDOCM"]));
                }
                if ((ds.Tables["OTHNAMED"] != null)) {
                    base.Tables.Add(new OTHNAMEDDataTable(ds.Tables["OTHNAMED"]));
                }
                if ((ds.Tables["OWNERD"] != null)) {
                    base.Tables.Add(new OWNERDDataTable(ds.Tables["OWNERD"]));
                }
                if ((ds.Tables["OWNERM"] != null)) {
                    base.Tables.Add(new OWNERMDataTable(ds.Tables["OWNERM"]));
                }
                if ((ds.Tables["PERIODD"] != null)) {
                    base.Tables.Add(new PERIODDDataTable(ds.Tables["PERIODD"]));
                }
                if ((ds.Tables["PERIODM"] != null)) {
                    base.Tables.Add(new PERIODMDataTable(ds.Tables["PERIODM"]));
                }
                if ((ds.Tables["PossibleArticles"] != null)) {
                    base.Tables.Add(new PossibleArticlesDataTable(ds.Tables["PossibleArticles"]));
                }
                if ((ds.Tables["PROPMAIN"] != null)) {
                    base.Tables.Add(new PROPMAINDataTable(ds.Tables["PROPMAIN"]));
                }
                if ((ds.Tables["RETYPEM"] != null)) {
                    base.Tables.Add(new RETYPEMDataTable(ds.Tables["RETYPEM"]));
                }
                if ((ds.Tables["SIGNAMED"] != null)) {
                    base.Tables.Add(new SIGNAMEDDataTable(ds.Tables["SIGNAMED"]));
                }
                if ((ds.Tables["SIGYEARD"] != null)) {
                    base.Tables.Add(new SIGYEARDDataTable(ds.Tables["SIGYEARD"]));
                }
                if ((ds.Tables["ARSTYLD"] != null)) {
                    base.Tables.Add(new ARSTYLDDataTable(ds.Tables["ARSTYLD"]));
                }
                if ((ds.Tables["ARSTYLM"] != null)) {
                    base.Tables.Add(new ARSTYLMDataTable(ds.Tables["ARSTYLM"]));
                }
                if ((ds.Tables["GEOCODEM"] != null)) {
                    base.Tables.Add(new GEOCODEMDataTable(ds.Tables["GEOCODEM"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableAPCRITD = ((APCRITDDataTable)(base.Tables["APCRITD"]));
            if ((initTable == true)) {
                if ((this.tableAPCRITD != null)) {
                    this.tableAPCRITD.InitVars();
                }
            }
            this.tableSTATEM = ((STATEMDataTable)(base.Tables["STATEM"]));
            if ((initTable == true)) {
                if ((this.tableSTATEM != null)) {
                    this.tableSTATEM.InitVars();
                }
            }
            this.tableAPCRITM = ((APCRITMDataTable)(base.Tables["APCRITM"]));
            if ((initTable == true)) {
                if ((this.tableAPCRITM != null)) {
                    this.tableAPCRITM.InitVars();
                }
            }
            this.tableARCHTECD = ((ARCHTECDDataTable)(base.Tables["ARCHTECD"]));
            if ((initTable == true)) {
                if ((this.tableARCHTECD != null)) {
                    this.tableARCHTECD.InitVars();
                }
            }
            this.tableAREASGD = ((AREASGDDataTable)(base.Tables["AREASGD"]));
            if ((initTable == true)) {
                if ((this.tableAREASGD != null)) {
                    this.tableAREASGD.InitVars();
                }
            }
            this.tableAREASGM = ((AREASGMDataTable)(base.Tables["AREASGM"]));
            if ((initTable == true)) {
                if ((this.tableAREASGM != null)) {
                    this.tableAREASGM.InitVars();
                }
            }
            this.tableCERTM = ((CERTMDataTable)(base.Tables["CERTM"]));
            if ((initTable == true)) {
                if ((this.tableCERTM != null)) {
                    this.tableCERTM.InitVars();
                }
            }
            this.tableCFUNCD = ((CFUNCDDataTable)(base.Tables["CFUNCD"]));
            if ((initTable == true)) {
                if ((this.tableCFUNCD != null)) {
                    this.tableCFUNCD.InitVars();
                }
            }
            this.tableCOUNTYD = ((COUNTYDDataTable)(base.Tables["COUNTYD"]));
            if ((initTable == true)) {
                if ((this.tableCOUNTYD != null)) {
                    this.tableCOUNTYD.InitVars();
                }
            }
            this.tableCOUNTYM = ((COUNTYMDataTable)(base.Tables["COUNTYM"]));
            if ((initTable == true)) {
                if ((this.tableCOUNTYM != null)) {
                    this.tableCOUNTYM.InitVars();
                }
            }
            this.tableCRITCND = ((CRITCNDDataTable)(base.Tables["CRITCND"]));
            if ((initTable == true)) {
                if ((this.tableCRITCND != null)) {
                    this.tableCRITCND.InitVars();
                }
            }
            this.tableCRITCNM = ((CRITCNMDataTable)(base.Tables["CRITCNM"]));
            if ((initTable == true)) {
                if ((this.tableCRITCNM != null)) {
                    this.tableCRITCNM.InitVars();
                }
            }
            this.tableCSFUNCD = ((CSFUNCDDataTable)(base.Tables["CSFUNCD"]));
            if ((initTable == true)) {
                if ((this.tableCSFUNCD != null)) {
                    this.tableCSFUNCD.InitVars();
                }
            }
            this.tableCULTAFFD = ((CULTAFFDDataTable)(base.Tables["CULTAFFD"]));
            if ((initTable == true)) {
                if ((this.tableCULTAFFD != null)) {
                    this.tableCULTAFFD.InitVars();
                }
            }
            this.tableFEDAGD = ((FEDAGDDataTable)(base.Tables["FEDAGD"]));
            if ((initTable == true)) {
                if ((this.tableFEDAGD != null)) {
                    this.tableFEDAGD.InitVars();
                }
            }
            this.tableFEDAGM = ((FEDAGMDataTable)(base.Tables["FEDAGM"]));
            if ((initTable == true)) {
                if ((this.tableFEDAGM != null)) {
                    this.tableFEDAGM.InitVars();
                }
            }
            this.tableFUNCM = ((FUNCMDataTable)(base.Tables["FUNCM"]));
            if ((initTable == true)) {
                if ((this.tableFUNCM != null)) {
                    this.tableFUNCM.InitVars();
                }
            }
            this.tableHFUNCD = ((HFUNCDDataTable)(base.Tables["HFUNCD"]));
            if ((initTable == true)) {
                if ((this.tableHFUNCD != null)) {
                    this.tableHFUNCD.InitVars();
                }
            }
            this.tableHSFUNCD = ((HSFUNCDDataTable)(base.Tables["HSFUNCD"]));
            if ((initTable == true)) {
                if ((this.tableHSFUNCD != null)) {
                    this.tableHSFUNCD.InitVars();
                }
            }
            this.tableLEVSGD = ((LEVSGDDataTable)(base.Tables["LEVSGD"]));
            if ((initTable == true)) {
                if ((this.tableLEVSGD != null)) {
                    this.tableLEVSGD.InitVars();
                }
            }
            this.tableLEVSGM = ((LEVSGMDataTable)(base.Tables["LEVSGM"]));
            if ((initTable == true)) {
                if ((this.tableLEVSGM != null)) {
                    this.tableLEVSGM.InitVars();
                }
            }
            this.tableMATD = ((MATDDataTable)(base.Tables["MATD"]));
            if ((initTable == true)) {
                if ((this.tableMATD != null)) {
                    this.tableMATD.InitVars();
                }
            }
            this.tableMATM = ((MATMDataTable)(base.Tables["MATM"]));
            if ((initTable == true)) {
                if ((this.tableMATM != null)) {
                    this.tableMATM.InitVars();
                }
            }
            this.tableNOMNAD = ((NOMNADDataTable)(base.Tables["NOMNAD"]));
            if ((initTable == true)) {
                if ((this.tableNOMNAD != null)) {
                    this.tableNOMNAD.InitVars();
                }
            }
            this.tableNOMNAM = ((NOMNAMDataTable)(base.Tables["NOMNAM"]));
            if ((initTable == true)) {
                if ((this.tableNOMNAM != null)) {
                    this.tableNOMNAM.InitVars();
                }
            }
            this.tableNOMNAMED = ((NOMNAMEDDataTable)(base.Tables["NOMNAMED"]));
            if ((initTable == true)) {
                if ((this.tableNOMNAMED != null)) {
                    this.tableNOMNAMED.InitVars();
                }
            }
            this.tableOSTATED = ((OSTATEDDataTable)(base.Tables["OSTATED"]));
            if ((initTable == true)) {
                if ((this.tableOSTATED != null)) {
                    this.tableOSTATED.InitVars();
                }
            }
            this.tableOTHCERTD = ((OTHCERTDDataTable)(base.Tables["OTHCERTD"]));
            if ((initTable == true)) {
                if ((this.tableOTHCERTD != null)) {
                    this.tableOTHCERTD.InitVars();
                }
            }
            this.tableOTHDOCD = ((OTHDOCDDataTable)(base.Tables["OTHDOCD"]));
            if ((initTable == true)) {
                if ((this.tableOTHDOCD != null)) {
                    this.tableOTHDOCD.InitVars();
                }
            }
            this.tableOTHDOCM = ((OTHDOCMDataTable)(base.Tables["OTHDOCM"]));
            if ((initTable == true)) {
                if ((this.tableOTHDOCM != null)) {
                    this.tableOTHDOCM.InitVars();
                }
            }
            this.tableOTHNAMED = ((OTHNAMEDDataTable)(base.Tables["OTHNAMED"]));
            if ((initTable == true)) {
                if ((this.tableOTHNAMED != null)) {
                    this.tableOTHNAMED.InitVars();
                }
            }
            this.tableOWNERD = ((OWNERDDataTable)(base.Tables["OWNERD"]));
            if ((initTable == true)) {
                if ((this.tableOWNERD != null)) {
                    this.tableOWNERD.InitVars();
                }
            }
            this.tableOWNERM = ((OWNERMDataTable)(base.Tables["OWNERM"]));
            if ((initTable == true)) {
                if ((this.tableOWNERM != null)) {
                    this.tableOWNERM.InitVars();
                }
            }
            this.tablePERIODD = ((PERIODDDataTable)(base.Tables["PERIODD"]));
            if ((initTable == true)) {
                if ((this.tablePERIODD != null)) {
                    this.tablePERIODD.InitVars();
                }
            }
            this.tablePERIODM = ((PERIODMDataTable)(base.Tables["PERIODM"]));
            if ((initTable == true)) {
                if ((this.tablePERIODM != null)) {
                    this.tablePERIODM.InitVars();
                }
            }
            this.tablePossibleArticles = ((PossibleArticlesDataTable)(base.Tables["PossibleArticles"]));
            if ((initTable == true)) {
                if ((this.tablePossibleArticles != null)) {
                    this.tablePossibleArticles.InitVars();
                }
            }
            this.tablePROPMAIN = ((PROPMAINDataTable)(base.Tables["PROPMAIN"]));
            if ((initTable == true)) {
                if ((this.tablePROPMAIN != null)) {
                    this.tablePROPMAIN.InitVars();
                }
            }
            this.tableRETYPEM = ((RETYPEMDataTable)(base.Tables["RETYPEM"]));
            if ((initTable == true)) {
                if ((this.tableRETYPEM != null)) {
                    this.tableRETYPEM.InitVars();
                }
            }
            this.tableSIGNAMED = ((SIGNAMEDDataTable)(base.Tables["SIGNAMED"]));
            if ((initTable == true)) {
                if ((this.tableSIGNAMED != null)) {
                    this.tableSIGNAMED.InitVars();
                }
            }
            this.tableSIGYEARD = ((SIGYEARDDataTable)(base.Tables["SIGYEARD"]));
            if ((initTable == true)) {
                if ((this.tableSIGYEARD != null)) {
                    this.tableSIGYEARD.InitVars();
                }
            }
            this.tableARSTYLD = ((ARSTYLDDataTable)(base.Tables["ARSTYLD"]));
            if ((initTable == true)) {
                if ((this.tableARSTYLD != null)) {
                    this.tableARSTYLD.InitVars();
                }
            }
            this.tableARSTYLM = ((ARSTYLMDataTable)(base.Tables["ARSTYLM"]));
            if ((initTable == true)) {
                if ((this.tableARSTYLM != null)) {
                    this.tableARSTYLM.InitVars();
                }
            }
            this.tableGEOCODEM = ((GEOCODEMDataTable)(base.Tables["GEOCODEM"]));
            if ((initTable == true)) {
                if ((this.tableGEOCODEM != null)) {
                    this.tableGEOCODEM.InitVars();
                }
            }
            this.relationFK_FEDAGD_PROPMAIN = this.Relations["FK_FEDAGD_PROPMAIN"];
            this.relationFK_PossibleArticles_PROPMAIN = this.Relations["FK_PossibleArticles_PROPMAIN"];
            this.relationFK_APCRITD_APCRITM = this.Relations["FK_APCRITD_APCRITM"];
            this.relationFK_APCRITD_PROPMAIN = this.Relations["FK_APCRITD_PROPMAIN"];
            this.relationFK_ARCHTECD_PROPMAIN = this.Relations["FK_ARCHTECD_PROPMAIN"];
            this.relationFK_AREASGD_AREASGM = this.Relations["FK_AREASGD_AREASGM"];
            this.relationFK_AREASGD_PROPMAIN = this.Relations["FK_AREASGD_PROPMAIN"];
            this.relationFK_CFUNCD_FUNCM = this.Relations["FK_CFUNCD_FUNCM"];
            this.relationFK_CFUNCD_PROPMAIN = this.Relations["FK_CFUNCD_PROPMAIN"];
            this.relationFK_COUNTYD_COUNTYM = this.Relations["FK_COUNTYD_COUNTYM"];
            this.relationFK_COUNTYD_PROPMAIN = this.Relations["FK_COUNTYD_PROPMAIN"];
            this.relationFK_COUNTYD_STATEM = this.Relations["FK_COUNTYD_STATEM"];
            this.relationFK_CRITCND_CRITCNM = this.Relations["FK_CRITCND_CRITCNM"];
            this.relationFK_CRITCND_PROPMAIN = this.Relations["FK_CRITCND_PROPMAIN"];
            this.relationFK_CSFUNCD_FUNCM = this.Relations["FK_CSFUNCD_FUNCM"];
            this.relationFK_CSFUNCD_PROPMAIN = this.Relations["FK_CSFUNCD_PROPMAIN"];
            this.relationFK_CULTAFFD_PROPMAIN = this.Relations["FK_CULTAFFD_PROPMAIN"];
            this.relationFK_FEDAGD_FEDAGM = this.Relations["FK_FEDAGD_FEDAGM"];
            this.relationFK_HFUNCD_FUNCM = this.Relations["FK_HFUNCD_FUNCM"];
            this.relationFK_HFUNCD_PROPMAIN = this.Relations["FK_HFUNCD_PROPMAIN"];
            this.relationFK_HSFUNCD_FUNCM = this.Relations["FK_HSFUNCD_FUNCM"];
            this.relationFK_HSFUNCD_PROPMAIN = this.Relations["FK_HSFUNCD_PROPMAIN"];
            this.relationFK_LEVSGD_LEVSGM = this.Relations["FK_LEVSGD_LEVSGM"];
            this.relationFK_LEVSGD_PROPMAIN = this.Relations["FK_LEVSGD_PROPMAIN"];
            this.relationFK_MATD_MATM = this.Relations["FK_MATD_MATM"];
            this.relationFK_MATD_PROPMAIN = this.Relations["FK_MATD_PROPMAIN"];
            this.relationFK_NOMNAD_NOMNAM = this.Relations["FK_NOMNAD_NOMNAM"];
            this.relationFK_NOMNAD_PROPMAIN = this.Relations["FK_NOMNAD_PROPMAIN"];
            this.relationFK_NOMNAMED_PROPMAIN = this.Relations["FK_NOMNAMED_PROPMAIN"];
            this.relationFK_OSTATED_PROPMAIN = this.Relations["FK_OSTATED_PROPMAIN"];
            this.relationFK_OSTATED_STATEM = this.Relations["FK_OSTATED_STATEM"];
            this.relationFK_OTHCERTD_CERTM = this.Relations["FK_OTHCERTD_CERTM"];
            this.relationFK_OTHCERTD_PROPMAIN = this.Relations["FK_OTHCERTD_PROPMAIN"];
            this.relationFK_OTHDOCD_OTHDOCM = this.Relations["FK_OTHDOCD_OTHDOCM"];
            this.relationFK_OTHDOCD_PROPMAIN = this.Relations["FK_OTHDOCD_PROPMAIN"];
            this.relationFK_OTHNAMED_PROPMAIN = this.Relations["FK_OTHNAMED_PROPMAIN"];
            this.relationFK_OWNERD_OWNERM = this.Relations["FK_OWNERD_OWNERM"];
            this.relationFK_OWNERD_PROPMAIN = this.Relations["FK_OWNERD_PROPMAIN"];
            this.relationFK_PERIODD_PERIODM = this.Relations["FK_PERIODD_PERIODM"];
            this.relationFK_PERIODD_PROPMAIN = this.Relations["FK_PERIODD_PROPMAIN"];
            this.relationFK_PROPMAIN_CERTM = this.Relations["FK_PROPMAIN_CERTM"];
            this.relationFK_PROPMAIN_RETYPEM = this.Relations["FK_PROPMAIN_RETYPEM"];
            this.relationFK_SIGNAMED_PROPMAIN = this.Relations["FK_SIGNAMED_PROPMAIN"];
            this.relationFK_SIGYEARD_PROPMAIN = this.Relations["FK_SIGYEARD_PROPMAIN"];
            this.relationFK_PROPMAIN_PROPMAIN = this.Relations["FK_PROPMAIN_PROPMAIN"];
            this.relationFK_ARSTYLD_ARSTYLM = this.Relations["FK_ARSTYLD_ARSTYLM"];
            this.relationFK_PROPMAIN_ARSTYLD = this.Relations["FK_PROPMAIN_ARSTYLD"];
            this.relationFK_GEOCODEM_STATEM = this.Relations["FK_GEOCODEM_STATEM"];
            this.relationFK_GEOCODEM_STATEM1 = this.Relations["FK_GEOCODEM_STATEM1"];
            this.relationFK_GEOCODEM_PROPMAIN = this.Relations["FK_GEOCODEM_PROPMAIN"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "NrhpDatabase";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/NrhpDatabase.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAPCRITD = new APCRITDDataTable();
            base.Tables.Add(this.tableAPCRITD);
            this.tableSTATEM = new STATEMDataTable();
            base.Tables.Add(this.tableSTATEM);
            this.tableAPCRITM = new APCRITMDataTable();
            base.Tables.Add(this.tableAPCRITM);
            this.tableARCHTECD = new ARCHTECDDataTable();
            base.Tables.Add(this.tableARCHTECD);
            this.tableAREASGD = new AREASGDDataTable();
            base.Tables.Add(this.tableAREASGD);
            this.tableAREASGM = new AREASGMDataTable();
            base.Tables.Add(this.tableAREASGM);
            this.tableCERTM = new CERTMDataTable();
            base.Tables.Add(this.tableCERTM);
            this.tableCFUNCD = new CFUNCDDataTable();
            base.Tables.Add(this.tableCFUNCD);
            this.tableCOUNTYD = new COUNTYDDataTable();
            base.Tables.Add(this.tableCOUNTYD);
            this.tableCOUNTYM = new COUNTYMDataTable();
            base.Tables.Add(this.tableCOUNTYM);
            this.tableCRITCND = new CRITCNDDataTable();
            base.Tables.Add(this.tableCRITCND);
            this.tableCRITCNM = new CRITCNMDataTable();
            base.Tables.Add(this.tableCRITCNM);
            this.tableCSFUNCD = new CSFUNCDDataTable();
            base.Tables.Add(this.tableCSFUNCD);
            this.tableCULTAFFD = new CULTAFFDDataTable();
            base.Tables.Add(this.tableCULTAFFD);
            this.tableFEDAGD = new FEDAGDDataTable();
            base.Tables.Add(this.tableFEDAGD);
            this.tableFEDAGM = new FEDAGMDataTable();
            base.Tables.Add(this.tableFEDAGM);
            this.tableFUNCM = new FUNCMDataTable();
            base.Tables.Add(this.tableFUNCM);
            this.tableHFUNCD = new HFUNCDDataTable();
            base.Tables.Add(this.tableHFUNCD);
            this.tableHSFUNCD = new HSFUNCDDataTable();
            base.Tables.Add(this.tableHSFUNCD);
            this.tableLEVSGD = new LEVSGDDataTable();
            base.Tables.Add(this.tableLEVSGD);
            this.tableLEVSGM = new LEVSGMDataTable();
            base.Tables.Add(this.tableLEVSGM);
            this.tableMATD = new MATDDataTable();
            base.Tables.Add(this.tableMATD);
            this.tableMATM = new MATMDataTable();
            base.Tables.Add(this.tableMATM);
            this.tableNOMNAD = new NOMNADDataTable();
            base.Tables.Add(this.tableNOMNAD);
            this.tableNOMNAM = new NOMNAMDataTable();
            base.Tables.Add(this.tableNOMNAM);
            this.tableNOMNAMED = new NOMNAMEDDataTable();
            base.Tables.Add(this.tableNOMNAMED);
            this.tableOSTATED = new OSTATEDDataTable();
            base.Tables.Add(this.tableOSTATED);
            this.tableOTHCERTD = new OTHCERTDDataTable();
            base.Tables.Add(this.tableOTHCERTD);
            this.tableOTHDOCD = new OTHDOCDDataTable();
            base.Tables.Add(this.tableOTHDOCD);
            this.tableOTHDOCM = new OTHDOCMDataTable();
            base.Tables.Add(this.tableOTHDOCM);
            this.tableOTHNAMED = new OTHNAMEDDataTable();
            base.Tables.Add(this.tableOTHNAMED);
            this.tableOWNERD = new OWNERDDataTable();
            base.Tables.Add(this.tableOWNERD);
            this.tableOWNERM = new OWNERMDataTable();
            base.Tables.Add(this.tableOWNERM);
            this.tablePERIODD = new PERIODDDataTable();
            base.Tables.Add(this.tablePERIODD);
            this.tablePERIODM = new PERIODMDataTable();
            base.Tables.Add(this.tablePERIODM);
            this.tablePossibleArticles = new PossibleArticlesDataTable();
            base.Tables.Add(this.tablePossibleArticles);
            this.tablePROPMAIN = new PROPMAINDataTable();
            base.Tables.Add(this.tablePROPMAIN);
            this.tableRETYPEM = new RETYPEMDataTable();
            base.Tables.Add(this.tableRETYPEM);
            this.tableSIGNAMED = new SIGNAMEDDataTable();
            base.Tables.Add(this.tableSIGNAMED);
            this.tableSIGYEARD = new SIGYEARDDataTable();
            base.Tables.Add(this.tableSIGYEARD);
            this.tableARSTYLD = new ARSTYLDDataTable();
            base.Tables.Add(this.tableARSTYLD);
            this.tableARSTYLM = new ARSTYLMDataTable();
            base.Tables.Add(this.tableARSTYLM);
            this.tableGEOCODEM = new GEOCODEMDataTable();
            base.Tables.Add(this.tableGEOCODEM);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("FK_FEDAGD_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tableFEDAGD.refnumColumn});
            this.tableFEDAGD.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            this.relationFK_FEDAGD_PROPMAIN = new System.Data.DataRelation("FK_FEDAGD_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tableFEDAGD.refnumColumn}, false);
            this.Relations.Add(this.relationFK_FEDAGD_PROPMAIN);
            this.relationFK_PossibleArticles_PROPMAIN = new System.Data.DataRelation("FK_PossibleArticles_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tablePossibleArticles.refnumColumn}, false);
            this.relationFK_PossibleArticles_PROPMAIN.Nested = true;
            this.Relations.Add(this.relationFK_PossibleArticles_PROPMAIN);
            this.relationFK_APCRITD_APCRITM = new System.Data.DataRelation("FK_APCRITD_APCRITM", new System.Data.DataColumn[] {
                        this.tableAPCRITM.apcritcdColumn}, new System.Data.DataColumn[] {
                        this.tableAPCRITD.apcritcdColumn}, false);
            this.Relations.Add(this.relationFK_APCRITD_APCRITM);
            this.relationFK_APCRITD_PROPMAIN = new System.Data.DataRelation("FK_APCRITD_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tableAPCRITD.refnumColumn}, false);
            this.Relations.Add(this.relationFK_APCRITD_PROPMAIN);
            this.relationFK_ARCHTECD_PROPMAIN = new System.Data.DataRelation("FK_ARCHTECD_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tableARCHTECD.refnumColumn}, false);
            this.Relations.Add(this.relationFK_ARCHTECD_PROPMAIN);
            this.relationFK_AREASGD_AREASGM = new System.Data.DataRelation("FK_AREASGD_AREASGM", new System.Data.DataColumn[] {
                        this.tableAREASGM.areasgcdColumn}, new System.Data.DataColumn[] {
                        this.tableAREASGD.areasgcdColumn}, false);
            this.Relations.Add(this.relationFK_AREASGD_AREASGM);
            this.relationFK_AREASGD_PROPMAIN = new System.Data.DataRelation("FK_AREASGD_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tableAREASGD.refnumColumn}, false);
            this.Relations.Add(this.relationFK_AREASGD_PROPMAIN);
            this.relationFK_CFUNCD_FUNCM = new System.Data.DataRelation("FK_CFUNCD_FUNCM", new System.Data.DataColumn[] {
                        this.tableFUNCM.funccdColumn}, new System.Data.DataColumn[] {
                        this.tableCFUNCD.cfunccdColumn}, false);
            this.Relations.Add(this.relationFK_CFUNCD_FUNCM);
            this.relationFK_CFUNCD_PROPMAIN = new System.Data.DataRelation("FK_CFUNCD_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tableCFUNCD.refnumColumn}, false);
            this.Relations.Add(this.relationFK_CFUNCD_PROPMAIN);
            this.relationFK_COUNTYD_COUNTYM = new System.Data.DataRelation("FK_COUNTYD_COUNTYM", new System.Data.DataColumn[] {
                        this.tableCOUNTYM.countycdColumn}, new System.Data.DataColumn[] {
                        this.tableCOUNTYD.countycdColumn}, false);
            this.Relations.Add(this.relationFK_COUNTYD_COUNTYM);
            this.relationFK_COUNTYD_PROPMAIN = new System.Data.DataRelation("FK_COUNTYD_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tableCOUNTYD.refnumColumn}, false);
            this.Relations.Add(this.relationFK_COUNTYD_PROPMAIN);
            this.relationFK_COUNTYD_STATEM = new System.Data.DataRelation("FK_COUNTYD_STATEM", new System.Data.DataColumn[] {
                        this.tableSTATEM.statecdColumn}, new System.Data.DataColumn[] {
                        this.tableCOUNTYD.statecdColumn}, false);
            this.Relations.Add(this.relationFK_COUNTYD_STATEM);
            this.relationFK_CRITCND_CRITCNM = new System.Data.DataRelation("FK_CRITCND_CRITCNM", new System.Data.DataColumn[] {
                        this.tableCRITCNM.critcncdColumn}, new System.Data.DataColumn[] {
                        this.tableCRITCND.critcncdColumn}, false);
            this.Relations.Add(this.relationFK_CRITCND_CRITCNM);
            this.relationFK_CRITCND_PROPMAIN = new System.Data.DataRelation("FK_CRITCND_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tableCRITCND.refnumColumn}, false);
            this.Relations.Add(this.relationFK_CRITCND_PROPMAIN);
            this.relationFK_CSFUNCD_FUNCM = new System.Data.DataRelation("FK_CSFUNCD_FUNCM", new System.Data.DataColumn[] {
                        this.tableFUNCM.funccdColumn}, new System.Data.DataColumn[] {
                        this.tableCSFUNCD.csfunccdColumn}, false);
            this.Relations.Add(this.relationFK_CSFUNCD_FUNCM);
            this.relationFK_CSFUNCD_PROPMAIN = new System.Data.DataRelation("FK_CSFUNCD_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tableCSFUNCD.refnumColumn}, false);
            this.Relations.Add(this.relationFK_CSFUNCD_PROPMAIN);
            this.relationFK_CULTAFFD_PROPMAIN = new System.Data.DataRelation("FK_CULTAFFD_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tableCULTAFFD.refnumColumn}, false);
            this.Relations.Add(this.relationFK_CULTAFFD_PROPMAIN);
            this.relationFK_FEDAGD_FEDAGM = new System.Data.DataRelation("FK_FEDAGD_FEDAGM", new System.Data.DataColumn[] {
                        this.tableFEDAGM.fedagcdColumn}, new System.Data.DataColumn[] {
                        this.tableFEDAGD.fedagcdColumn}, false);
            this.Relations.Add(this.relationFK_FEDAGD_FEDAGM);
            this.relationFK_HFUNCD_FUNCM = new System.Data.DataRelation("FK_HFUNCD_FUNCM", new System.Data.DataColumn[] {
                        this.tableFUNCM.funccdColumn}, new System.Data.DataColumn[] {
                        this.tableHFUNCD.hfunccdColumn}, false);
            this.Relations.Add(this.relationFK_HFUNCD_FUNCM);
            this.relationFK_HFUNCD_PROPMAIN = new System.Data.DataRelation("FK_HFUNCD_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tableHFUNCD.refnumColumn}, false);
            this.Relations.Add(this.relationFK_HFUNCD_PROPMAIN);
            this.relationFK_HSFUNCD_FUNCM = new System.Data.DataRelation("FK_HSFUNCD_FUNCM", new System.Data.DataColumn[] {
                        this.tableFUNCM.funccdColumn}, new System.Data.DataColumn[] {
                        this.tableHSFUNCD.hsfunccdColumn}, false);
            this.Relations.Add(this.relationFK_HSFUNCD_FUNCM);
            this.relationFK_HSFUNCD_PROPMAIN = new System.Data.DataRelation("FK_HSFUNCD_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tableHSFUNCD.refnumColumn}, false);
            this.Relations.Add(this.relationFK_HSFUNCD_PROPMAIN);
            this.relationFK_LEVSGD_LEVSGM = new System.Data.DataRelation("FK_LEVSGD_LEVSGM", new System.Data.DataColumn[] {
                        this.tableLEVSGM.levsgcdColumn}, new System.Data.DataColumn[] {
                        this.tableLEVSGD.levsgcdColumn}, false);
            this.Relations.Add(this.relationFK_LEVSGD_LEVSGM);
            this.relationFK_LEVSGD_PROPMAIN = new System.Data.DataRelation("FK_LEVSGD_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tableLEVSGD.refnumColumn}, false);
            this.Relations.Add(this.relationFK_LEVSGD_PROPMAIN);
            this.relationFK_MATD_MATM = new System.Data.DataRelation("FK_MATD_MATM", new System.Data.DataColumn[] {
                        this.tableMATM.matcdColumn}, new System.Data.DataColumn[] {
                        this.tableMATD.matcdColumn}, false);
            this.Relations.Add(this.relationFK_MATD_MATM);
            this.relationFK_MATD_PROPMAIN = new System.Data.DataRelation("FK_MATD_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tableMATD.refnumColumn}, false);
            this.Relations.Add(this.relationFK_MATD_PROPMAIN);
            this.relationFK_NOMNAD_NOMNAM = new System.Data.DataRelation("FK_NOMNAD_NOMNAM", new System.Data.DataColumn[] {
                        this.tableNOMNAM.nomnacdColumn}, new System.Data.DataColumn[] {
                        this.tableNOMNAD.nomnacdColumn}, false);
            this.Relations.Add(this.relationFK_NOMNAD_NOMNAM);
            this.relationFK_NOMNAD_PROPMAIN = new System.Data.DataRelation("FK_NOMNAD_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tableNOMNAD.refnumColumn}, false);
            this.Relations.Add(this.relationFK_NOMNAD_PROPMAIN);
            this.relationFK_NOMNAMED_PROPMAIN = new System.Data.DataRelation("FK_NOMNAMED_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tableNOMNAMED.refnumColumn}, false);
            this.Relations.Add(this.relationFK_NOMNAMED_PROPMAIN);
            this.relationFK_OSTATED_PROPMAIN = new System.Data.DataRelation("FK_OSTATED_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tableOSTATED.refnumColumn}, false);
            this.Relations.Add(this.relationFK_OSTATED_PROPMAIN);
            this.relationFK_OSTATED_STATEM = new System.Data.DataRelation("FK_OSTATED_STATEM", new System.Data.DataColumn[] {
                        this.tableSTATEM.statecdColumn}, new System.Data.DataColumn[] {
                        this.tableOSTATED.statecdColumn}, false);
            this.Relations.Add(this.relationFK_OSTATED_STATEM);
            this.relationFK_OTHCERTD_CERTM = new System.Data.DataRelation("FK_OTHCERTD_CERTM", new System.Data.DataColumn[] {
                        this.tableCERTM.certcdColumn}, new System.Data.DataColumn[] {
                        this.tableOTHCERTD.ocertcdColumn}, false);
            this.Relations.Add(this.relationFK_OTHCERTD_CERTM);
            this.relationFK_OTHCERTD_PROPMAIN = new System.Data.DataRelation("FK_OTHCERTD_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tableOTHCERTD.refnumColumn}, false);
            this.Relations.Add(this.relationFK_OTHCERTD_PROPMAIN);
            this.relationFK_OTHDOCD_OTHDOCM = new System.Data.DataRelation("FK_OTHDOCD_OTHDOCM", new System.Data.DataColumn[] {
                        this.tableOTHDOCM.othdoccdColumn}, new System.Data.DataColumn[] {
                        this.tableOTHDOCD.othdoccdColumn}, false);
            this.Relations.Add(this.relationFK_OTHDOCD_OTHDOCM);
            this.relationFK_OTHDOCD_PROPMAIN = new System.Data.DataRelation("FK_OTHDOCD_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tableOTHDOCD.refnumColumn}, false);
            this.Relations.Add(this.relationFK_OTHDOCD_PROPMAIN);
            this.relationFK_OTHNAMED_PROPMAIN = new System.Data.DataRelation("FK_OTHNAMED_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tableOTHNAMED.refnumColumn}, false);
            this.Relations.Add(this.relationFK_OTHNAMED_PROPMAIN);
            this.relationFK_OWNERD_OWNERM = new System.Data.DataRelation("FK_OWNERD_OWNERM", new System.Data.DataColumn[] {
                        this.tableOWNERM.ownercdColumn}, new System.Data.DataColumn[] {
                        this.tableOWNERD.ownercdColumn}, false);
            this.Relations.Add(this.relationFK_OWNERD_OWNERM);
            this.relationFK_OWNERD_PROPMAIN = new System.Data.DataRelation("FK_OWNERD_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tableOWNERD.refnumColumn}, false);
            this.Relations.Add(this.relationFK_OWNERD_PROPMAIN);
            this.relationFK_PERIODD_PERIODM = new System.Data.DataRelation("FK_PERIODD_PERIODM", new System.Data.DataColumn[] {
                        this.tablePERIODM.periodcdColumn}, new System.Data.DataColumn[] {
                        this.tablePERIODD.periodcdColumn}, false);
            this.Relations.Add(this.relationFK_PERIODD_PERIODM);
            this.relationFK_PERIODD_PROPMAIN = new System.Data.DataRelation("FK_PERIODD_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tablePERIODD.refnumColumn}, false);
            this.Relations.Add(this.relationFK_PERIODD_PROPMAIN);
            this.relationFK_PROPMAIN_CERTM = new System.Data.DataRelation("FK_PROPMAIN_CERTM", new System.Data.DataColumn[] {
                        this.tableCERTM.certcdColumn}, new System.Data.DataColumn[] {
                        this.tablePROPMAIN.certcdColumn}, false);
            this.Relations.Add(this.relationFK_PROPMAIN_CERTM);
            this.relationFK_PROPMAIN_RETYPEM = new System.Data.DataRelation("FK_PROPMAIN_RETYPEM", new System.Data.DataColumn[] {
                        this.tableRETYPEM.retypecdColumn}, new System.Data.DataColumn[] {
                        this.tablePROPMAIN.retypecdColumn}, false);
            this.Relations.Add(this.relationFK_PROPMAIN_RETYPEM);
            this.relationFK_SIGNAMED_PROPMAIN = new System.Data.DataRelation("FK_SIGNAMED_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tableSIGNAMED.refnumColumn}, false);
            this.Relations.Add(this.relationFK_SIGNAMED_PROPMAIN);
            this.relationFK_SIGYEARD_PROPMAIN = new System.Data.DataRelation("FK_SIGYEARD_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tableSIGYEARD.refnumColumn}, false);
            this.Relations.Add(this.relationFK_SIGYEARD_PROPMAIN);
            this.relationFK_PROPMAIN_PROPMAIN = new System.Data.DataRelation("FK_PROPMAIN_PROPMAIN", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tablePROPMAIN.MainArticleRefnumColumn}, false);
            this.Relations.Add(this.relationFK_PROPMAIN_PROPMAIN);
            this.relationFK_ARSTYLD_ARSTYLM = new System.Data.DataRelation("FK_ARSTYLD_ARSTYLM", new System.Data.DataColumn[] {
                        this.tableARSTYLM.arstylcdColumn}, new System.Data.DataColumn[] {
                        this.tableARSTYLD.arstylcdColumn}, false);
            this.Relations.Add(this.relationFK_ARSTYLD_ARSTYLM);
            this.relationFK_PROPMAIN_ARSTYLD = new System.Data.DataRelation("FK_PROPMAIN_ARSTYLD", new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, new System.Data.DataColumn[] {
                        this.tableARSTYLD.refnumColumn}, false);
            this.Relations.Add(this.relationFK_PROPMAIN_ARSTYLD);
            this.relationFK_GEOCODEM_STATEM = new System.Data.DataRelation("FK_GEOCODEM_STATEM", new System.Data.DataColumn[] {
                        this.tableSTATEM.statecdColumn}, new System.Data.DataColumn[] {
                        this.tableGEOCODEM.gdtstatecdColumn}, false);
            this.Relations.Add(this.relationFK_GEOCODEM_STATEM);
            this.relationFK_GEOCODEM_STATEM1 = new System.Data.DataRelation("FK_GEOCODEM_STATEM1", new System.Data.DataColumn[] {
                        this.tableSTATEM.statecdColumn}, new System.Data.DataColumn[] {
                        this.tableGEOCODEM.statecdColumn}, false);
            this.Relations.Add(this.relationFK_GEOCODEM_STATEM1);
            this.relationFK_GEOCODEM_PROPMAIN = new System.Data.DataRelation("FK_GEOCODEM_PROPMAIN", new System.Data.DataColumn[] {
                        this.tableGEOCODEM.refnumColumn}, new System.Data.DataColumn[] {
                        this.tablePROPMAIN.refnumColumn}, false);
            this.Relations.Add(this.relationFK_GEOCODEM_PROPMAIN);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAPCRITD() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSTATEM() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAPCRITM() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeARCHTECD() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAREASGD() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAREASGM() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCERTM() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCFUNCD() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCOUNTYD() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCOUNTYM() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCRITCND() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCRITCNM() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCSFUNCD() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCULTAFFD() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFEDAGD() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFEDAGM() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFUNCM() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHFUNCD() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHSFUNCD() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLEVSGD() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLEVSGM() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMATD() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMATM() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNOMNAD() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNOMNAM() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNOMNAMED() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOSTATED() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOTHCERTD() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOTHDOCD() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOTHDOCM() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOTHNAMED() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOWNERD() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOWNERM() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePERIODD() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePERIODM() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePossibleArticles() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePROPMAIN() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRETYPEM() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSIGNAMED() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSIGYEARD() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeARSTYLD() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeARSTYLM() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGEOCODEM() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            NrhpDatabase ds = new NrhpDatabase();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void APCRITDRowChangeEventHandler(object sender, APCRITDRowChangeEvent e);
        
        public delegate void STATEMRowChangeEventHandler(object sender, STATEMRowChangeEvent e);
        
        public delegate void APCRITMRowChangeEventHandler(object sender, APCRITMRowChangeEvent e);
        
        public delegate void ARCHTECDRowChangeEventHandler(object sender, ARCHTECDRowChangeEvent e);
        
        public delegate void AREASGDRowChangeEventHandler(object sender, AREASGDRowChangeEvent e);
        
        public delegate void AREASGMRowChangeEventHandler(object sender, AREASGMRowChangeEvent e);
        
        public delegate void CERTMRowChangeEventHandler(object sender, CERTMRowChangeEvent e);
        
        public delegate void CFUNCDRowChangeEventHandler(object sender, CFUNCDRowChangeEvent e);
        
        public delegate void COUNTYDRowChangeEventHandler(object sender, COUNTYDRowChangeEvent e);
        
        public delegate void COUNTYMRowChangeEventHandler(object sender, COUNTYMRowChangeEvent e);
        
        public delegate void CRITCNDRowChangeEventHandler(object sender, CRITCNDRowChangeEvent e);
        
        public delegate void CRITCNMRowChangeEventHandler(object sender, CRITCNMRowChangeEvent e);
        
        public delegate void CSFUNCDRowChangeEventHandler(object sender, CSFUNCDRowChangeEvent e);
        
        public delegate void CULTAFFDRowChangeEventHandler(object sender, CULTAFFDRowChangeEvent e);
        
        public delegate void FEDAGDRowChangeEventHandler(object sender, FEDAGDRowChangeEvent e);
        
        public delegate void FEDAGMRowChangeEventHandler(object sender, FEDAGMRowChangeEvent e);
        
        public delegate void FUNCMRowChangeEventHandler(object sender, FUNCMRowChangeEvent e);
        
        public delegate void HFUNCDRowChangeEventHandler(object sender, HFUNCDRowChangeEvent e);
        
        public delegate void HSFUNCDRowChangeEventHandler(object sender, HSFUNCDRowChangeEvent e);
        
        public delegate void LEVSGDRowChangeEventHandler(object sender, LEVSGDRowChangeEvent e);
        
        public delegate void LEVSGMRowChangeEventHandler(object sender, LEVSGMRowChangeEvent e);
        
        public delegate void MATDRowChangeEventHandler(object sender, MATDRowChangeEvent e);
        
        public delegate void MATMRowChangeEventHandler(object sender, MATMRowChangeEvent e);
        
        public delegate void NOMNADRowChangeEventHandler(object sender, NOMNADRowChangeEvent e);
        
        public delegate void NOMNAMRowChangeEventHandler(object sender, NOMNAMRowChangeEvent e);
        
        public delegate void NOMNAMEDRowChangeEventHandler(object sender, NOMNAMEDRowChangeEvent e);
        
        public delegate void OSTATEDRowChangeEventHandler(object sender, OSTATEDRowChangeEvent e);
        
        public delegate void OTHCERTDRowChangeEventHandler(object sender, OTHCERTDRowChangeEvent e);
        
        public delegate void OTHDOCDRowChangeEventHandler(object sender, OTHDOCDRowChangeEvent e);
        
        public delegate void OTHDOCMRowChangeEventHandler(object sender, OTHDOCMRowChangeEvent e);
        
        public delegate void OTHNAMEDRowChangeEventHandler(object sender, OTHNAMEDRowChangeEvent e);
        
        public delegate void OWNERDRowChangeEventHandler(object sender, OWNERDRowChangeEvent e);
        
        public delegate void OWNERMRowChangeEventHandler(object sender, OWNERMRowChangeEvent e);
        
        public delegate void PERIODDRowChangeEventHandler(object sender, PERIODDRowChangeEvent e);
        
        public delegate void PERIODMRowChangeEventHandler(object sender, PERIODMRowChangeEvent e);
        
        public delegate void PossibleArticlesRowChangeEventHandler(object sender, PossibleArticlesRowChangeEvent e);
        
        public delegate void PROPMAINRowChangeEventHandler(object sender, PROPMAINRowChangeEvent e);
        
        public delegate void RETYPEMRowChangeEventHandler(object sender, RETYPEMRowChangeEvent e);
        
        public delegate void SIGNAMEDRowChangeEventHandler(object sender, SIGNAMEDRowChangeEvent e);
        
        public delegate void SIGYEARDRowChangeEventHandler(object sender, SIGYEARDRowChangeEvent e);
        
        public delegate void ARSTYLDRowChangeEventHandler(object sender, ARSTYLDRowChangeEvent e);
        
        public delegate void ARSTYLMRowChangeEventHandler(object sender, ARSTYLMRowChangeEvent e);
        
        public delegate void GEOCODEMRowChangeEventHandler(object sender, GEOCODEMRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class APCRITDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columnapcritcd;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public APCRITDDataTable() {
                this.TableName = "APCRITD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal APCRITDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected APCRITDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn apcritcdColumn {
                get {
                    return this.columnapcritcd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public APCRITDRow this[int index] {
                get {
                    return ((APCRITDRow)(this.Rows[index]));
                }
            }
            
            public event APCRITDRowChangeEventHandler APCRITDRowChanging;
            
            public event APCRITDRowChangeEventHandler APCRITDRowChanged;
            
            public event APCRITDRowChangeEventHandler APCRITDRowDeleting;
            
            public event APCRITDRowChangeEventHandler APCRITDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAPCRITDRow(APCRITDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public APCRITDRow AddAPCRITDRow(PROPMAINRow parentPROPMAINRowByFK_APCRITD_PROPMAIN, APCRITMRow parentAPCRITMRowByFK_APCRITD_APCRITM) {
                APCRITDRow rowAPCRITDRow = ((APCRITDRow)(this.NewRow()));
                rowAPCRITDRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_APCRITD_PROPMAIN[0],
                        parentAPCRITMRowByFK_APCRITD_APCRITM[0]};
                this.Rows.Add(rowAPCRITDRow);
                return rowAPCRITDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public APCRITDRow FindByrefnumapcritcd(int refnum, string apcritcd) {
                return ((APCRITDRow)(this.Rows.Find(new object[] {
                            refnum,
                            apcritcd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                APCRITDDataTable cln = ((APCRITDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new APCRITDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columnapcritcd = base.Columns["apcritcd"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columnapcritcd = new System.Data.DataColumn("apcritcd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnapcritcd);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columnapcritcd}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columnapcritcd.AllowDBNull = false;
                this.columnapcritcd.MaxLength = 1;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public APCRITDRow NewAPCRITDRow() {
                return ((APCRITDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new APCRITDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(APCRITDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.APCRITDRowChanged != null)) {
                    this.APCRITDRowChanged(this, new APCRITDRowChangeEvent(((APCRITDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.APCRITDRowChanging != null)) {
                    this.APCRITDRowChanging(this, new APCRITDRowChangeEvent(((APCRITDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.APCRITDRowDeleted != null)) {
                    this.APCRITDRowDeleted(this, new APCRITDRowChangeEvent(((APCRITDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.APCRITDRowDeleting != null)) {
                    this.APCRITDRowDeleting(this, new APCRITDRowChangeEvent(((APCRITDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAPCRITDRow(APCRITDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "APCRITDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class STATEMDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnstatecd;
            
            private System.Data.DataColumn columnstate;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STATEMDataTable() {
                this.TableName = "STATEM";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STATEMDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected STATEMDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn statecdColumn {
                get {
                    return this.columnstatecd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn stateColumn {
                get {
                    return this.columnstate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STATEMRow this[int index] {
                get {
                    return ((STATEMRow)(this.Rows[index]));
                }
            }
            
            public event STATEMRowChangeEventHandler STATEMRowChanging;
            
            public event STATEMRowChangeEventHandler STATEMRowChanged;
            
            public event STATEMRowChangeEventHandler STATEMRowDeleting;
            
            public event STATEMRowChangeEventHandler STATEMRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSTATEMRow(STATEMRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STATEMRow AddSTATEMRow(string statecd, string state) {
                STATEMRow rowSTATEMRow = ((STATEMRow)(this.NewRow()));
                rowSTATEMRow.ItemArray = new object[] {
                        statecd,
                        state};
                this.Rows.Add(rowSTATEMRow);
                return rowSTATEMRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STATEMRow FindBystatecd(string statecd) {
                return ((STATEMRow)(this.Rows.Find(new object[] {
                            statecd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                STATEMDataTable cln = ((STATEMDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new STATEMDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnstatecd = base.Columns["statecd"];
                this.columnstate = base.Columns["state"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnstatecd = new System.Data.DataColumn("statecd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatecd);
                this.columnstate = new System.Data.DataColumn("state", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstate);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnstatecd}, true));
                this.columnstatecd.AllowDBNull = false;
                this.columnstatecd.Unique = true;
                this.columnstatecd.MaxLength = 2;
                this.columnstate.AllowDBNull = false;
                this.columnstate.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STATEMRow NewSTATEMRow() {
                return ((STATEMRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new STATEMRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(STATEMRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.STATEMRowChanged != null)) {
                    this.STATEMRowChanged(this, new STATEMRowChangeEvent(((STATEMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.STATEMRowChanging != null)) {
                    this.STATEMRowChanging(this, new STATEMRowChangeEvent(((STATEMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.STATEMRowDeleted != null)) {
                    this.STATEMRowDeleted(this, new STATEMRowChangeEvent(((STATEMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.STATEMRowDeleting != null)) {
                    this.STATEMRowDeleting(this, new STATEMRowChangeEvent(((STATEMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSTATEMRow(STATEMRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "STATEMDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class APCRITMDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnapcritcd;
            
            private System.Data.DataColumn columnapcrit;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public APCRITMDataTable() {
                this.TableName = "APCRITM";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal APCRITMDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected APCRITMDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn apcritcdColumn {
                get {
                    return this.columnapcritcd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn apcritColumn {
                get {
                    return this.columnapcrit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public APCRITMRow this[int index] {
                get {
                    return ((APCRITMRow)(this.Rows[index]));
                }
            }
            
            public event APCRITMRowChangeEventHandler APCRITMRowChanging;
            
            public event APCRITMRowChangeEventHandler APCRITMRowChanged;
            
            public event APCRITMRowChangeEventHandler APCRITMRowDeleting;
            
            public event APCRITMRowChangeEventHandler APCRITMRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAPCRITMRow(APCRITMRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public APCRITMRow AddAPCRITMRow(string apcritcd, string apcrit) {
                APCRITMRow rowAPCRITMRow = ((APCRITMRow)(this.NewRow()));
                rowAPCRITMRow.ItemArray = new object[] {
                        apcritcd,
                        apcrit};
                this.Rows.Add(rowAPCRITMRow);
                return rowAPCRITMRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public APCRITMRow FindByapcritcd(string apcritcd) {
                return ((APCRITMRow)(this.Rows.Find(new object[] {
                            apcritcd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                APCRITMDataTable cln = ((APCRITMDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new APCRITMDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnapcritcd = base.Columns["apcritcd"];
                this.columnapcrit = base.Columns["apcrit"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnapcritcd = new System.Data.DataColumn("apcritcd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnapcritcd);
                this.columnapcrit = new System.Data.DataColumn("apcrit", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnapcrit);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnapcritcd}, true));
                this.columnapcritcd.AllowDBNull = false;
                this.columnapcritcd.Unique = true;
                this.columnapcritcd.MaxLength = 1;
                this.columnapcrit.AllowDBNull = false;
                this.columnapcrit.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public APCRITMRow NewAPCRITMRow() {
                return ((APCRITMRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new APCRITMRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(APCRITMRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.APCRITMRowChanged != null)) {
                    this.APCRITMRowChanged(this, new APCRITMRowChangeEvent(((APCRITMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.APCRITMRowChanging != null)) {
                    this.APCRITMRowChanging(this, new APCRITMRowChangeEvent(((APCRITMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.APCRITMRowDeleted != null)) {
                    this.APCRITMRowDeleted(this, new APCRITMRowChangeEvent(((APCRITMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.APCRITMRowDeleting != null)) {
                    this.APCRITMRowDeleting(this, new APCRITMRowChangeEvent(((APCRITMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAPCRITMRow(APCRITMRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "APCRITMDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ARCHTECDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columnarchitect;
            
            private System.Data.DataColumn columnCleanName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARCHTECDDataTable() {
                this.TableName = "ARCHTECD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ARCHTECDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ARCHTECDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn architectColumn {
                get {
                    return this.columnarchitect;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CleanNameColumn {
                get {
                    return this.columnCleanName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARCHTECDRow this[int index] {
                get {
                    return ((ARCHTECDRow)(this.Rows[index]));
                }
            }
            
            public event ARCHTECDRowChangeEventHandler ARCHTECDRowChanging;
            
            public event ARCHTECDRowChangeEventHandler ARCHTECDRowChanged;
            
            public event ARCHTECDRowChangeEventHandler ARCHTECDRowDeleting;
            
            public event ARCHTECDRowChangeEventHandler ARCHTECDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddARCHTECDRow(ARCHTECDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARCHTECDRow AddARCHTECDRow(PROPMAINRow parentPROPMAINRowByFK_ARCHTECD_PROPMAIN, string architect, string CleanName) {
                ARCHTECDRow rowARCHTECDRow = ((ARCHTECDRow)(this.NewRow()));
                rowARCHTECDRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_ARCHTECD_PROPMAIN[0],
                        architect,
                        CleanName};
                this.Rows.Add(rowARCHTECDRow);
                return rowARCHTECDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARCHTECDRow FindByrefnumarchitect(int refnum, string architect) {
                return ((ARCHTECDRow)(this.Rows.Find(new object[] {
                            refnum,
                            architect})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ARCHTECDDataTable cln = ((ARCHTECDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ARCHTECDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columnarchitect = base.Columns["architect"];
                this.columnCleanName = base.Columns["CleanName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columnarchitect = new System.Data.DataColumn("architect", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnarchitect);
                this.columnCleanName = new System.Data.DataColumn("CleanName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCleanName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columnarchitect}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columnarchitect.AllowDBNull = false;
                this.columnarchitect.MaxLength = 50;
                this.columnCleanName.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARCHTECDRow NewARCHTECDRow() {
                return ((ARCHTECDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ARCHTECDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ARCHTECDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ARCHTECDRowChanged != null)) {
                    this.ARCHTECDRowChanged(this, new ARCHTECDRowChangeEvent(((ARCHTECDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ARCHTECDRowChanging != null)) {
                    this.ARCHTECDRowChanging(this, new ARCHTECDRowChangeEvent(((ARCHTECDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ARCHTECDRowDeleted != null)) {
                    this.ARCHTECDRowDeleted(this, new ARCHTECDRowChangeEvent(((ARCHTECDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ARCHTECDRowDeleting != null)) {
                    this.ARCHTECDRowDeleting(this, new ARCHTECDRowChangeEvent(((ARCHTECDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveARCHTECDRow(ARCHTECDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ARCHTECDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AREASGDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columnareasgcd;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AREASGDDataTable() {
                this.TableName = "AREASGD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AREASGDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AREASGDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn areasgcdColumn {
                get {
                    return this.columnareasgcd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AREASGDRow this[int index] {
                get {
                    return ((AREASGDRow)(this.Rows[index]));
                }
            }
            
            public event AREASGDRowChangeEventHandler AREASGDRowChanging;
            
            public event AREASGDRowChangeEventHandler AREASGDRowChanged;
            
            public event AREASGDRowChangeEventHandler AREASGDRowDeleting;
            
            public event AREASGDRowChangeEventHandler AREASGDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAREASGDRow(AREASGDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AREASGDRow AddAREASGDRow(PROPMAINRow parentPROPMAINRowByFK_AREASGD_PROPMAIN, AREASGMRow parentAREASGMRowByFK_AREASGD_AREASGM) {
                AREASGDRow rowAREASGDRow = ((AREASGDRow)(this.NewRow()));
                rowAREASGDRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_AREASGD_PROPMAIN[0],
                        parentAREASGMRowByFK_AREASGD_AREASGM[0]};
                this.Rows.Add(rowAREASGDRow);
                return rowAREASGDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AREASGDRow FindByrefnumareasgcd(int refnum, int areasgcd) {
                return ((AREASGDRow)(this.Rows.Find(new object[] {
                            refnum,
                            areasgcd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AREASGDDataTable cln = ((AREASGDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AREASGDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columnareasgcd = base.Columns["areasgcd"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columnareasgcd = new System.Data.DataColumn("areasgcd", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnareasgcd);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columnareasgcd}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columnareasgcd.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AREASGDRow NewAREASGDRow() {
                return ((AREASGDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AREASGDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AREASGDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AREASGDRowChanged != null)) {
                    this.AREASGDRowChanged(this, new AREASGDRowChangeEvent(((AREASGDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AREASGDRowChanging != null)) {
                    this.AREASGDRowChanging(this, new AREASGDRowChangeEvent(((AREASGDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AREASGDRowDeleted != null)) {
                    this.AREASGDRowDeleted(this, new AREASGDRowChangeEvent(((AREASGDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AREASGDRowDeleting != null)) {
                    this.AREASGDRowDeleting(this, new AREASGDRowChangeEvent(((AREASGDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAREASGDRow(AREASGDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AREASGDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AREASGMDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnareasgcd;
            
            private System.Data.DataColumn columnareasg;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AREASGMDataTable() {
                this.TableName = "AREASGM";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AREASGMDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AREASGMDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn areasgcdColumn {
                get {
                    return this.columnareasgcd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn areasgColumn {
                get {
                    return this.columnareasg;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AREASGMRow this[int index] {
                get {
                    return ((AREASGMRow)(this.Rows[index]));
                }
            }
            
            public event AREASGMRowChangeEventHandler AREASGMRowChanging;
            
            public event AREASGMRowChangeEventHandler AREASGMRowChanged;
            
            public event AREASGMRowChangeEventHandler AREASGMRowDeleting;
            
            public event AREASGMRowChangeEventHandler AREASGMRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAREASGMRow(AREASGMRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AREASGMRow AddAREASGMRow(int areasgcd, string areasg) {
                AREASGMRow rowAREASGMRow = ((AREASGMRow)(this.NewRow()));
                rowAREASGMRow.ItemArray = new object[] {
                        areasgcd,
                        areasg};
                this.Rows.Add(rowAREASGMRow);
                return rowAREASGMRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AREASGMRow FindByareasgcd(int areasgcd) {
                return ((AREASGMRow)(this.Rows.Find(new object[] {
                            areasgcd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AREASGMDataTable cln = ((AREASGMDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AREASGMDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnareasgcd = base.Columns["areasgcd"];
                this.columnareasg = base.Columns["areasg"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnareasgcd = new System.Data.DataColumn("areasgcd", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnareasgcd);
                this.columnareasg = new System.Data.DataColumn("areasg", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnareasg);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnareasgcd}, true));
                this.columnareasgcd.AllowDBNull = false;
                this.columnareasgcd.Unique = true;
                this.columnareasg.AllowDBNull = false;
                this.columnareasg.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AREASGMRow NewAREASGMRow() {
                return ((AREASGMRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AREASGMRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AREASGMRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AREASGMRowChanged != null)) {
                    this.AREASGMRowChanged(this, new AREASGMRowChangeEvent(((AREASGMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AREASGMRowChanging != null)) {
                    this.AREASGMRowChanging(this, new AREASGMRowChangeEvent(((AREASGMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AREASGMRowDeleted != null)) {
                    this.AREASGMRowDeleted(this, new AREASGMRowChangeEvent(((AREASGMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AREASGMRowDeleting != null)) {
                    this.AREASGMRowDeleting(this, new AREASGMRowChangeEvent(((AREASGMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAREASGMRow(AREASGMRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AREASGMDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CERTMDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columncertcd;
            
            private System.Data.DataColumn columncert;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CERTMDataTable() {
                this.TableName = "CERTM";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CERTMDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CERTMDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn certcdColumn {
                get {
                    return this.columncertcd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn certColumn {
                get {
                    return this.columncert;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CERTMRow this[int index] {
                get {
                    return ((CERTMRow)(this.Rows[index]));
                }
            }
            
            public event CERTMRowChangeEventHandler CERTMRowChanging;
            
            public event CERTMRowChangeEventHandler CERTMRowChanged;
            
            public event CERTMRowChangeEventHandler CERTMRowDeleting;
            
            public event CERTMRowChangeEventHandler CERTMRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCERTMRow(CERTMRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CERTMRow AddCERTMRow(string certcd, string cert) {
                CERTMRow rowCERTMRow = ((CERTMRow)(this.NewRow()));
                rowCERTMRow.ItemArray = new object[] {
                        certcd,
                        cert};
                this.Rows.Add(rowCERTMRow);
                return rowCERTMRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CERTMRow FindBycertcd(string certcd) {
                return ((CERTMRow)(this.Rows.Find(new object[] {
                            certcd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CERTMDataTable cln = ((CERTMDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CERTMDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncertcd = base.Columns["certcd"];
                this.columncert = base.Columns["cert"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncertcd = new System.Data.DataColumn("certcd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncertcd);
                this.columncert = new System.Data.DataColumn("cert", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncert);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columncertcd}, true));
                this.columncertcd.AllowDBNull = false;
                this.columncertcd.Unique = true;
                this.columncertcd.MaxLength = 2;
                this.columncert.MaxLength = 200;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CERTMRow NewCERTMRow() {
                return ((CERTMRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CERTMRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CERTMRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CERTMRowChanged != null)) {
                    this.CERTMRowChanged(this, new CERTMRowChangeEvent(((CERTMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CERTMRowChanging != null)) {
                    this.CERTMRowChanging(this, new CERTMRowChangeEvent(((CERTMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CERTMRowDeleted != null)) {
                    this.CERTMRowDeleted(this, new CERTMRowChangeEvent(((CERTMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CERTMRowDeleting != null)) {
                    this.CERTMRowDeleting(this, new CERTMRowChangeEvent(((CERTMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCERTMRow(CERTMRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CERTMDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CFUNCDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columncfunccd;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CFUNCDDataTable() {
                this.TableName = "CFUNCD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CFUNCDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CFUNCDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cfunccdColumn {
                get {
                    return this.columncfunccd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CFUNCDRow this[int index] {
                get {
                    return ((CFUNCDRow)(this.Rows[index]));
                }
            }
            
            public event CFUNCDRowChangeEventHandler CFUNCDRowChanging;
            
            public event CFUNCDRowChangeEventHandler CFUNCDRowChanged;
            
            public event CFUNCDRowChangeEventHandler CFUNCDRowDeleting;
            
            public event CFUNCDRowChangeEventHandler CFUNCDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCFUNCDRow(CFUNCDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CFUNCDRow AddCFUNCDRow(PROPMAINRow parentPROPMAINRowByFK_CFUNCD_PROPMAIN, FUNCMRow parentFUNCMRowByFK_CFUNCD_FUNCM) {
                CFUNCDRow rowCFUNCDRow = ((CFUNCDRow)(this.NewRow()));
                rowCFUNCDRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_CFUNCD_PROPMAIN[0],
                        parentFUNCMRowByFK_CFUNCD_FUNCM[0]};
                this.Rows.Add(rowCFUNCDRow);
                return rowCFUNCDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CFUNCDRow FindByrefnumcfunccd(int refnum, string cfunccd) {
                return ((CFUNCDRow)(this.Rows.Find(new object[] {
                            refnum,
                            cfunccd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CFUNCDDataTable cln = ((CFUNCDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CFUNCDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columncfunccd = base.Columns["cfunccd"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columncfunccd = new System.Data.DataColumn("cfunccd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncfunccd);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columncfunccd}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columncfunccd.AllowDBNull = false;
                this.columncfunccd.MaxLength = 3;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CFUNCDRow NewCFUNCDRow() {
                return ((CFUNCDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CFUNCDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CFUNCDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CFUNCDRowChanged != null)) {
                    this.CFUNCDRowChanged(this, new CFUNCDRowChangeEvent(((CFUNCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CFUNCDRowChanging != null)) {
                    this.CFUNCDRowChanging(this, new CFUNCDRowChangeEvent(((CFUNCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CFUNCDRowDeleted != null)) {
                    this.CFUNCDRowDeleted(this, new CFUNCDRowChangeEvent(((CFUNCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CFUNCDRowDeleting != null)) {
                    this.CFUNCDRowDeleting(this, new CFUNCDRowChangeEvent(((CFUNCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCFUNCDRow(CFUNCDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CFUNCDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class COUNTYDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columncountycd;
            
            private System.Data.DataColumn columncity;
            
            private System.Data.DataColumn columnvicinity;
            
            private System.Data.DataColumn columnstatecd;
            
            private System.Data.DataColumn columnprimeflg;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COUNTYDDataTable() {
                this.TableName = "COUNTYD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COUNTYDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected COUNTYDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn countycdColumn {
                get {
                    return this.columncountycd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cityColumn {
                get {
                    return this.columncity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn vicinityColumn {
                get {
                    return this.columnvicinity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn statecdColumn {
                get {
                    return this.columnstatecd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn primeflgColumn {
                get {
                    return this.columnprimeflg;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COUNTYDRow this[int index] {
                get {
                    return ((COUNTYDRow)(this.Rows[index]));
                }
            }
            
            public event COUNTYDRowChangeEventHandler COUNTYDRowChanging;
            
            public event COUNTYDRowChangeEventHandler COUNTYDRowChanged;
            
            public event COUNTYDRowChangeEventHandler COUNTYDRowDeleting;
            
            public event COUNTYDRowChangeEventHandler COUNTYDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCOUNTYDRow(COUNTYDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COUNTYDRow AddCOUNTYDRow(PROPMAINRow parentPROPMAINRowByFK_COUNTYD_PROPMAIN, COUNTYMRow parentCOUNTYMRowByFK_COUNTYD_COUNTYM, string city, bool vicinity, STATEMRow parentSTATEMRowByFK_COUNTYD_STATEM, bool primeflg) {
                COUNTYDRow rowCOUNTYDRow = ((COUNTYDRow)(this.NewRow()));
                rowCOUNTYDRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_COUNTYD_PROPMAIN[0],
                        parentCOUNTYMRowByFK_COUNTYD_COUNTYM[0],
                        city,
                        vicinity,
                        parentSTATEMRowByFK_COUNTYD_STATEM[0],
                        primeflg};
                this.Rows.Add(rowCOUNTYDRow);
                return rowCOUNTYDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COUNTYDRow FindByrefnumcountycdcity(int refnum, string countycd, string city) {
                return ((COUNTYDRow)(this.Rows.Find(new object[] {
                            refnum,
                            countycd,
                            city})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                COUNTYDDataTable cln = ((COUNTYDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new COUNTYDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columncountycd = base.Columns["countycd"];
                this.columncity = base.Columns["city"];
                this.columnvicinity = base.Columns["vicinity"];
                this.columnstatecd = base.Columns["statecd"];
                this.columnprimeflg = base.Columns["primeflg"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columncountycd = new System.Data.DataColumn("countycd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncountycd);
                this.columncity = new System.Data.DataColumn("city", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncity);
                this.columnvicinity = new System.Data.DataColumn("vicinity", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvicinity);
                this.columnstatecd = new System.Data.DataColumn("statecd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatecd);
                this.columnprimeflg = new System.Data.DataColumn("primeflg", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprimeflg);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columncountycd,
                                this.columncity}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columncountycd.AllowDBNull = false;
                this.columncountycd.MaxLength = 6;
                this.columncity.AllowDBNull = false;
                this.columncity.MaxLength = 50;
                this.columnvicinity.AllowDBNull = false;
                this.columnstatecd.AllowDBNull = false;
                this.columnstatecd.MaxLength = 2;
                this.columnprimeflg.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COUNTYDRow NewCOUNTYDRow() {
                return ((COUNTYDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new COUNTYDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(COUNTYDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.COUNTYDRowChanged != null)) {
                    this.COUNTYDRowChanged(this, new COUNTYDRowChangeEvent(((COUNTYDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.COUNTYDRowChanging != null)) {
                    this.COUNTYDRowChanging(this, new COUNTYDRowChangeEvent(((COUNTYDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.COUNTYDRowDeleted != null)) {
                    this.COUNTYDRowDeleted(this, new COUNTYDRowChangeEvent(((COUNTYDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.COUNTYDRowDeleting != null)) {
                    this.COUNTYDRowDeleting(this, new COUNTYDRowChangeEvent(((COUNTYDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCOUNTYDRow(COUNTYDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "COUNTYDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class COUNTYMDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columncountycd;
            
            private System.Data.DataColumn columncounty;
            
            private System.Data.DataColumn columncntytype;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COUNTYMDataTable() {
                this.TableName = "COUNTYM";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COUNTYMDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected COUNTYMDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn countycdColumn {
                get {
                    return this.columncountycd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn countyColumn {
                get {
                    return this.columncounty;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cntytypeColumn {
                get {
                    return this.columncntytype;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COUNTYMRow this[int index] {
                get {
                    return ((COUNTYMRow)(this.Rows[index]));
                }
            }
            
            public event COUNTYMRowChangeEventHandler COUNTYMRowChanging;
            
            public event COUNTYMRowChangeEventHandler COUNTYMRowChanged;
            
            public event COUNTYMRowChangeEventHandler COUNTYMRowDeleting;
            
            public event COUNTYMRowChangeEventHandler COUNTYMRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCOUNTYMRow(COUNTYMRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COUNTYMRow AddCOUNTYMRow(string countycd, string county, string cntytype) {
                COUNTYMRow rowCOUNTYMRow = ((COUNTYMRow)(this.NewRow()));
                rowCOUNTYMRow.ItemArray = new object[] {
                        countycd,
                        county,
                        cntytype};
                this.Rows.Add(rowCOUNTYMRow);
                return rowCOUNTYMRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COUNTYMRow FindBycountycd(string countycd) {
                return ((COUNTYMRow)(this.Rows.Find(new object[] {
                            countycd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                COUNTYMDataTable cln = ((COUNTYMDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new COUNTYMDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncountycd = base.Columns["countycd"];
                this.columncounty = base.Columns["county"];
                this.columncntytype = base.Columns["cntytype"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncountycd = new System.Data.DataColumn("countycd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncountycd);
                this.columncounty = new System.Data.DataColumn("county", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncounty);
                this.columncntytype = new System.Data.DataColumn("cntytype", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncntytype);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columncountycd}, true));
                this.columncountycd.AllowDBNull = false;
                this.columncountycd.Unique = true;
                this.columncountycd.MaxLength = 6;
                this.columncounty.AllowDBNull = false;
                this.columncounty.MaxLength = 50;
                this.columncntytype.AllowDBNull = false;
                this.columncntytype.MaxLength = 2;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COUNTYMRow NewCOUNTYMRow() {
                return ((COUNTYMRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new COUNTYMRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(COUNTYMRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.COUNTYMRowChanged != null)) {
                    this.COUNTYMRowChanged(this, new COUNTYMRowChangeEvent(((COUNTYMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.COUNTYMRowChanging != null)) {
                    this.COUNTYMRowChanging(this, new COUNTYMRowChangeEvent(((COUNTYMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.COUNTYMRowDeleted != null)) {
                    this.COUNTYMRowDeleted(this, new COUNTYMRowChangeEvent(((COUNTYMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.COUNTYMRowDeleting != null)) {
                    this.COUNTYMRowDeleting(this, new COUNTYMRowChangeEvent(((COUNTYMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCOUNTYMRow(COUNTYMRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "COUNTYMDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CRITCNDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columncritcncd;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CRITCNDDataTable() {
                this.TableName = "CRITCND";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CRITCNDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CRITCNDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn critcncdColumn {
                get {
                    return this.columncritcncd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CRITCNDRow this[int index] {
                get {
                    return ((CRITCNDRow)(this.Rows[index]));
                }
            }
            
            public event CRITCNDRowChangeEventHandler CRITCNDRowChanging;
            
            public event CRITCNDRowChangeEventHandler CRITCNDRowChanged;
            
            public event CRITCNDRowChangeEventHandler CRITCNDRowDeleting;
            
            public event CRITCNDRowChangeEventHandler CRITCNDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCRITCNDRow(CRITCNDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CRITCNDRow AddCRITCNDRow(PROPMAINRow parentPROPMAINRowByFK_CRITCND_PROPMAIN, CRITCNMRow parentCRITCNMRowByFK_CRITCND_CRITCNM) {
                CRITCNDRow rowCRITCNDRow = ((CRITCNDRow)(this.NewRow()));
                rowCRITCNDRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_CRITCND_PROPMAIN[0],
                        parentCRITCNMRowByFK_CRITCND_CRITCNM[0]};
                this.Rows.Add(rowCRITCNDRow);
                return rowCRITCNDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CRITCNDRow FindByrefnumcritcncd(int refnum, string critcncd) {
                return ((CRITCNDRow)(this.Rows.Find(new object[] {
                            refnum,
                            critcncd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CRITCNDDataTable cln = ((CRITCNDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CRITCNDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columncritcncd = base.Columns["critcncd"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columncritcncd = new System.Data.DataColumn("critcncd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncritcncd);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columncritcncd}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columncritcncd.AllowDBNull = false;
                this.columncritcncd.MaxLength = 1;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CRITCNDRow NewCRITCNDRow() {
                return ((CRITCNDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CRITCNDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CRITCNDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CRITCNDRowChanged != null)) {
                    this.CRITCNDRowChanged(this, new CRITCNDRowChangeEvent(((CRITCNDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CRITCNDRowChanging != null)) {
                    this.CRITCNDRowChanging(this, new CRITCNDRowChangeEvent(((CRITCNDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CRITCNDRowDeleted != null)) {
                    this.CRITCNDRowDeleted(this, new CRITCNDRowChangeEvent(((CRITCNDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CRITCNDRowDeleting != null)) {
                    this.CRITCNDRowDeleting(this, new CRITCNDRowChangeEvent(((CRITCNDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCRITCNDRow(CRITCNDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CRITCNDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CRITCNMDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columncritcncd;
            
            private System.Data.DataColumn columncritcn;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CRITCNMDataTable() {
                this.TableName = "CRITCNM";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CRITCNMDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CRITCNMDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn critcncdColumn {
                get {
                    return this.columncritcncd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn critcnColumn {
                get {
                    return this.columncritcn;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CRITCNMRow this[int index] {
                get {
                    return ((CRITCNMRow)(this.Rows[index]));
                }
            }
            
            public event CRITCNMRowChangeEventHandler CRITCNMRowChanging;
            
            public event CRITCNMRowChangeEventHandler CRITCNMRowChanged;
            
            public event CRITCNMRowChangeEventHandler CRITCNMRowDeleting;
            
            public event CRITCNMRowChangeEventHandler CRITCNMRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCRITCNMRow(CRITCNMRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CRITCNMRow AddCRITCNMRow(string critcncd, string critcn) {
                CRITCNMRow rowCRITCNMRow = ((CRITCNMRow)(this.NewRow()));
                rowCRITCNMRow.ItemArray = new object[] {
                        critcncd,
                        critcn};
                this.Rows.Add(rowCRITCNMRow);
                return rowCRITCNMRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CRITCNMRow FindBycritcncd(string critcncd) {
                return ((CRITCNMRow)(this.Rows.Find(new object[] {
                            critcncd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CRITCNMDataTable cln = ((CRITCNMDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CRITCNMDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncritcncd = base.Columns["critcncd"];
                this.columncritcn = base.Columns["critcn"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncritcncd = new System.Data.DataColumn("critcncd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncritcncd);
                this.columncritcn = new System.Data.DataColumn("critcn", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncritcn);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columncritcncd}, true));
                this.columncritcncd.AllowDBNull = false;
                this.columncritcncd.Unique = true;
                this.columncritcncd.MaxLength = 1;
                this.columncritcn.AllowDBNull = false;
                this.columncritcn.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CRITCNMRow NewCRITCNMRow() {
                return ((CRITCNMRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CRITCNMRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CRITCNMRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CRITCNMRowChanged != null)) {
                    this.CRITCNMRowChanged(this, new CRITCNMRowChangeEvent(((CRITCNMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CRITCNMRowChanging != null)) {
                    this.CRITCNMRowChanging(this, new CRITCNMRowChangeEvent(((CRITCNMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CRITCNMRowDeleted != null)) {
                    this.CRITCNMRowDeleted(this, new CRITCNMRowChangeEvent(((CRITCNMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CRITCNMRowDeleting != null)) {
                    this.CRITCNMRowDeleting(this, new CRITCNMRowChangeEvent(((CRITCNMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCRITCNMRow(CRITCNMRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CRITCNMDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CSFUNCDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columncsfunccd;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CSFUNCDDataTable() {
                this.TableName = "CSFUNCD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CSFUNCDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CSFUNCDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn csfunccdColumn {
                get {
                    return this.columncsfunccd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CSFUNCDRow this[int index] {
                get {
                    return ((CSFUNCDRow)(this.Rows[index]));
                }
            }
            
            public event CSFUNCDRowChangeEventHandler CSFUNCDRowChanging;
            
            public event CSFUNCDRowChangeEventHandler CSFUNCDRowChanged;
            
            public event CSFUNCDRowChangeEventHandler CSFUNCDRowDeleting;
            
            public event CSFUNCDRowChangeEventHandler CSFUNCDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCSFUNCDRow(CSFUNCDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CSFUNCDRow AddCSFUNCDRow(PROPMAINRow parentPROPMAINRowByFK_CSFUNCD_PROPMAIN, FUNCMRow parentFUNCMRowByFK_CSFUNCD_FUNCM) {
                CSFUNCDRow rowCSFUNCDRow = ((CSFUNCDRow)(this.NewRow()));
                rowCSFUNCDRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_CSFUNCD_PROPMAIN[0],
                        parentFUNCMRowByFK_CSFUNCD_FUNCM[0]};
                this.Rows.Add(rowCSFUNCDRow);
                return rowCSFUNCDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CSFUNCDRow FindByrefnumcsfunccd(int refnum, string csfunccd) {
                return ((CSFUNCDRow)(this.Rows.Find(new object[] {
                            refnum,
                            csfunccd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CSFUNCDDataTable cln = ((CSFUNCDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CSFUNCDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columncsfunccd = base.Columns["csfunccd"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columncsfunccd = new System.Data.DataColumn("csfunccd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncsfunccd);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columncsfunccd}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columncsfunccd.AllowDBNull = false;
                this.columncsfunccd.MaxLength = 3;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CSFUNCDRow NewCSFUNCDRow() {
                return ((CSFUNCDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CSFUNCDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CSFUNCDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CSFUNCDRowChanged != null)) {
                    this.CSFUNCDRowChanged(this, new CSFUNCDRowChangeEvent(((CSFUNCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CSFUNCDRowChanging != null)) {
                    this.CSFUNCDRowChanging(this, new CSFUNCDRowChangeEvent(((CSFUNCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CSFUNCDRowDeleted != null)) {
                    this.CSFUNCDRowDeleted(this, new CSFUNCDRowChangeEvent(((CSFUNCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CSFUNCDRowDeleting != null)) {
                    this.CSFUNCDRowDeleting(this, new CSFUNCDRowChangeEvent(((CSFUNCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCSFUNCDRow(CSFUNCDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CSFUNCDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CULTAFFDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columncultaffl;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CULTAFFDDataTable() {
                this.TableName = "CULTAFFD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CULTAFFDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CULTAFFDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cultafflColumn {
                get {
                    return this.columncultaffl;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CULTAFFDRow this[int index] {
                get {
                    return ((CULTAFFDRow)(this.Rows[index]));
                }
            }
            
            public event CULTAFFDRowChangeEventHandler CULTAFFDRowChanging;
            
            public event CULTAFFDRowChangeEventHandler CULTAFFDRowChanged;
            
            public event CULTAFFDRowChangeEventHandler CULTAFFDRowDeleting;
            
            public event CULTAFFDRowChangeEventHandler CULTAFFDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCULTAFFDRow(CULTAFFDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CULTAFFDRow AddCULTAFFDRow(PROPMAINRow parentPROPMAINRowByFK_CULTAFFD_PROPMAIN, string cultaffl) {
                CULTAFFDRow rowCULTAFFDRow = ((CULTAFFDRow)(this.NewRow()));
                rowCULTAFFDRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_CULTAFFD_PROPMAIN[0],
                        cultaffl};
                this.Rows.Add(rowCULTAFFDRow);
                return rowCULTAFFDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CULTAFFDRow FindByrefnumcultaffl(int refnum, string cultaffl) {
                return ((CULTAFFDRow)(this.Rows.Find(new object[] {
                            refnum,
                            cultaffl})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CULTAFFDDataTable cln = ((CULTAFFDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CULTAFFDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columncultaffl = base.Columns["cultaffl"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columncultaffl = new System.Data.DataColumn("cultaffl", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncultaffl);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columncultaffl}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columncultaffl.AllowDBNull = false;
                this.columncultaffl.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CULTAFFDRow NewCULTAFFDRow() {
                return ((CULTAFFDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CULTAFFDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CULTAFFDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CULTAFFDRowChanged != null)) {
                    this.CULTAFFDRowChanged(this, new CULTAFFDRowChangeEvent(((CULTAFFDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CULTAFFDRowChanging != null)) {
                    this.CULTAFFDRowChanging(this, new CULTAFFDRowChangeEvent(((CULTAFFDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CULTAFFDRowDeleted != null)) {
                    this.CULTAFFDRowDeleted(this, new CULTAFFDRowChangeEvent(((CULTAFFDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CULTAFFDRowDeleting != null)) {
                    this.CULTAFFDRowDeleting(this, new CULTAFFDRowChangeEvent(((CULTAFFDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCULTAFFDRow(CULTAFFDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CULTAFFDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FEDAGDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columnfedagcd;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEDAGDDataTable() {
                this.TableName = "FEDAGD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FEDAGDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FEDAGDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn fedagcdColumn {
                get {
                    return this.columnfedagcd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEDAGDRow this[int index] {
                get {
                    return ((FEDAGDRow)(this.Rows[index]));
                }
            }
            
            public event FEDAGDRowChangeEventHandler FEDAGDRowChanging;
            
            public event FEDAGDRowChangeEventHandler FEDAGDRowChanged;
            
            public event FEDAGDRowChangeEventHandler FEDAGDRowDeleting;
            
            public event FEDAGDRowChangeEventHandler FEDAGDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFEDAGDRow(FEDAGDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEDAGDRow AddFEDAGDRow(PROPMAINRow parentPROPMAINRowByFK_FEDAGD_PROPMAIN, FEDAGMRow parentFEDAGMRowByFK_FEDAGD_FEDAGM) {
                FEDAGDRow rowFEDAGDRow = ((FEDAGDRow)(this.NewRow()));
                rowFEDAGDRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_FEDAGD_PROPMAIN[0],
                        parentFEDAGMRowByFK_FEDAGD_FEDAGM[0]};
                this.Rows.Add(rowFEDAGDRow);
                return rowFEDAGDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEDAGDRow FindByrefnumfedagcd(int refnum, string fedagcd) {
                return ((FEDAGDRow)(this.Rows.Find(new object[] {
                            refnum,
                            fedagcd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FEDAGDDataTable cln = ((FEDAGDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FEDAGDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columnfedagcd = base.Columns["fedagcd"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columnfedagcd = new System.Data.DataColumn("fedagcd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfedagcd);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columnfedagcd}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columnfedagcd.AllowDBNull = false;
                this.columnfedagcd.MaxLength = 8;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEDAGDRow NewFEDAGDRow() {
                return ((FEDAGDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FEDAGDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FEDAGDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FEDAGDRowChanged != null)) {
                    this.FEDAGDRowChanged(this, new FEDAGDRowChangeEvent(((FEDAGDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FEDAGDRowChanging != null)) {
                    this.FEDAGDRowChanging(this, new FEDAGDRowChangeEvent(((FEDAGDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FEDAGDRowDeleted != null)) {
                    this.FEDAGDRowDeleted(this, new FEDAGDRowChangeEvent(((FEDAGDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FEDAGDRowDeleting != null)) {
                    this.FEDAGDRowDeleting(this, new FEDAGDRowChangeEvent(((FEDAGDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFEDAGDRow(FEDAGDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FEDAGDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FEDAGMDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnfedagcd;
            
            private System.Data.DataColumn columnfedag;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEDAGMDataTable() {
                this.TableName = "FEDAGM";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FEDAGMDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FEDAGMDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn fedagcdColumn {
                get {
                    return this.columnfedagcd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn fedagColumn {
                get {
                    return this.columnfedag;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEDAGMRow this[int index] {
                get {
                    return ((FEDAGMRow)(this.Rows[index]));
                }
            }
            
            public event FEDAGMRowChangeEventHandler FEDAGMRowChanging;
            
            public event FEDAGMRowChangeEventHandler FEDAGMRowChanged;
            
            public event FEDAGMRowChangeEventHandler FEDAGMRowDeleting;
            
            public event FEDAGMRowChangeEventHandler FEDAGMRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFEDAGMRow(FEDAGMRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEDAGMRow AddFEDAGMRow(string fedagcd, string fedag) {
                FEDAGMRow rowFEDAGMRow = ((FEDAGMRow)(this.NewRow()));
                rowFEDAGMRow.ItemArray = new object[] {
                        fedagcd,
                        fedag};
                this.Rows.Add(rowFEDAGMRow);
                return rowFEDAGMRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEDAGMRow FindByfedagcd(string fedagcd) {
                return ((FEDAGMRow)(this.Rows.Find(new object[] {
                            fedagcd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FEDAGMDataTable cln = ((FEDAGMDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FEDAGMDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnfedagcd = base.Columns["fedagcd"];
                this.columnfedag = base.Columns["fedag"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnfedagcd = new System.Data.DataColumn("fedagcd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfedagcd);
                this.columnfedag = new System.Data.DataColumn("fedag", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfedag);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnfedagcd}, true));
                this.columnfedagcd.AllowDBNull = false;
                this.columnfedagcd.Unique = true;
                this.columnfedagcd.MaxLength = 8;
                this.columnfedag.AllowDBNull = false;
                this.columnfedag.MaxLength = 200;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEDAGMRow NewFEDAGMRow() {
                return ((FEDAGMRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FEDAGMRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FEDAGMRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FEDAGMRowChanged != null)) {
                    this.FEDAGMRowChanged(this, new FEDAGMRowChangeEvent(((FEDAGMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FEDAGMRowChanging != null)) {
                    this.FEDAGMRowChanging(this, new FEDAGMRowChangeEvent(((FEDAGMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FEDAGMRowDeleted != null)) {
                    this.FEDAGMRowDeleted(this, new FEDAGMRowChangeEvent(((FEDAGMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FEDAGMRowDeleting != null)) {
                    this.FEDAGMRowDeleting(this, new FEDAGMRowChangeEvent(((FEDAGMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFEDAGMRow(FEDAGMRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FEDAGMDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FUNCMDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnfunccd;
            
            private System.Data.DataColumn columnfunc;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FUNCMDataTable() {
                this.TableName = "FUNCM";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FUNCMDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FUNCMDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn funccdColumn {
                get {
                    return this.columnfunccd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn funcColumn {
                get {
                    return this.columnfunc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FUNCMRow this[int index] {
                get {
                    return ((FUNCMRow)(this.Rows[index]));
                }
            }
            
            public event FUNCMRowChangeEventHandler FUNCMRowChanging;
            
            public event FUNCMRowChangeEventHandler FUNCMRowChanged;
            
            public event FUNCMRowChangeEventHandler FUNCMRowDeleting;
            
            public event FUNCMRowChangeEventHandler FUNCMRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFUNCMRow(FUNCMRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FUNCMRow AddFUNCMRow(string funccd, string func) {
                FUNCMRow rowFUNCMRow = ((FUNCMRow)(this.NewRow()));
                rowFUNCMRow.ItemArray = new object[] {
                        funccd,
                        func};
                this.Rows.Add(rowFUNCMRow);
                return rowFUNCMRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FUNCMRow FindByfunccd(string funccd) {
                return ((FUNCMRow)(this.Rows.Find(new object[] {
                            funccd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FUNCMDataTable cln = ((FUNCMDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FUNCMDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnfunccd = base.Columns["funccd"];
                this.columnfunc = base.Columns["func"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnfunccd = new System.Data.DataColumn("funccd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfunccd);
                this.columnfunc = new System.Data.DataColumn("func", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfunc);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnfunccd}, true));
                this.columnfunccd.AllowDBNull = false;
                this.columnfunccd.Unique = true;
                this.columnfunccd.MaxLength = 3;
                this.columnfunc.AllowDBNull = false;
                this.columnfunc.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FUNCMRow NewFUNCMRow() {
                return ((FUNCMRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FUNCMRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FUNCMRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FUNCMRowChanged != null)) {
                    this.FUNCMRowChanged(this, new FUNCMRowChangeEvent(((FUNCMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FUNCMRowChanging != null)) {
                    this.FUNCMRowChanging(this, new FUNCMRowChangeEvent(((FUNCMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FUNCMRowDeleted != null)) {
                    this.FUNCMRowDeleted(this, new FUNCMRowChangeEvent(((FUNCMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FUNCMRowDeleting != null)) {
                    this.FUNCMRowDeleting(this, new FUNCMRowChangeEvent(((FUNCMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFUNCMRow(FUNCMRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FUNCMDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HFUNCDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columnhfunccd;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HFUNCDDataTable() {
                this.TableName = "HFUNCD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HFUNCDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HFUNCDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn hfunccdColumn {
                get {
                    return this.columnhfunccd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HFUNCDRow this[int index] {
                get {
                    return ((HFUNCDRow)(this.Rows[index]));
                }
            }
            
            public event HFUNCDRowChangeEventHandler HFUNCDRowChanging;
            
            public event HFUNCDRowChangeEventHandler HFUNCDRowChanged;
            
            public event HFUNCDRowChangeEventHandler HFUNCDRowDeleting;
            
            public event HFUNCDRowChangeEventHandler HFUNCDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHFUNCDRow(HFUNCDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HFUNCDRow AddHFUNCDRow(PROPMAINRow parentPROPMAINRowByFK_HFUNCD_PROPMAIN, FUNCMRow parentFUNCMRowByFK_HFUNCD_FUNCM) {
                HFUNCDRow rowHFUNCDRow = ((HFUNCDRow)(this.NewRow()));
                rowHFUNCDRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_HFUNCD_PROPMAIN[0],
                        parentFUNCMRowByFK_HFUNCD_FUNCM[0]};
                this.Rows.Add(rowHFUNCDRow);
                return rowHFUNCDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HFUNCDRow FindByrefnumhfunccd(int refnum, string hfunccd) {
                return ((HFUNCDRow)(this.Rows.Find(new object[] {
                            refnum,
                            hfunccd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                HFUNCDDataTable cln = ((HFUNCDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new HFUNCDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columnhfunccd = base.Columns["hfunccd"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columnhfunccd = new System.Data.DataColumn("hfunccd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnhfunccd);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columnhfunccd}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columnhfunccd.AllowDBNull = false;
                this.columnhfunccd.MaxLength = 3;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HFUNCDRow NewHFUNCDRow() {
                return ((HFUNCDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new HFUNCDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(HFUNCDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HFUNCDRowChanged != null)) {
                    this.HFUNCDRowChanged(this, new HFUNCDRowChangeEvent(((HFUNCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HFUNCDRowChanging != null)) {
                    this.HFUNCDRowChanging(this, new HFUNCDRowChangeEvent(((HFUNCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HFUNCDRowDeleted != null)) {
                    this.HFUNCDRowDeleted(this, new HFUNCDRowChangeEvent(((HFUNCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HFUNCDRowDeleting != null)) {
                    this.HFUNCDRowDeleting(this, new HFUNCDRowChangeEvent(((HFUNCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHFUNCDRow(HFUNCDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HFUNCDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HSFUNCDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columnhsfunccd;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HSFUNCDDataTable() {
                this.TableName = "HSFUNCD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HSFUNCDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HSFUNCDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn hsfunccdColumn {
                get {
                    return this.columnhsfunccd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HSFUNCDRow this[int index] {
                get {
                    return ((HSFUNCDRow)(this.Rows[index]));
                }
            }
            
            public event HSFUNCDRowChangeEventHandler HSFUNCDRowChanging;
            
            public event HSFUNCDRowChangeEventHandler HSFUNCDRowChanged;
            
            public event HSFUNCDRowChangeEventHandler HSFUNCDRowDeleting;
            
            public event HSFUNCDRowChangeEventHandler HSFUNCDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHSFUNCDRow(HSFUNCDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HSFUNCDRow AddHSFUNCDRow(PROPMAINRow parentPROPMAINRowByFK_HSFUNCD_PROPMAIN, FUNCMRow parentFUNCMRowByFK_HSFUNCD_FUNCM) {
                HSFUNCDRow rowHSFUNCDRow = ((HSFUNCDRow)(this.NewRow()));
                rowHSFUNCDRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_HSFUNCD_PROPMAIN[0],
                        parentFUNCMRowByFK_HSFUNCD_FUNCM[0]};
                this.Rows.Add(rowHSFUNCDRow);
                return rowHSFUNCDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HSFUNCDRow FindByrefnumhsfunccd(int refnum, string hsfunccd) {
                return ((HSFUNCDRow)(this.Rows.Find(new object[] {
                            refnum,
                            hsfunccd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                HSFUNCDDataTable cln = ((HSFUNCDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new HSFUNCDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columnhsfunccd = base.Columns["hsfunccd"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columnhsfunccd = new System.Data.DataColumn("hsfunccd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnhsfunccd);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columnhsfunccd}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columnhsfunccd.AllowDBNull = false;
                this.columnhsfunccd.MaxLength = 3;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HSFUNCDRow NewHSFUNCDRow() {
                return ((HSFUNCDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new HSFUNCDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(HSFUNCDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HSFUNCDRowChanged != null)) {
                    this.HSFUNCDRowChanged(this, new HSFUNCDRowChangeEvent(((HSFUNCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HSFUNCDRowChanging != null)) {
                    this.HSFUNCDRowChanging(this, new HSFUNCDRowChangeEvent(((HSFUNCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HSFUNCDRowDeleted != null)) {
                    this.HSFUNCDRowDeleted(this, new HSFUNCDRowChangeEvent(((HSFUNCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HSFUNCDRowDeleting != null)) {
                    this.HSFUNCDRowDeleting(this, new HSFUNCDRowChangeEvent(((HSFUNCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHSFUNCDRow(HSFUNCDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HSFUNCDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LEVSGDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columnlevsgcd;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LEVSGDDataTable() {
                this.TableName = "LEVSGD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LEVSGDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LEVSGDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn levsgcdColumn {
                get {
                    return this.columnlevsgcd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LEVSGDRow this[int index] {
                get {
                    return ((LEVSGDRow)(this.Rows[index]));
                }
            }
            
            public event LEVSGDRowChangeEventHandler LEVSGDRowChanging;
            
            public event LEVSGDRowChangeEventHandler LEVSGDRowChanged;
            
            public event LEVSGDRowChangeEventHandler LEVSGDRowDeleting;
            
            public event LEVSGDRowChangeEventHandler LEVSGDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLEVSGDRow(LEVSGDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LEVSGDRow AddLEVSGDRow(PROPMAINRow parentPROPMAINRowByFK_LEVSGD_PROPMAIN, LEVSGMRow parentLEVSGMRowByFK_LEVSGD_LEVSGM) {
                LEVSGDRow rowLEVSGDRow = ((LEVSGDRow)(this.NewRow()));
                rowLEVSGDRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_LEVSGD_PROPMAIN[0],
                        parentLEVSGMRowByFK_LEVSGD_LEVSGM[0]};
                this.Rows.Add(rowLEVSGDRow);
                return rowLEVSGDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LEVSGDRow FindByrefnumlevsgcd(int refnum, string levsgcd) {
                return ((LEVSGDRow)(this.Rows.Find(new object[] {
                            refnum,
                            levsgcd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LEVSGDDataTable cln = ((LEVSGDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LEVSGDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columnlevsgcd = base.Columns["levsgcd"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columnlevsgcd = new System.Data.DataColumn("levsgcd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlevsgcd);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columnlevsgcd}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columnlevsgcd.AllowDBNull = false;
                this.columnlevsgcd.MaxLength = 2;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LEVSGDRow NewLEVSGDRow() {
                return ((LEVSGDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LEVSGDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LEVSGDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LEVSGDRowChanged != null)) {
                    this.LEVSGDRowChanged(this, new LEVSGDRowChangeEvent(((LEVSGDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LEVSGDRowChanging != null)) {
                    this.LEVSGDRowChanging(this, new LEVSGDRowChangeEvent(((LEVSGDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LEVSGDRowDeleted != null)) {
                    this.LEVSGDRowDeleted(this, new LEVSGDRowChangeEvent(((LEVSGDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LEVSGDRowDeleting != null)) {
                    this.LEVSGDRowDeleting(this, new LEVSGDRowChangeEvent(((LEVSGDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLEVSGDRow(LEVSGDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LEVSGDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LEVSGMDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlevsgcd;
            
            private System.Data.DataColumn columnlevsg;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LEVSGMDataTable() {
                this.TableName = "LEVSGM";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LEVSGMDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LEVSGMDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn levsgcdColumn {
                get {
                    return this.columnlevsgcd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn levsgColumn {
                get {
                    return this.columnlevsg;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LEVSGMRow this[int index] {
                get {
                    return ((LEVSGMRow)(this.Rows[index]));
                }
            }
            
            public event LEVSGMRowChangeEventHandler LEVSGMRowChanging;
            
            public event LEVSGMRowChangeEventHandler LEVSGMRowChanged;
            
            public event LEVSGMRowChangeEventHandler LEVSGMRowDeleting;
            
            public event LEVSGMRowChangeEventHandler LEVSGMRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLEVSGMRow(LEVSGMRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LEVSGMRow AddLEVSGMRow(string levsgcd, string levsg) {
                LEVSGMRow rowLEVSGMRow = ((LEVSGMRow)(this.NewRow()));
                rowLEVSGMRow.ItemArray = new object[] {
                        levsgcd,
                        levsg};
                this.Rows.Add(rowLEVSGMRow);
                return rowLEVSGMRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LEVSGMRow FindBylevsgcd(string levsgcd) {
                return ((LEVSGMRow)(this.Rows.Find(new object[] {
                            levsgcd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LEVSGMDataTable cln = ((LEVSGMDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LEVSGMDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlevsgcd = base.Columns["levsgcd"];
                this.columnlevsg = base.Columns["levsg"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlevsgcd = new System.Data.DataColumn("levsgcd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlevsgcd);
                this.columnlevsg = new System.Data.DataColumn("levsg", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlevsg);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnlevsgcd}, true));
                this.columnlevsgcd.AllowDBNull = false;
                this.columnlevsgcd.Unique = true;
                this.columnlevsgcd.MaxLength = 2;
                this.columnlevsg.AllowDBNull = false;
                this.columnlevsg.MaxLength = 200;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LEVSGMRow NewLEVSGMRow() {
                return ((LEVSGMRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LEVSGMRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LEVSGMRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LEVSGMRowChanged != null)) {
                    this.LEVSGMRowChanged(this, new LEVSGMRowChangeEvent(((LEVSGMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LEVSGMRowChanging != null)) {
                    this.LEVSGMRowChanging(this, new LEVSGMRowChangeEvent(((LEVSGMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LEVSGMRowDeleted != null)) {
                    this.LEVSGMRowDeleted(this, new LEVSGMRowChangeEvent(((LEVSGMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LEVSGMRowDeleting != null)) {
                    this.LEVSGMRowDeleting(this, new LEVSGMRowChangeEvent(((LEVSGMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLEVSGMRow(LEVSGMRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LEVSGMDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MATDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columnmatcd;
            
            private System.Data.DataColumn columnmatypecd;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATDDataTable() {
                this.TableName = "MATD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MATDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MATDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn matcdColumn {
                get {
                    return this.columnmatcd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn matypecdColumn {
                get {
                    return this.columnmatypecd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATDRow this[int index] {
                get {
                    return ((MATDRow)(this.Rows[index]));
                }
            }
            
            public event MATDRowChangeEventHandler MATDRowChanging;
            
            public event MATDRowChangeEventHandler MATDRowChanged;
            
            public event MATDRowChangeEventHandler MATDRowDeleting;
            
            public event MATDRowChangeEventHandler MATDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMATDRow(MATDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATDRow AddMATDRow(PROPMAINRow parentPROPMAINRowByFK_MATD_PROPMAIN, MATMRow parentMATMRowByFK_MATD_MATM, string matypecd) {
                MATDRow rowMATDRow = ((MATDRow)(this.NewRow()));
                rowMATDRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_MATD_PROPMAIN[0],
                        parentMATMRowByFK_MATD_MATM[0],
                        matypecd};
                this.Rows.Add(rowMATDRow);
                return rowMATDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATDRow FindByrefnummatcdmatypecd(int refnum, int matcd, string matypecd) {
                return ((MATDRow)(this.Rows.Find(new object[] {
                            refnum,
                            matcd,
                            matypecd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MATDDataTable cln = ((MATDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MATDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columnmatcd = base.Columns["matcd"];
                this.columnmatypecd = base.Columns["matypecd"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columnmatcd = new System.Data.DataColumn("matcd", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmatcd);
                this.columnmatypecd = new System.Data.DataColumn("matypecd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmatypecd);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columnmatcd,
                                this.columnmatypecd}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columnmatcd.AllowDBNull = false;
                this.columnmatypecd.AllowDBNull = false;
                this.columnmatypecd.MaxLength = 4;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATDRow NewMATDRow() {
                return ((MATDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MATDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MATDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MATDRowChanged != null)) {
                    this.MATDRowChanged(this, new MATDRowChangeEvent(((MATDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MATDRowChanging != null)) {
                    this.MATDRowChanging(this, new MATDRowChangeEvent(((MATDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MATDRowDeleted != null)) {
                    this.MATDRowDeleted(this, new MATDRowChangeEvent(((MATDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MATDRowDeleting != null)) {
                    this.MATDRowDeleting(this, new MATDRowChangeEvent(((MATDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMATDRow(MATDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MATDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MATMDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnmatcd;
            
            private System.Data.DataColumn columnmat;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATMDataTable() {
                this.TableName = "MATM";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MATMDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MATMDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn matcdColumn {
                get {
                    return this.columnmatcd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn matColumn {
                get {
                    return this.columnmat;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATMRow this[int index] {
                get {
                    return ((MATMRow)(this.Rows[index]));
                }
            }
            
            public event MATMRowChangeEventHandler MATMRowChanging;
            
            public event MATMRowChangeEventHandler MATMRowChanged;
            
            public event MATMRowChangeEventHandler MATMRowDeleting;
            
            public event MATMRowChangeEventHandler MATMRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMATMRow(MATMRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATMRow AddMATMRow(int matcd, string mat) {
                MATMRow rowMATMRow = ((MATMRow)(this.NewRow()));
                rowMATMRow.ItemArray = new object[] {
                        matcd,
                        mat};
                this.Rows.Add(rowMATMRow);
                return rowMATMRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATMRow FindBymatcd(int matcd) {
                return ((MATMRow)(this.Rows.Find(new object[] {
                            matcd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MATMDataTable cln = ((MATMDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MATMDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmatcd = base.Columns["matcd"];
                this.columnmat = base.Columns["mat"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmatcd = new System.Data.DataColumn("matcd", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmatcd);
                this.columnmat = new System.Data.DataColumn("mat", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmat);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnmatcd}, true));
                this.columnmatcd.AllowDBNull = false;
                this.columnmatcd.Unique = true;
                this.columnmat.AllowDBNull = false;
                this.columnmat.MaxLength = 150;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATMRow NewMATMRow() {
                return ((MATMRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MATMRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MATMRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MATMRowChanged != null)) {
                    this.MATMRowChanged(this, new MATMRowChangeEvent(((MATMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MATMRowChanging != null)) {
                    this.MATMRowChanging(this, new MATMRowChangeEvent(((MATMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MATMRowDeleted != null)) {
                    this.MATMRowDeleted(this, new MATMRowChangeEvent(((MATMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MATMRowDeleting != null)) {
                    this.MATMRowDeleting(this, new MATMRowChangeEvent(((MATMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMATMRow(MATMRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MATMDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NOMNADDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columnnomnacd;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNADDataTable() {
                this.TableName = "NOMNAD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NOMNADDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NOMNADDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nomnacdColumn {
                get {
                    return this.columnnomnacd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNADRow this[int index] {
                get {
                    return ((NOMNADRow)(this.Rows[index]));
                }
            }
            
            public event NOMNADRowChangeEventHandler NOMNADRowChanging;
            
            public event NOMNADRowChangeEventHandler NOMNADRowChanged;
            
            public event NOMNADRowChangeEventHandler NOMNADRowDeleting;
            
            public event NOMNADRowChangeEventHandler NOMNADRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNOMNADRow(NOMNADRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNADRow AddNOMNADRow(PROPMAINRow parentPROPMAINRowByFK_NOMNAD_PROPMAIN, NOMNAMRow parentNOMNAMRowByFK_NOMNAD_NOMNAM) {
                NOMNADRow rowNOMNADRow = ((NOMNADRow)(this.NewRow()));
                rowNOMNADRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_NOMNAD_PROPMAIN[0],
                        parentNOMNAMRowByFK_NOMNAD_NOMNAM[0]};
                this.Rows.Add(rowNOMNADRow);
                return rowNOMNADRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNADRow FindByrefnumnomnacd(int refnum, string nomnacd) {
                return ((NOMNADRow)(this.Rows.Find(new object[] {
                            refnum,
                            nomnacd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                NOMNADDataTable cln = ((NOMNADDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new NOMNADDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columnnomnacd = base.Columns["nomnacd"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columnnomnacd = new System.Data.DataColumn("nomnacd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnomnacd);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columnnomnacd}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columnnomnacd.AllowDBNull = false;
                this.columnnomnacd.MaxLength = 2;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNADRow NewNOMNADRow() {
                return ((NOMNADRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new NOMNADRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(NOMNADRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NOMNADRowChanged != null)) {
                    this.NOMNADRowChanged(this, new NOMNADRowChangeEvent(((NOMNADRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NOMNADRowChanging != null)) {
                    this.NOMNADRowChanging(this, new NOMNADRowChangeEvent(((NOMNADRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NOMNADRowDeleted != null)) {
                    this.NOMNADRowDeleted(this, new NOMNADRowChangeEvent(((NOMNADRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NOMNADRowDeleting != null)) {
                    this.NOMNADRowDeleting(this, new NOMNADRowChangeEvent(((NOMNADRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNOMNADRow(NOMNADRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NOMNADDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NOMNAMDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnnomnacd;
            
            private System.Data.DataColumn columnnomna;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNAMDataTable() {
                this.TableName = "NOMNAM";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NOMNAMDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NOMNAMDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nomnacdColumn {
                get {
                    return this.columnnomnacd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nomnaColumn {
                get {
                    return this.columnnomna;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNAMRow this[int index] {
                get {
                    return ((NOMNAMRow)(this.Rows[index]));
                }
            }
            
            public event NOMNAMRowChangeEventHandler NOMNAMRowChanging;
            
            public event NOMNAMRowChangeEventHandler NOMNAMRowChanged;
            
            public event NOMNAMRowChangeEventHandler NOMNAMRowDeleting;
            
            public event NOMNAMRowChangeEventHandler NOMNAMRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNOMNAMRow(NOMNAMRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNAMRow AddNOMNAMRow(string nomnacd, string nomna) {
                NOMNAMRow rowNOMNAMRow = ((NOMNAMRow)(this.NewRow()));
                rowNOMNAMRow.ItemArray = new object[] {
                        nomnacd,
                        nomna};
                this.Rows.Add(rowNOMNAMRow);
                return rowNOMNAMRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNAMRow FindBynomnacd(string nomnacd) {
                return ((NOMNAMRow)(this.Rows.Find(new object[] {
                            nomnacd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                NOMNAMDataTable cln = ((NOMNAMDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new NOMNAMDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnnomnacd = base.Columns["nomnacd"];
                this.columnnomna = base.Columns["nomna"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnnomnacd = new System.Data.DataColumn("nomnacd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnomnacd);
                this.columnnomna = new System.Data.DataColumn("nomna", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnomna);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnnomnacd}, true));
                this.columnnomnacd.AllowDBNull = false;
                this.columnnomnacd.Unique = true;
                this.columnnomnacd.MaxLength = 2;
                this.columnnomna.AllowDBNull = false;
                this.columnnomna.MaxLength = 200;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNAMRow NewNOMNAMRow() {
                return ((NOMNAMRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new NOMNAMRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(NOMNAMRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NOMNAMRowChanged != null)) {
                    this.NOMNAMRowChanged(this, new NOMNAMRowChangeEvent(((NOMNAMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NOMNAMRowChanging != null)) {
                    this.NOMNAMRowChanging(this, new NOMNAMRowChangeEvent(((NOMNAMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NOMNAMRowDeleted != null)) {
                    this.NOMNAMRowDeleted(this, new NOMNAMRowChangeEvent(((NOMNAMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NOMNAMRowDeleting != null)) {
                    this.NOMNAMRowDeleting(this, new NOMNAMRowChangeEvent(((NOMNAMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNOMNAMRow(NOMNAMRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NOMNAMDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NOMNAMEDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columnnomname;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNAMEDDataTable() {
                this.TableName = "NOMNAMED";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NOMNAMEDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NOMNAMEDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nomnameColumn {
                get {
                    return this.columnnomname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNAMEDRow this[int index] {
                get {
                    return ((NOMNAMEDRow)(this.Rows[index]));
                }
            }
            
            public event NOMNAMEDRowChangeEventHandler NOMNAMEDRowChanging;
            
            public event NOMNAMEDRowChangeEventHandler NOMNAMEDRowChanged;
            
            public event NOMNAMEDRowChangeEventHandler NOMNAMEDRowDeleting;
            
            public event NOMNAMEDRowChangeEventHandler NOMNAMEDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNOMNAMEDRow(NOMNAMEDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNAMEDRow AddNOMNAMEDRow(PROPMAINRow parentPROPMAINRowByFK_NOMNAMED_PROPMAIN, string nomname) {
                NOMNAMEDRow rowNOMNAMEDRow = ((NOMNAMEDRow)(this.NewRow()));
                rowNOMNAMEDRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_NOMNAMED_PROPMAIN[0],
                        nomname};
                this.Rows.Add(rowNOMNAMEDRow);
                return rowNOMNAMEDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNAMEDRow FindByrefnumnomname(int refnum, string nomname) {
                return ((NOMNAMEDRow)(this.Rows.Find(new object[] {
                            refnum,
                            nomname})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                NOMNAMEDDataTable cln = ((NOMNAMEDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new NOMNAMEDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columnnomname = base.Columns["nomname"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columnnomname = new System.Data.DataColumn("nomname", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnomname);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columnnomname}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columnnomname.AllowDBNull = false;
                this.columnnomname.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNAMEDRow NewNOMNAMEDRow() {
                return ((NOMNAMEDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new NOMNAMEDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(NOMNAMEDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NOMNAMEDRowChanged != null)) {
                    this.NOMNAMEDRowChanged(this, new NOMNAMEDRowChangeEvent(((NOMNAMEDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NOMNAMEDRowChanging != null)) {
                    this.NOMNAMEDRowChanging(this, new NOMNAMEDRowChangeEvent(((NOMNAMEDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NOMNAMEDRowDeleted != null)) {
                    this.NOMNAMEDRowDeleted(this, new NOMNAMEDRowChangeEvent(((NOMNAMEDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NOMNAMEDRowDeleting != null)) {
                    this.NOMNAMEDRowDeleting(this, new NOMNAMEDRowChangeEvent(((NOMNAMEDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNOMNAMEDRow(NOMNAMEDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NOMNAMEDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OSTATEDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columnstatecd;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OSTATEDDataTable() {
                this.TableName = "OSTATED";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OSTATEDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OSTATEDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn statecdColumn {
                get {
                    return this.columnstatecd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OSTATEDRow this[int index] {
                get {
                    return ((OSTATEDRow)(this.Rows[index]));
                }
            }
            
            public event OSTATEDRowChangeEventHandler OSTATEDRowChanging;
            
            public event OSTATEDRowChangeEventHandler OSTATEDRowChanged;
            
            public event OSTATEDRowChangeEventHandler OSTATEDRowDeleting;
            
            public event OSTATEDRowChangeEventHandler OSTATEDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOSTATEDRow(OSTATEDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OSTATEDRow AddOSTATEDRow(PROPMAINRow parentPROPMAINRowByFK_OSTATED_PROPMAIN, STATEMRow parentSTATEMRowByFK_OSTATED_STATEM) {
                OSTATEDRow rowOSTATEDRow = ((OSTATEDRow)(this.NewRow()));
                rowOSTATEDRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_OSTATED_PROPMAIN[0],
                        parentSTATEMRowByFK_OSTATED_STATEM[0]};
                this.Rows.Add(rowOSTATEDRow);
                return rowOSTATEDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OSTATEDRow FindByrefnumstatecd(int refnum, string statecd) {
                return ((OSTATEDRow)(this.Rows.Find(new object[] {
                            refnum,
                            statecd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OSTATEDDataTable cln = ((OSTATEDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OSTATEDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columnstatecd = base.Columns["statecd"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columnstatecd = new System.Data.DataColumn("statecd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatecd);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columnstatecd}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columnstatecd.AllowDBNull = false;
                this.columnstatecd.MaxLength = 2;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OSTATEDRow NewOSTATEDRow() {
                return ((OSTATEDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OSTATEDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OSTATEDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OSTATEDRowChanged != null)) {
                    this.OSTATEDRowChanged(this, new OSTATEDRowChangeEvent(((OSTATEDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OSTATEDRowChanging != null)) {
                    this.OSTATEDRowChanging(this, new OSTATEDRowChangeEvent(((OSTATEDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OSTATEDRowDeleted != null)) {
                    this.OSTATEDRowDeleted(this, new OSTATEDRowChangeEvent(((OSTATEDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OSTATEDRowDeleting != null)) {
                    this.OSTATEDRowDeleting(this, new OSTATEDRowChangeEvent(((OSTATEDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOSTATEDRow(OSTATEDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OSTATEDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OTHCERTDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columnocertcd;
            
            private System.Data.DataColumn columnocertdte;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHCERTDDataTable() {
                this.TableName = "OTHCERTD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OTHCERTDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OTHCERTDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ocertcdColumn {
                get {
                    return this.columnocertcd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ocertdteColumn {
                get {
                    return this.columnocertdte;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHCERTDRow this[int index] {
                get {
                    return ((OTHCERTDRow)(this.Rows[index]));
                }
            }
            
            public event OTHCERTDRowChangeEventHandler OTHCERTDRowChanging;
            
            public event OTHCERTDRowChangeEventHandler OTHCERTDRowChanged;
            
            public event OTHCERTDRowChangeEventHandler OTHCERTDRowDeleting;
            
            public event OTHCERTDRowChangeEventHandler OTHCERTDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOTHCERTDRow(OTHCERTDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHCERTDRow AddOTHCERTDRow(PROPMAINRow parentPROPMAINRowByFK_OTHCERTD_PROPMAIN, CERTMRow parentCERTMRowByFK_OTHCERTD_CERTM, System.DateTime ocertdte) {
                OTHCERTDRow rowOTHCERTDRow = ((OTHCERTDRow)(this.NewRow()));
                rowOTHCERTDRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_OTHCERTD_PROPMAIN[0],
                        parentCERTMRowByFK_OTHCERTD_CERTM[0],
                        ocertdte};
                this.Rows.Add(rowOTHCERTDRow);
                return rowOTHCERTDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHCERTDRow FindByrefnumocertcdocertdte(int refnum, string ocertcd, System.DateTime ocertdte) {
                return ((OTHCERTDRow)(this.Rows.Find(new object[] {
                            refnum,
                            ocertcd,
                            ocertdte})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OTHCERTDDataTable cln = ((OTHCERTDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OTHCERTDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columnocertcd = base.Columns["ocertcd"];
                this.columnocertdte = base.Columns["ocertdte"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columnocertcd = new System.Data.DataColumn("ocertcd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnocertcd);
                this.columnocertdte = new System.Data.DataColumn("ocertdte", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnocertdte);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columnocertcd,
                                this.columnocertdte}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columnocertcd.AllowDBNull = false;
                this.columnocertcd.MaxLength = 2;
                this.columnocertdte.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHCERTDRow NewOTHCERTDRow() {
                return ((OTHCERTDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OTHCERTDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OTHCERTDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OTHCERTDRowChanged != null)) {
                    this.OTHCERTDRowChanged(this, new OTHCERTDRowChangeEvent(((OTHCERTDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OTHCERTDRowChanging != null)) {
                    this.OTHCERTDRowChanging(this, new OTHCERTDRowChangeEvent(((OTHCERTDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OTHCERTDRowDeleted != null)) {
                    this.OTHCERTDRowDeleted(this, new OTHCERTDRowChangeEvent(((OTHCERTDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OTHCERTDRowDeleting != null)) {
                    this.OTHCERTDRowDeleting(this, new OTHCERTDRowChangeEvent(((OTHCERTDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOTHCERTDRow(OTHCERTDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OTHCERTDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OTHDOCDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columnothdoccd;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHDOCDDataTable() {
                this.TableName = "OTHDOCD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OTHDOCDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OTHDOCDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn othdoccdColumn {
                get {
                    return this.columnothdoccd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHDOCDRow this[int index] {
                get {
                    return ((OTHDOCDRow)(this.Rows[index]));
                }
            }
            
            public event OTHDOCDRowChangeEventHandler OTHDOCDRowChanging;
            
            public event OTHDOCDRowChangeEventHandler OTHDOCDRowChanged;
            
            public event OTHDOCDRowChangeEventHandler OTHDOCDRowDeleting;
            
            public event OTHDOCDRowChangeEventHandler OTHDOCDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOTHDOCDRow(OTHDOCDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHDOCDRow AddOTHDOCDRow(PROPMAINRow parentPROPMAINRowByFK_OTHDOCD_PROPMAIN, OTHDOCMRow parentOTHDOCMRowByFK_OTHDOCD_OTHDOCM) {
                OTHDOCDRow rowOTHDOCDRow = ((OTHDOCDRow)(this.NewRow()));
                rowOTHDOCDRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_OTHDOCD_PROPMAIN[0],
                        parentOTHDOCMRowByFK_OTHDOCD_OTHDOCM[0]};
                this.Rows.Add(rowOTHDOCDRow);
                return rowOTHDOCDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHDOCDRow FindByrefnumothdoccd(int refnum, string othdoccd) {
                return ((OTHDOCDRow)(this.Rows.Find(new object[] {
                            refnum,
                            othdoccd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OTHDOCDDataTable cln = ((OTHDOCDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OTHDOCDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columnothdoccd = base.Columns["othdoccd"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columnothdoccd = new System.Data.DataColumn("othdoccd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnothdoccd);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columnothdoccd}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columnothdoccd.AllowDBNull = false;
                this.columnothdoccd.MaxLength = 4;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHDOCDRow NewOTHDOCDRow() {
                return ((OTHDOCDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OTHDOCDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OTHDOCDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OTHDOCDRowChanged != null)) {
                    this.OTHDOCDRowChanged(this, new OTHDOCDRowChangeEvent(((OTHDOCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OTHDOCDRowChanging != null)) {
                    this.OTHDOCDRowChanging(this, new OTHDOCDRowChangeEvent(((OTHDOCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OTHDOCDRowDeleted != null)) {
                    this.OTHDOCDRowDeleted(this, new OTHDOCDRowChangeEvent(((OTHDOCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OTHDOCDRowDeleting != null)) {
                    this.OTHDOCDRowDeleting(this, new OTHDOCDRowChangeEvent(((OTHDOCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOTHDOCDRow(OTHDOCDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OTHDOCDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OTHDOCMDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnothdoccd;
            
            private System.Data.DataColumn columnothdoc;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHDOCMDataTable() {
                this.TableName = "OTHDOCM";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OTHDOCMDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OTHDOCMDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn othdoccdColumn {
                get {
                    return this.columnothdoccd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn othdocColumn {
                get {
                    return this.columnothdoc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHDOCMRow this[int index] {
                get {
                    return ((OTHDOCMRow)(this.Rows[index]));
                }
            }
            
            public event OTHDOCMRowChangeEventHandler OTHDOCMRowChanging;
            
            public event OTHDOCMRowChangeEventHandler OTHDOCMRowChanged;
            
            public event OTHDOCMRowChangeEventHandler OTHDOCMRowDeleting;
            
            public event OTHDOCMRowChangeEventHandler OTHDOCMRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOTHDOCMRow(OTHDOCMRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHDOCMRow AddOTHDOCMRow(string othdoccd, string othdoc) {
                OTHDOCMRow rowOTHDOCMRow = ((OTHDOCMRow)(this.NewRow()));
                rowOTHDOCMRow.ItemArray = new object[] {
                        othdoccd,
                        othdoc};
                this.Rows.Add(rowOTHDOCMRow);
                return rowOTHDOCMRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHDOCMRow FindByothdoccd(string othdoccd) {
                return ((OTHDOCMRow)(this.Rows.Find(new object[] {
                            othdoccd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OTHDOCMDataTable cln = ((OTHDOCMDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OTHDOCMDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnothdoccd = base.Columns["othdoccd"];
                this.columnothdoc = base.Columns["othdoc"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnothdoccd = new System.Data.DataColumn("othdoccd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnothdoccd);
                this.columnothdoc = new System.Data.DataColumn("othdoc", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnothdoc);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnothdoccd}, true));
                this.columnothdoccd.AllowDBNull = false;
                this.columnothdoccd.Unique = true;
                this.columnothdoccd.MaxLength = 4;
                this.columnothdoc.AllowDBNull = false;
                this.columnothdoc.MaxLength = 150;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHDOCMRow NewOTHDOCMRow() {
                return ((OTHDOCMRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OTHDOCMRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OTHDOCMRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OTHDOCMRowChanged != null)) {
                    this.OTHDOCMRowChanged(this, new OTHDOCMRowChangeEvent(((OTHDOCMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OTHDOCMRowChanging != null)) {
                    this.OTHDOCMRowChanging(this, new OTHDOCMRowChangeEvent(((OTHDOCMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OTHDOCMRowDeleted != null)) {
                    this.OTHDOCMRowDeleted(this, new OTHDOCMRowChangeEvent(((OTHDOCMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OTHDOCMRowDeleting != null)) {
                    this.OTHDOCMRowDeleting(this, new OTHDOCMRowChangeEvent(((OTHDOCMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOTHDOCMRow(OTHDOCMRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OTHDOCMDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OTHNAMEDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columnothrname;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHNAMEDDataTable() {
                this.TableName = "OTHNAMED";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OTHNAMEDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OTHNAMEDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn othrnameColumn {
                get {
                    return this.columnothrname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHNAMEDRow this[int index] {
                get {
                    return ((OTHNAMEDRow)(this.Rows[index]));
                }
            }
            
            public event OTHNAMEDRowChangeEventHandler OTHNAMEDRowChanging;
            
            public event OTHNAMEDRowChangeEventHandler OTHNAMEDRowChanged;
            
            public event OTHNAMEDRowChangeEventHandler OTHNAMEDRowDeleting;
            
            public event OTHNAMEDRowChangeEventHandler OTHNAMEDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOTHNAMEDRow(OTHNAMEDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHNAMEDRow AddOTHNAMEDRow(PROPMAINRow parentPROPMAINRowByFK_OTHNAMED_PROPMAIN, string othrname) {
                OTHNAMEDRow rowOTHNAMEDRow = ((OTHNAMEDRow)(this.NewRow()));
                rowOTHNAMEDRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_OTHNAMED_PROPMAIN[0],
                        othrname};
                this.Rows.Add(rowOTHNAMEDRow);
                return rowOTHNAMEDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHNAMEDRow FindByrefnumothrname(int refnum, string othrname) {
                return ((OTHNAMEDRow)(this.Rows.Find(new object[] {
                            refnum,
                            othrname})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OTHNAMEDDataTable cln = ((OTHNAMEDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OTHNAMEDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columnothrname = base.Columns["othrname"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columnothrname = new System.Data.DataColumn("othrname", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnothrname);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columnothrname}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columnothrname.AllowDBNull = false;
                this.columnothrname.MaxLength = 60;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHNAMEDRow NewOTHNAMEDRow() {
                return ((OTHNAMEDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OTHNAMEDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OTHNAMEDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OTHNAMEDRowChanged != null)) {
                    this.OTHNAMEDRowChanged(this, new OTHNAMEDRowChangeEvent(((OTHNAMEDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OTHNAMEDRowChanging != null)) {
                    this.OTHNAMEDRowChanging(this, new OTHNAMEDRowChangeEvent(((OTHNAMEDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OTHNAMEDRowDeleted != null)) {
                    this.OTHNAMEDRowDeleted(this, new OTHNAMEDRowChangeEvent(((OTHNAMEDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OTHNAMEDRowDeleting != null)) {
                    this.OTHNAMEDRowDeleting(this, new OTHNAMEDRowChangeEvent(((OTHNAMEDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOTHNAMEDRow(OTHNAMEDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OTHNAMEDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OWNERDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columnownercd;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERDDataTable() {
                this.TableName = "OWNERD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OWNERDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OWNERDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ownercdColumn {
                get {
                    return this.columnownercd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERDRow this[int index] {
                get {
                    return ((OWNERDRow)(this.Rows[index]));
                }
            }
            
            public event OWNERDRowChangeEventHandler OWNERDRowChanging;
            
            public event OWNERDRowChangeEventHandler OWNERDRowChanged;
            
            public event OWNERDRowChangeEventHandler OWNERDRowDeleting;
            
            public event OWNERDRowChangeEventHandler OWNERDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOWNERDRow(OWNERDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERDRow AddOWNERDRow(PROPMAINRow parentPROPMAINRowByFK_OWNERD_PROPMAIN, OWNERMRow parentOWNERMRowByFK_OWNERD_OWNERM) {
                OWNERDRow rowOWNERDRow = ((OWNERDRow)(this.NewRow()));
                rowOWNERDRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_OWNERD_PROPMAIN[0],
                        parentOWNERMRowByFK_OWNERD_OWNERM[0]};
                this.Rows.Add(rowOWNERDRow);
                return rowOWNERDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERDRow FindByrefnumownercd(int refnum, string ownercd) {
                return ((OWNERDRow)(this.Rows.Find(new object[] {
                            refnum,
                            ownercd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OWNERDDataTable cln = ((OWNERDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OWNERDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columnownercd = base.Columns["ownercd"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columnownercd = new System.Data.DataColumn("ownercd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnownercd);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columnownercd}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columnownercd.AllowDBNull = false;
                this.columnownercd.MaxLength = 2;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERDRow NewOWNERDRow() {
                return ((OWNERDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OWNERDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OWNERDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OWNERDRowChanged != null)) {
                    this.OWNERDRowChanged(this, new OWNERDRowChangeEvent(((OWNERDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OWNERDRowChanging != null)) {
                    this.OWNERDRowChanging(this, new OWNERDRowChangeEvent(((OWNERDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OWNERDRowDeleted != null)) {
                    this.OWNERDRowDeleted(this, new OWNERDRowChangeEvent(((OWNERDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OWNERDRowDeleting != null)) {
                    this.OWNERDRowDeleting(this, new OWNERDRowChangeEvent(((OWNERDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOWNERDRow(OWNERDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OWNERDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OWNERMDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnownercd;
            
            private System.Data.DataColumn columnowner;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERMDataTable() {
                this.TableName = "OWNERM";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OWNERMDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OWNERMDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ownercdColumn {
                get {
                    return this.columnownercd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ownerColumn {
                get {
                    return this.columnowner;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERMRow this[int index] {
                get {
                    return ((OWNERMRow)(this.Rows[index]));
                }
            }
            
            public event OWNERMRowChangeEventHandler OWNERMRowChanging;
            
            public event OWNERMRowChangeEventHandler OWNERMRowChanged;
            
            public event OWNERMRowChangeEventHandler OWNERMRowDeleting;
            
            public event OWNERMRowChangeEventHandler OWNERMRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOWNERMRow(OWNERMRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERMRow AddOWNERMRow(string ownercd, string owner) {
                OWNERMRow rowOWNERMRow = ((OWNERMRow)(this.NewRow()));
                rowOWNERMRow.ItemArray = new object[] {
                        ownercd,
                        owner};
                this.Rows.Add(rowOWNERMRow);
                return rowOWNERMRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERMRow FindByownercd(string ownercd) {
                return ((OWNERMRow)(this.Rows.Find(new object[] {
                            ownercd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OWNERMDataTable cln = ((OWNERMDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OWNERMDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnownercd = base.Columns["ownercd"];
                this.columnowner = base.Columns["owner"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnownercd = new System.Data.DataColumn("ownercd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnownercd);
                this.columnowner = new System.Data.DataColumn("owner", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnowner);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnownercd}, true));
                this.columnownercd.AllowDBNull = false;
                this.columnownercd.Unique = true;
                this.columnownercd.MaxLength = 2;
                this.columnowner.AllowDBNull = false;
                this.columnowner.MaxLength = 150;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERMRow NewOWNERMRow() {
                return ((OWNERMRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OWNERMRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OWNERMRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OWNERMRowChanged != null)) {
                    this.OWNERMRowChanged(this, new OWNERMRowChangeEvent(((OWNERMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OWNERMRowChanging != null)) {
                    this.OWNERMRowChanging(this, new OWNERMRowChangeEvent(((OWNERMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OWNERMRowDeleted != null)) {
                    this.OWNERMRowDeleted(this, new OWNERMRowChangeEvent(((OWNERMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OWNERMRowDeleting != null)) {
                    this.OWNERMRowDeleting(this, new OWNERMRowChangeEvent(((OWNERMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOWNERMRow(OWNERMRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OWNERMDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PERIODDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columnperiodcd;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERIODDDataTable() {
                this.TableName = "PERIODD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PERIODDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PERIODDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn periodcdColumn {
                get {
                    return this.columnperiodcd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERIODDRow this[int index] {
                get {
                    return ((PERIODDRow)(this.Rows[index]));
                }
            }
            
            public event PERIODDRowChangeEventHandler PERIODDRowChanging;
            
            public event PERIODDRowChangeEventHandler PERIODDRowChanged;
            
            public event PERIODDRowChangeEventHandler PERIODDRowDeleting;
            
            public event PERIODDRowChangeEventHandler PERIODDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPERIODDRow(PERIODDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERIODDRow AddPERIODDRow(PROPMAINRow parentPROPMAINRowByFK_PERIODD_PROPMAIN, PERIODMRow parentPERIODMRowByFK_PERIODD_PERIODM) {
                PERIODDRow rowPERIODDRow = ((PERIODDRow)(this.NewRow()));
                rowPERIODDRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_PERIODD_PROPMAIN[0],
                        parentPERIODMRowByFK_PERIODD_PERIODM[0]};
                this.Rows.Add(rowPERIODDRow);
                return rowPERIODDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERIODDRow FindByrefnumperiodcd(int refnum, int periodcd) {
                return ((PERIODDRow)(this.Rows.Find(new object[] {
                            refnum,
                            periodcd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PERIODDDataTable cln = ((PERIODDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PERIODDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columnperiodcd = base.Columns["periodcd"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columnperiodcd = new System.Data.DataColumn("periodcd", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnperiodcd);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columnperiodcd}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columnperiodcd.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERIODDRow NewPERIODDRow() {
                return ((PERIODDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PERIODDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PERIODDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PERIODDRowChanged != null)) {
                    this.PERIODDRowChanged(this, new PERIODDRowChangeEvent(((PERIODDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PERIODDRowChanging != null)) {
                    this.PERIODDRowChanging(this, new PERIODDRowChangeEvent(((PERIODDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PERIODDRowDeleted != null)) {
                    this.PERIODDRowDeleted(this, new PERIODDRowChangeEvent(((PERIODDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PERIODDRowDeleting != null)) {
                    this.PERIODDRowDeleting(this, new PERIODDRowChangeEvent(((PERIODDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePERIODDRow(PERIODDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PERIODDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PERIODMDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnperiodcd;
            
            private System.Data.DataColumn columnperiod;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERIODMDataTable() {
                this.TableName = "PERIODM";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PERIODMDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PERIODMDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn periodcdColumn {
                get {
                    return this.columnperiodcd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn periodColumn {
                get {
                    return this.columnperiod;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERIODMRow this[int index] {
                get {
                    return ((PERIODMRow)(this.Rows[index]));
                }
            }
            
            public event PERIODMRowChangeEventHandler PERIODMRowChanging;
            
            public event PERIODMRowChangeEventHandler PERIODMRowChanged;
            
            public event PERIODMRowChangeEventHandler PERIODMRowDeleting;
            
            public event PERIODMRowChangeEventHandler PERIODMRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPERIODMRow(PERIODMRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERIODMRow AddPERIODMRow(int periodcd, string period) {
                PERIODMRow rowPERIODMRow = ((PERIODMRow)(this.NewRow()));
                rowPERIODMRow.ItemArray = new object[] {
                        periodcd,
                        period};
                this.Rows.Add(rowPERIODMRow);
                return rowPERIODMRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERIODMRow FindByperiodcd(int periodcd) {
                return ((PERIODMRow)(this.Rows.Find(new object[] {
                            periodcd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PERIODMDataTable cln = ((PERIODMDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PERIODMDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnperiodcd = base.Columns["periodcd"];
                this.columnperiod = base.Columns["period"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnperiodcd = new System.Data.DataColumn("periodcd", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnperiodcd);
                this.columnperiod = new System.Data.DataColumn("period", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnperiod);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnperiodcd}, true));
                this.columnperiodcd.AllowDBNull = false;
                this.columnperiodcd.Unique = true;
                this.columnperiod.AllowDBNull = false;
                this.columnperiod.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERIODMRow NewPERIODMRow() {
                return ((PERIODMRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PERIODMRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PERIODMRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PERIODMRowChanged != null)) {
                    this.PERIODMRowChanged(this, new PERIODMRowChangeEvent(((PERIODMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PERIODMRowChanging != null)) {
                    this.PERIODMRowChanging(this, new PERIODMRowChangeEvent(((PERIODMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PERIODMRowDeleted != null)) {
                    this.PERIODMRowDeleted(this, new PERIODMRowChangeEvent(((PERIODMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PERIODMRowDeleting != null)) {
                    this.PERIODMRowDeleting(this, new PERIODMRowChangeEvent(((PERIODMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePERIODMRow(PERIODMRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PERIODMDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PossibleArticlesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columnArticleID;
            
            private System.Data.DataColumn columnArticleContent;
            
            private System.Data.DataColumn columnFoundOn;
            
            private System.Data.DataColumn columnFoundReason;
            
            private System.Data.DataColumn columnNotAMatch;
            
            private System.Data.DataColumn columnSeeAlso;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PossibleArticlesDataTable() {
                this.TableName = "PossibleArticles";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PossibleArticlesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PossibleArticlesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArticleIDColumn {
                get {
                    return this.columnArticleID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArticleContentColumn {
                get {
                    return this.columnArticleContent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FoundOnColumn {
                get {
                    return this.columnFoundOn;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FoundReasonColumn {
                get {
                    return this.columnFoundReason;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NotAMatchColumn {
                get {
                    return this.columnNotAMatch;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SeeAlsoColumn {
                get {
                    return this.columnSeeAlso;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PossibleArticlesRow this[int index] {
                get {
                    return ((PossibleArticlesRow)(this.Rows[index]));
                }
            }
            
            public event PossibleArticlesRowChangeEventHandler PossibleArticlesRowChanging;
            
            public event PossibleArticlesRowChangeEventHandler PossibleArticlesRowChanged;
            
            public event PossibleArticlesRowChangeEventHandler PossibleArticlesRowDeleting;
            
            public event PossibleArticlesRowChangeEventHandler PossibleArticlesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPossibleArticlesRow(PossibleArticlesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PossibleArticlesRow AddPossibleArticlesRow(PROPMAINRow parentPROPMAINRowByFK_PossibleArticles_PROPMAIN, int ArticleID, string ArticleContent, System.DateTime FoundOn, string FoundReason, System.DateTime NotAMatch, System.DateTime SeeAlso) {
                PossibleArticlesRow rowPossibleArticlesRow = ((PossibleArticlesRow)(this.NewRow()));
                rowPossibleArticlesRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_PossibleArticles_PROPMAIN[0],
                        ArticleID,
                        ArticleContent,
                        FoundOn,
                        FoundReason,
                        NotAMatch,
                        SeeAlso};
                this.Rows.Add(rowPossibleArticlesRow);
                return rowPossibleArticlesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PossibleArticlesRow FindByrefnumArticleID(int refnum, int ArticleID) {
                return ((PossibleArticlesRow)(this.Rows.Find(new object[] {
                            refnum,
                            ArticleID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PossibleArticlesDataTable cln = ((PossibleArticlesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PossibleArticlesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columnArticleID = base.Columns["ArticleID"];
                this.columnArticleContent = base.Columns["ArticleContent"];
                this.columnFoundOn = base.Columns["FoundOn"];
                this.columnFoundReason = base.Columns["FoundReason"];
                this.columnNotAMatch = base.Columns["NotAMatch"];
                this.columnSeeAlso = base.Columns["SeeAlso"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columnArticleID = new System.Data.DataColumn("ArticleID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArticleID);
                this.columnArticleContent = new System.Data.DataColumn("ArticleContent", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArticleContent);
                this.columnFoundOn = new System.Data.DataColumn("FoundOn", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFoundOn);
                this.columnFoundReason = new System.Data.DataColumn("FoundReason", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFoundReason);
                this.columnNotAMatch = new System.Data.DataColumn("NotAMatch", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotAMatch);
                this.columnSeeAlso = new System.Data.DataColumn("SeeAlso", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeeAlso);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columnArticleID}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columnArticleID.AllowDBNull = false;
                this.columnArticleContent.AllowDBNull = false;
                this.columnArticleContent.MaxLength = 2147483647;
                this.columnFoundOn.AllowDBNull = false;
                this.columnFoundReason.AllowDBNull = false;
                this.columnFoundReason.MaxLength = 2147483647;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PossibleArticlesRow NewPossibleArticlesRow() {
                return ((PossibleArticlesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PossibleArticlesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PossibleArticlesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PossibleArticlesRowChanged != null)) {
                    this.PossibleArticlesRowChanged(this, new PossibleArticlesRowChangeEvent(((PossibleArticlesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PossibleArticlesRowChanging != null)) {
                    this.PossibleArticlesRowChanging(this, new PossibleArticlesRowChangeEvent(((PossibleArticlesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PossibleArticlesRowDeleted != null)) {
                    this.PossibleArticlesRowDeleted(this, new PossibleArticlesRowChangeEvent(((PossibleArticlesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PossibleArticlesRowDeleting != null)) {
                    this.PossibleArticlesRowDeleting(this, new PossibleArticlesRowChangeEvent(((PossibleArticlesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePossibleArticlesRow(PossibleArticlesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PossibleArticlesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PROPMAINDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columnresname;
            
            private System.Data.DataColumn columnaddress;
            
            private System.Data.DataColumn columnrestrict;
            
            private System.Data.DataColumn columnretypecd;
            
            private System.Data.DataColumn columnnumcbldg;
            
            private System.Data.DataColumn columnnumcsite;
            
            private System.Data.DataColumn columnnumcstrc;
            
            private System.Data.DataColumn columnnumcobj;
            
            private System.Data.DataColumn columnnumnbldg;
            
            private System.Data.DataColumn columnnumnsite;
            
            private System.Data.DataColumn columnnumnstrc;
            
            private System.Data.DataColumn columnnumnobj;
            
            private System.Data.DataColumn columnparknmcd;
            
            private System.Data.DataColumn columncertcd;
            
            private System.Data.DataColumn columncertdate;
            
            private System.Data.DataColumn columndescothr;
            
            private System.Data.DataColumn columnacre;
            
            private System.Data.DataColumn columnmultname;
            
            private System.Data.DataColumn columnArticleID;
            
            private System.Data.DataColumn columnCleanName;
            
            private System.Data.DataColumn columnMainArticleRefnum;
            
            private System.Data.DataColumn columnPrimaryCity;
            
            private System.Data.DataColumn columnPrimaryCounty;
            
            private System.Data.DataColumn columnPrimaryState;
            
            private System.Data.DataColumn columnPrimaryVicinity;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINDataTable() {
                this.TableName = "PROPMAIN";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PROPMAINDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PROPMAINDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn resnameColumn {
                get {
                    return this.columnresname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn addressColumn {
                get {
                    return this.columnaddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn restrictColumn {
                get {
                    return this.columnrestrict;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn retypecdColumn {
                get {
                    return this.columnretypecd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn numcbldgColumn {
                get {
                    return this.columnnumcbldg;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn numcsiteColumn {
                get {
                    return this.columnnumcsite;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn numcstrcColumn {
                get {
                    return this.columnnumcstrc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn numcobjColumn {
                get {
                    return this.columnnumcobj;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn numnbldgColumn {
                get {
                    return this.columnnumnbldg;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn numnsiteColumn {
                get {
                    return this.columnnumnsite;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn numnstrcColumn {
                get {
                    return this.columnnumnstrc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn numnobjColumn {
                get {
                    return this.columnnumnobj;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn parknmcdColumn {
                get {
                    return this.columnparknmcd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn certcdColumn {
                get {
                    return this.columncertcd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn certdateColumn {
                get {
                    return this.columncertdate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn descothrColumn {
                get {
                    return this.columndescothr;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn acreColumn {
                get {
                    return this.columnacre;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn multnameColumn {
                get {
                    return this.columnmultname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArticleIDColumn {
                get {
                    return this.columnArticleID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CleanNameColumn {
                get {
                    return this.columnCleanName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MainArticleRefnumColumn {
                get {
                    return this.columnMainArticleRefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PrimaryCityColumn {
                get {
                    return this.columnPrimaryCity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PrimaryCountyColumn {
                get {
                    return this.columnPrimaryCounty;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PrimaryStateColumn {
                get {
                    return this.columnPrimaryState;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PrimaryVicinityColumn {
                get {
                    return this.columnPrimaryVicinity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow this[int index] {
                get {
                    return ((PROPMAINRow)(this.Rows[index]));
                }
            }
            
            public event PROPMAINRowChangeEventHandler PROPMAINRowChanging;
            
            public event PROPMAINRowChangeEventHandler PROPMAINRowChanged;
            
            public event PROPMAINRowChangeEventHandler PROPMAINRowDeleting;
            
            public event PROPMAINRowChangeEventHandler PROPMAINRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPROPMAINRow(PROPMAINRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow AddPROPMAINRow(
                        GEOCODEMRow parentGEOCODEMRowByFK_GEOCODEM_PROPMAIN, 
                        string resname, 
                        string address, 
                        bool restrict, 
                        RETYPEMRow parentRETYPEMRowByFK_PROPMAIN_RETYPEM, 
                        int numcbldg, 
                        int numcsite, 
                        int numcstrc, 
                        int numcobj, 
                        int numnbldg, 
                        int numnsite, 
                        int numnstrc, 
                        int numnobj, 
                        string parknmcd, 
                        CERTMRow parentCERTMRowByFK_PROPMAIN_CERTM, 
                        System.DateTime certdate, 
                        string descothr, 
                        int acre, 
                        string multname, 
                        int ArticleID, 
                        string CleanName, 
                        PROPMAINRow parentPROPMAINRowByFK_PROPMAIN_PROPMAIN, 
                        string PrimaryCity, 
                        string PrimaryCounty, 
                        string PrimaryState, 
                        bool PrimaryVicinity) {
                PROPMAINRow rowPROPMAINRow = ((PROPMAINRow)(this.NewRow()));
                rowPROPMAINRow.ItemArray = new object[] {
                        parentGEOCODEMRowByFK_GEOCODEM_PROPMAIN[0],
                        resname,
                        address,
                        restrict,
                        parentRETYPEMRowByFK_PROPMAIN_RETYPEM[0],
                        numcbldg,
                        numcsite,
                        numcstrc,
                        numcobj,
                        numnbldg,
                        numnsite,
                        numnstrc,
                        numnobj,
                        parknmcd,
                        parentCERTMRowByFK_PROPMAIN_CERTM[0],
                        certdate,
                        descothr,
                        acre,
                        multname,
                        ArticleID,
                        CleanName,
                        parentPROPMAINRowByFK_PROPMAIN_PROPMAIN[0],
                        PrimaryCity,
                        PrimaryCounty,
                        PrimaryState,
                        PrimaryVicinity};
                this.Rows.Add(rowPROPMAINRow);
                return rowPROPMAINRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow FindByrefnum(int refnum) {
                return ((PROPMAINRow)(this.Rows.Find(new object[] {
                            refnum})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PROPMAINDataTable cln = ((PROPMAINDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PROPMAINDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columnresname = base.Columns["resname"];
                this.columnaddress = base.Columns["address"];
                this.columnrestrict = base.Columns["restrict"];
                this.columnretypecd = base.Columns["retypecd"];
                this.columnnumcbldg = base.Columns["numcbldg"];
                this.columnnumcsite = base.Columns["numcsite"];
                this.columnnumcstrc = base.Columns["numcstrc"];
                this.columnnumcobj = base.Columns["numcobj"];
                this.columnnumnbldg = base.Columns["numnbldg"];
                this.columnnumnsite = base.Columns["numnsite"];
                this.columnnumnstrc = base.Columns["numnstrc"];
                this.columnnumnobj = base.Columns["numnobj"];
                this.columnparknmcd = base.Columns["parknmcd"];
                this.columncertcd = base.Columns["certcd"];
                this.columncertdate = base.Columns["certdate"];
                this.columndescothr = base.Columns["descothr"];
                this.columnacre = base.Columns["acre"];
                this.columnmultname = base.Columns["multname"];
                this.columnArticleID = base.Columns["ArticleID"];
                this.columnCleanName = base.Columns["CleanName"];
                this.columnMainArticleRefnum = base.Columns["MainArticleRefnum"];
                this.columnPrimaryCity = base.Columns["PrimaryCity"];
                this.columnPrimaryCounty = base.Columns["PrimaryCounty"];
                this.columnPrimaryState = base.Columns["PrimaryState"];
                this.columnPrimaryVicinity = base.Columns["PrimaryVicinity"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columnresname = new System.Data.DataColumn("resname", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnresname);
                this.columnaddress = new System.Data.DataColumn("address", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnaddress);
                this.columnrestrict = new System.Data.DataColumn("restrict", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrestrict);
                this.columnretypecd = new System.Data.DataColumn("retypecd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnretypecd);
                this.columnnumcbldg = new System.Data.DataColumn("numcbldg", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumcbldg);
                this.columnnumcsite = new System.Data.DataColumn("numcsite", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumcsite);
                this.columnnumcstrc = new System.Data.DataColumn("numcstrc", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumcstrc);
                this.columnnumcobj = new System.Data.DataColumn("numcobj", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumcobj);
                this.columnnumnbldg = new System.Data.DataColumn("numnbldg", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumnbldg);
                this.columnnumnsite = new System.Data.DataColumn("numnsite", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumnsite);
                this.columnnumnstrc = new System.Data.DataColumn("numnstrc", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumnstrc);
                this.columnnumnobj = new System.Data.DataColumn("numnobj", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumnobj);
                this.columnparknmcd = new System.Data.DataColumn("parknmcd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnparknmcd);
                this.columncertcd = new System.Data.DataColumn("certcd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncertcd);
                this.columncertdate = new System.Data.DataColumn("certdate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncertdate);
                this.columndescothr = new System.Data.DataColumn("descothr", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndescothr);
                this.columnacre = new System.Data.DataColumn("acre", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnacre);
                this.columnmultname = new System.Data.DataColumn("multname", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmultname);
                this.columnArticleID = new System.Data.DataColumn("ArticleID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArticleID);
                this.columnCleanName = new System.Data.DataColumn("CleanName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCleanName);
                this.columnMainArticleRefnum = new System.Data.DataColumn("MainArticleRefnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainArticleRefnum);
                this.columnPrimaryCity = new System.Data.DataColumn("PrimaryCity", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrimaryCity);
                this.columnPrimaryCounty = new System.Data.DataColumn("PrimaryCounty", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrimaryCounty);
                this.columnPrimaryState = new System.Data.DataColumn("PrimaryState", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrimaryState);
                this.columnPrimaryVicinity = new System.Data.DataColumn("PrimaryVicinity", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrimaryVicinity);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columnrefnum.Unique = true;
                this.columnresname.AllowDBNull = false;
                this.columnresname.MaxLength = 200;
                this.columnaddress.MaxLength = 200;
                this.columnrestrict.AllowDBNull = false;
                this.columnretypecd.MaxLength = 1;
                this.columnparknmcd.MaxLength = 4;
                this.columncertcd.AllowDBNull = false;
                this.columncertcd.MaxLength = 2;
                this.columncertdate.AllowDBNull = false;
                this.columndescothr.MaxLength = 50;
                this.columnmultname.MaxLength = 200;
                this.columnCleanName.MaxLength = 200;
                this.columnPrimaryCity.AllowDBNull = false;
                this.columnPrimaryCity.ReadOnly = true;
                this.columnPrimaryCounty.AllowDBNull = false;
                this.columnPrimaryCounty.ReadOnly = true;
                this.columnPrimaryState.AllowDBNull = false;
                this.columnPrimaryState.ReadOnly = true;
                this.columnPrimaryVicinity.AllowDBNull = false;
                this.columnPrimaryVicinity.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow NewPROPMAINRow() {
                return ((PROPMAINRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PROPMAINRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PROPMAINRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PROPMAINRowChanged != null)) {
                    this.PROPMAINRowChanged(this, new PROPMAINRowChangeEvent(((PROPMAINRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PROPMAINRowChanging != null)) {
                    this.PROPMAINRowChanging(this, new PROPMAINRowChangeEvent(((PROPMAINRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PROPMAINRowDeleted != null)) {
                    this.PROPMAINRowDeleted(this, new PROPMAINRowChangeEvent(((PROPMAINRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PROPMAINRowDeleting != null)) {
                    this.PROPMAINRowDeleting(this, new PROPMAINRowChangeEvent(((PROPMAINRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePROPMAINRow(PROPMAINRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PROPMAINDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RETYPEMDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnretypecd;
            
            private System.Data.DataColumn columnretype;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RETYPEMDataTable() {
                this.TableName = "RETYPEM";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RETYPEMDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RETYPEMDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn retypecdColumn {
                get {
                    return this.columnretypecd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn retypeColumn {
                get {
                    return this.columnretype;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RETYPEMRow this[int index] {
                get {
                    return ((RETYPEMRow)(this.Rows[index]));
                }
            }
            
            public event RETYPEMRowChangeEventHandler RETYPEMRowChanging;
            
            public event RETYPEMRowChangeEventHandler RETYPEMRowChanged;
            
            public event RETYPEMRowChangeEventHandler RETYPEMRowDeleting;
            
            public event RETYPEMRowChangeEventHandler RETYPEMRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRETYPEMRow(RETYPEMRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RETYPEMRow AddRETYPEMRow(string retypecd, string retype) {
                RETYPEMRow rowRETYPEMRow = ((RETYPEMRow)(this.NewRow()));
                rowRETYPEMRow.ItemArray = new object[] {
                        retypecd,
                        retype};
                this.Rows.Add(rowRETYPEMRow);
                return rowRETYPEMRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RETYPEMRow FindByretypecd(string retypecd) {
                return ((RETYPEMRow)(this.Rows.Find(new object[] {
                            retypecd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RETYPEMDataTable cln = ((RETYPEMDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RETYPEMDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnretypecd = base.Columns["retypecd"];
                this.columnretype = base.Columns["retype"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnretypecd = new System.Data.DataColumn("retypecd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnretypecd);
                this.columnretype = new System.Data.DataColumn("retype", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnretype);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnretypecd}, true));
                this.columnretypecd.AllowDBNull = false;
                this.columnretypecd.Unique = true;
                this.columnretypecd.MaxLength = 1;
                this.columnretype.AllowDBNull = false;
                this.columnretype.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RETYPEMRow NewRETYPEMRow() {
                return ((RETYPEMRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RETYPEMRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RETYPEMRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RETYPEMRowChanged != null)) {
                    this.RETYPEMRowChanged(this, new RETYPEMRowChangeEvent(((RETYPEMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RETYPEMRowChanging != null)) {
                    this.RETYPEMRowChanging(this, new RETYPEMRowChangeEvent(((RETYPEMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RETYPEMRowDeleted != null)) {
                    this.RETYPEMRowDeleted(this, new RETYPEMRowChangeEvent(((RETYPEMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RETYPEMRowDeleting != null)) {
                    this.RETYPEMRowDeleting(this, new RETYPEMRowChangeEvent(((RETYPEMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRETYPEMRow(RETYPEMRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RETYPEMDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SIGNAMEDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columnsigname;
            
            private System.Data.DataColumn columnCleanName;
            
            private System.Data.DataColumn columnLastName;
            
            private System.Data.DataColumn columnFirstName;
            
            private System.Data.DataColumn columnSuffix;
            
            private System.Data.DataColumn columnPrefix;
            
            private System.Data.DataColumn columnMiddle;
            
            private System.Data.DataColumn columnOtherPerson;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIGNAMEDDataTable() {
                this.TableName = "SIGNAMED";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SIGNAMEDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SIGNAMEDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn signameColumn {
                get {
                    return this.columnsigname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CleanNameColumn {
                get {
                    return this.columnCleanName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SuffixColumn {
                get {
                    return this.columnSuffix;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PrefixColumn {
                get {
                    return this.columnPrefix;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MiddleColumn {
                get {
                    return this.columnMiddle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OtherPersonColumn {
                get {
                    return this.columnOtherPerson;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIGNAMEDRow this[int index] {
                get {
                    return ((SIGNAMEDRow)(this.Rows[index]));
                }
            }
            
            public event SIGNAMEDRowChangeEventHandler SIGNAMEDRowChanging;
            
            public event SIGNAMEDRowChangeEventHandler SIGNAMEDRowChanged;
            
            public event SIGNAMEDRowChangeEventHandler SIGNAMEDRowDeleting;
            
            public event SIGNAMEDRowChangeEventHandler SIGNAMEDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSIGNAMEDRow(SIGNAMEDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIGNAMEDRow AddSIGNAMEDRow(PROPMAINRow parentPROPMAINRowByFK_SIGNAMED_PROPMAIN, string signame, string CleanName, string LastName, string FirstName, string Suffix, string Prefix, string Middle, string OtherPerson) {
                SIGNAMEDRow rowSIGNAMEDRow = ((SIGNAMEDRow)(this.NewRow()));
                rowSIGNAMEDRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_SIGNAMED_PROPMAIN[0],
                        signame,
                        CleanName,
                        LastName,
                        FirstName,
                        Suffix,
                        Prefix,
                        Middle,
                        OtherPerson};
                this.Rows.Add(rowSIGNAMEDRow);
                return rowSIGNAMEDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIGNAMEDRow FindByrefnumsigname(int refnum, string signame) {
                return ((SIGNAMEDRow)(this.Rows.Find(new object[] {
                            refnum,
                            signame})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SIGNAMEDDataTable cln = ((SIGNAMEDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SIGNAMEDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columnsigname = base.Columns["signame"];
                this.columnCleanName = base.Columns["CleanName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnSuffix = base.Columns["Suffix"];
                this.columnPrefix = base.Columns["Prefix"];
                this.columnMiddle = base.Columns["Middle"];
                this.columnOtherPerson = base.Columns["OtherPerson"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columnsigname = new System.Data.DataColumn("signame", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsigname);
                this.columnCleanName = new System.Data.DataColumn("CleanName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCleanName);
                this.columnLastName = new System.Data.DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnFirstName = new System.Data.DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnSuffix = new System.Data.DataColumn("Suffix", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSuffix);
                this.columnPrefix = new System.Data.DataColumn("Prefix", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrefix);
                this.columnMiddle = new System.Data.DataColumn("Middle", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMiddle);
                this.columnOtherPerson = new System.Data.DataColumn("OtherPerson", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherPerson);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columnsigname}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columnsigname.AllowDBNull = false;
                this.columnsigname.MaxLength = 50;
                this.columnCleanName.MaxLength = 50;
                this.columnLastName.MaxLength = 50;
                this.columnFirstName.MaxLength = 50;
                this.columnSuffix.MaxLength = 50;
                this.columnPrefix.MaxLength = 50;
                this.columnMiddle.MaxLength = 50;
                this.columnOtherPerson.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIGNAMEDRow NewSIGNAMEDRow() {
                return ((SIGNAMEDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SIGNAMEDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SIGNAMEDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SIGNAMEDRowChanged != null)) {
                    this.SIGNAMEDRowChanged(this, new SIGNAMEDRowChangeEvent(((SIGNAMEDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SIGNAMEDRowChanging != null)) {
                    this.SIGNAMEDRowChanging(this, new SIGNAMEDRowChangeEvent(((SIGNAMEDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SIGNAMEDRowDeleted != null)) {
                    this.SIGNAMEDRowDeleted(this, new SIGNAMEDRowChangeEvent(((SIGNAMEDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SIGNAMEDRowDeleting != null)) {
                    this.SIGNAMEDRowDeleting(this, new SIGNAMEDRowChangeEvent(((SIGNAMEDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSIGNAMEDRow(SIGNAMEDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SIGNAMEDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SIGYEARDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columncirca;
            
            private System.Data.DataColumn columnsigyear;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIGYEARDDataTable() {
                this.TableName = "SIGYEARD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SIGYEARDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SIGYEARDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn circaColumn {
                get {
                    return this.columncirca;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sigyearColumn {
                get {
                    return this.columnsigyear;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIGYEARDRow this[int index] {
                get {
                    return ((SIGYEARDRow)(this.Rows[index]));
                }
            }
            
            public event SIGYEARDRowChangeEventHandler SIGYEARDRowChanging;
            
            public event SIGYEARDRowChangeEventHandler SIGYEARDRowChanged;
            
            public event SIGYEARDRowChangeEventHandler SIGYEARDRowDeleting;
            
            public event SIGYEARDRowChangeEventHandler SIGYEARDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSIGYEARDRow(SIGYEARDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIGYEARDRow AddSIGYEARDRow(PROPMAINRow parentPROPMAINRowByFK_SIGYEARD_PROPMAIN, bool circa, short sigyear) {
                SIGYEARDRow rowSIGYEARDRow = ((SIGYEARDRow)(this.NewRow()));
                rowSIGYEARDRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_SIGYEARD_PROPMAIN[0],
                        circa,
                        sigyear};
                this.Rows.Add(rowSIGYEARDRow);
                return rowSIGYEARDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIGYEARDRow FindByrefnumsigyear(int refnum, short sigyear) {
                return ((SIGYEARDRow)(this.Rows.Find(new object[] {
                            refnum,
                            sigyear})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SIGYEARDDataTable cln = ((SIGYEARDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SIGYEARDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columncirca = base.Columns["circa"];
                this.columnsigyear = base.Columns["sigyear"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columncirca = new System.Data.DataColumn("circa", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncirca);
                this.columnsigyear = new System.Data.DataColumn("sigyear", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsigyear);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columnsigyear}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columncirca.AllowDBNull = false;
                this.columnsigyear.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIGYEARDRow NewSIGYEARDRow() {
                return ((SIGYEARDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SIGYEARDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SIGYEARDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SIGYEARDRowChanged != null)) {
                    this.SIGYEARDRowChanged(this, new SIGYEARDRowChangeEvent(((SIGYEARDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SIGYEARDRowChanging != null)) {
                    this.SIGYEARDRowChanging(this, new SIGYEARDRowChangeEvent(((SIGYEARDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SIGYEARDRowDeleted != null)) {
                    this.SIGYEARDRowDeleted(this, new SIGYEARDRowChangeEvent(((SIGYEARDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SIGYEARDRowDeleting != null)) {
                    this.SIGYEARDRowDeleting(this, new SIGYEARDRowChangeEvent(((SIGYEARDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSIGYEARDRow(SIGYEARDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SIGYEARDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ARSTYLDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columnarstylcd;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARSTYLDDataTable() {
                this.TableName = "ARSTYLD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ARSTYLDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ARSTYLDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn arstylcdColumn {
                get {
                    return this.columnarstylcd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARSTYLDRow this[int index] {
                get {
                    return ((ARSTYLDRow)(this.Rows[index]));
                }
            }
            
            public event ARSTYLDRowChangeEventHandler ARSTYLDRowChanging;
            
            public event ARSTYLDRowChangeEventHandler ARSTYLDRowChanged;
            
            public event ARSTYLDRowChangeEventHandler ARSTYLDRowDeleting;
            
            public event ARSTYLDRowChangeEventHandler ARSTYLDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddARSTYLDRow(ARSTYLDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARSTYLDRow AddARSTYLDRow(PROPMAINRow parentPROPMAINRowByFK_PROPMAIN_ARSTYLD, ARSTYLMRow parentARSTYLMRowByFK_ARSTYLD_ARSTYLM) {
                ARSTYLDRow rowARSTYLDRow = ((ARSTYLDRow)(this.NewRow()));
                rowARSTYLDRow.ItemArray = new object[] {
                        parentPROPMAINRowByFK_PROPMAIN_ARSTYLD[0],
                        parentARSTYLMRowByFK_ARSTYLD_ARSTYLM[0]};
                this.Rows.Add(rowARSTYLDRow);
                return rowARSTYLDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARSTYLDRow FindByrefnumarstylcd(int refnum, int arstylcd) {
                return ((ARSTYLDRow)(this.Rows.Find(new object[] {
                            refnum,
                            arstylcd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ARSTYLDDataTable cln = ((ARSTYLDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ARSTYLDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columnarstylcd = base.Columns["arstylcd"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columnarstylcd = new System.Data.DataColumn("arstylcd", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnarstylcd);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum,
                                this.columnarstylcd}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columnarstylcd.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARSTYLDRow NewARSTYLDRow() {
                return ((ARSTYLDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ARSTYLDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ARSTYLDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ARSTYLDRowChanged != null)) {
                    this.ARSTYLDRowChanged(this, new ARSTYLDRowChangeEvent(((ARSTYLDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ARSTYLDRowChanging != null)) {
                    this.ARSTYLDRowChanging(this, new ARSTYLDRowChangeEvent(((ARSTYLDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ARSTYLDRowDeleted != null)) {
                    this.ARSTYLDRowDeleted(this, new ARSTYLDRowChangeEvent(((ARSTYLDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ARSTYLDRowDeleting != null)) {
                    this.ARSTYLDRowDeleting(this, new ARSTYLDRowChangeEvent(((ARSTYLDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveARSTYLDRow(ARSTYLDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ARSTYLDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ARSTYLMDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnarstylcd;
            
            private System.Data.DataColumn columnarstyl;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARSTYLMDataTable() {
                this.TableName = "ARSTYLM";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ARSTYLMDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ARSTYLMDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn arstylcdColumn {
                get {
                    return this.columnarstylcd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn arstylColumn {
                get {
                    return this.columnarstyl;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARSTYLMRow this[int index] {
                get {
                    return ((ARSTYLMRow)(this.Rows[index]));
                }
            }
            
            public event ARSTYLMRowChangeEventHandler ARSTYLMRowChanging;
            
            public event ARSTYLMRowChangeEventHandler ARSTYLMRowChanged;
            
            public event ARSTYLMRowChangeEventHandler ARSTYLMRowDeleting;
            
            public event ARSTYLMRowChangeEventHandler ARSTYLMRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddARSTYLMRow(ARSTYLMRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARSTYLMRow AddARSTYLMRow(int arstylcd, string arstyl) {
                ARSTYLMRow rowARSTYLMRow = ((ARSTYLMRow)(this.NewRow()));
                rowARSTYLMRow.ItemArray = new object[] {
                        arstylcd,
                        arstyl};
                this.Rows.Add(rowARSTYLMRow);
                return rowARSTYLMRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARSTYLMRow FindByarstylcd(int arstylcd) {
                return ((ARSTYLMRow)(this.Rows.Find(new object[] {
                            arstylcd})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ARSTYLMDataTable cln = ((ARSTYLMDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ARSTYLMDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnarstylcd = base.Columns["arstylcd"];
                this.columnarstyl = base.Columns["arstyl"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnarstylcd = new System.Data.DataColumn("arstylcd", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnarstylcd);
                this.columnarstyl = new System.Data.DataColumn("arstyl", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnarstyl);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnarstylcd}, true));
                this.columnarstylcd.AllowDBNull = false;
                this.columnarstylcd.Unique = true;
                this.columnarstyl.AllowDBNull = false;
                this.columnarstyl.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARSTYLMRow NewARSTYLMRow() {
                return ((ARSTYLMRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ARSTYLMRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ARSTYLMRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ARSTYLMRowChanged != null)) {
                    this.ARSTYLMRowChanged(this, new ARSTYLMRowChangeEvent(((ARSTYLMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ARSTYLMRowChanging != null)) {
                    this.ARSTYLMRowChanging(this, new ARSTYLMRowChangeEvent(((ARSTYLMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ARSTYLMRowDeleted != null)) {
                    this.ARSTYLMRowDeleted(this, new ARSTYLMRowChangeEvent(((ARSTYLMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ARSTYLMRowDeleting != null)) {
                    this.ARSTYLMRowDeleting(this, new ARSTYLMRowChangeEvent(((ARSTYLMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveARSTYLMRow(ARSTYLMRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ARSTYLMDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GEOCODEMDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrefnum;
            
            private System.Data.DataColumn columnstatecd;
            
            private System.Data.DataColumn columncounty;
            
            private System.Data.DataColumn columncity;
            
            private System.Data.DataColumn columnzip;
            
            private System.Data.DataColumn columnname;
            
            private System.Data.DataColumn columnaddress;
            
            private System.Data.DataColumn columngdtplus4;
            
            private System.Data.DataColumn columngdtsad;
            
            private System.Data.DataColumn columngdtcity;
            
            private System.Data.DataColumn columngdtstatecd;
            
            private System.Data.DataColumn columngdtpcode;
            
            private System.Data.DataColumn columngdtlat;
            
            private System.Data.DataColumn columngdtlong;
            
            private System.Data.DataColumn columngdtxin;
            
            private System.Data.DataColumn columngdtstat;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEOCODEMDataTable() {
                this.TableName = "GEOCODEM";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GEOCODEMDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GEOCODEMDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn statecdColumn {
                get {
                    return this.columnstatecd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn countyColumn {
                get {
                    return this.columncounty;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cityColumn {
                get {
                    return this.columncity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn zipColumn {
                get {
                    return this.columnzip;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn addressColumn {
                get {
                    return this.columnaddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn gdtplus4Column {
                get {
                    return this.columngdtplus4;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn gdtsadColumn {
                get {
                    return this.columngdtsad;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn gdtcityColumn {
                get {
                    return this.columngdtcity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn gdtstatecdColumn {
                get {
                    return this.columngdtstatecd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn gdtpcodeColumn {
                get {
                    return this.columngdtpcode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn gdtlatColumn {
                get {
                    return this.columngdtlat;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn gdtlongColumn {
                get {
                    return this.columngdtlong;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn gdtxinColumn {
                get {
                    return this.columngdtxin;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn gdtstatColumn {
                get {
                    return this.columngdtstat;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEOCODEMRow this[int index] {
                get {
                    return ((GEOCODEMRow)(this.Rows[index]));
                }
            }
            
            public event GEOCODEMRowChangeEventHandler GEOCODEMRowChanging;
            
            public event GEOCODEMRowChangeEventHandler GEOCODEMRowChanged;
            
            public event GEOCODEMRowChangeEventHandler GEOCODEMRowDeleting;
            
            public event GEOCODEMRowChangeEventHandler GEOCODEMRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGEOCODEMRow(GEOCODEMRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEOCODEMRow AddGEOCODEMRow(
                        int refnum, 
                        STATEMRow parentSTATEMRowByFK_GEOCODEM_STATEM1, 
                        string county, 
                        string city, 
                        string zip, 
                        string name, 
                        string address, 
                        string gdtplus4, 
                        string gdtsad, 
                        string gdtcity, 
                        STATEMRow parentSTATEMRowByFK_GEOCODEM_STATEM, 
                        string gdtpcode, 
                        decimal gdtlat, 
                        decimal gdtlong, 
                        string gdtxin, 
                        string gdtstat) {
                GEOCODEMRow rowGEOCODEMRow = ((GEOCODEMRow)(this.NewRow()));
                rowGEOCODEMRow.ItemArray = new object[] {
                        refnum,
                        parentSTATEMRowByFK_GEOCODEM_STATEM1[0],
                        county,
                        city,
                        zip,
                        name,
                        address,
                        gdtplus4,
                        gdtsad,
                        gdtcity,
                        parentSTATEMRowByFK_GEOCODEM_STATEM[0],
                        gdtpcode,
                        gdtlat,
                        gdtlong,
                        gdtxin,
                        gdtstat};
                this.Rows.Add(rowGEOCODEMRow);
                return rowGEOCODEMRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEOCODEMRow FindByrefnum(int refnum) {
                return ((GEOCODEMRow)(this.Rows.Find(new object[] {
                            refnum})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GEOCODEMDataTable cln = ((GEOCODEMDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GEOCODEMDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrefnum = base.Columns["refnum"];
                this.columnstatecd = base.Columns["statecd"];
                this.columncounty = base.Columns["county"];
                this.columncity = base.Columns["city"];
                this.columnzip = base.Columns["zip"];
                this.columnname = base.Columns["name"];
                this.columnaddress = base.Columns["address"];
                this.columngdtplus4 = base.Columns["gdtplus4"];
                this.columngdtsad = base.Columns["gdtsad"];
                this.columngdtcity = base.Columns["gdtcity"];
                this.columngdtstatecd = base.Columns["gdtstatecd"];
                this.columngdtpcode = base.Columns["gdtpcode"];
                this.columngdtlat = base.Columns["gdtlat"];
                this.columngdtlong = base.Columns["gdtlong"];
                this.columngdtxin = base.Columns["gdtxin"];
                this.columngdtstat = base.Columns["gdtstat"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrefnum = new System.Data.DataColumn("refnum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columnstatecd = new System.Data.DataColumn("statecd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatecd);
                this.columncounty = new System.Data.DataColumn("county", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncounty);
                this.columncity = new System.Data.DataColumn("city", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncity);
                this.columnzip = new System.Data.DataColumn("zip", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnzip);
                this.columnname = new System.Data.DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnaddress = new System.Data.DataColumn("address", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnaddress);
                this.columngdtplus4 = new System.Data.DataColumn("gdtplus4", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngdtplus4);
                this.columngdtsad = new System.Data.DataColumn("gdtsad", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngdtsad);
                this.columngdtcity = new System.Data.DataColumn("gdtcity", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngdtcity);
                this.columngdtstatecd = new System.Data.DataColumn("gdtstatecd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngdtstatecd);
                this.columngdtpcode = new System.Data.DataColumn("gdtpcode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngdtpcode);
                this.columngdtlat = new System.Data.DataColumn("gdtlat", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngdtlat);
                this.columngdtlong = new System.Data.DataColumn("gdtlong", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngdtlong);
                this.columngdtxin = new System.Data.DataColumn("gdtxin", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngdtxin);
                this.columngdtstat = new System.Data.DataColumn("gdtstat", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngdtstat);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrefnum}, true));
                this.columnrefnum.AllowDBNull = false;
                this.columnrefnum.Unique = true;
                this.columnstatecd.MaxLength = 2;
                this.columncounty.AllowDBNull = false;
                this.columncounty.MaxLength = 24;
                this.columncity.AllowDBNull = false;
                this.columncity.MaxLength = 36;
                this.columnzip.MaxLength = 5;
                this.columnname.AllowDBNull = false;
                this.columnname.MaxLength = 72;
                this.columnaddress.AllowDBNull = false;
                this.columnaddress.MaxLength = 72;
                this.columngdtplus4.MaxLength = 4;
                this.columngdtsad.MaxLength = 72;
                this.columngdtcity.MaxLength = 32;
                this.columngdtstatecd.MaxLength = 2;
                this.columngdtpcode.MaxLength = 5;
                this.columngdtxin.MaxLength = 1;
                this.columngdtstat.AllowDBNull = false;
                this.columngdtstat.MaxLength = 2;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEOCODEMRow NewGEOCODEMRow() {
                return ((GEOCODEMRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GEOCODEMRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GEOCODEMRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GEOCODEMRowChanged != null)) {
                    this.GEOCODEMRowChanged(this, new GEOCODEMRowChangeEvent(((GEOCODEMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GEOCODEMRowChanging != null)) {
                    this.GEOCODEMRowChanging(this, new GEOCODEMRowChangeEvent(((GEOCODEMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GEOCODEMRowDeleted != null)) {
                    this.GEOCODEMRowDeleted(this, new GEOCODEMRowChangeEvent(((GEOCODEMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GEOCODEMRowDeleting != null)) {
                    this.GEOCODEMRowDeleting(this, new GEOCODEMRowChangeEvent(((GEOCODEMRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGEOCODEMRow(GEOCODEMRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NrhpDatabase ds = new NrhpDatabase();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GEOCODEMDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class APCRITDRow : System.Data.DataRow {
            
            private APCRITDDataTable tableAPCRITD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal APCRITDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAPCRITD = ((APCRITDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tableAPCRITD.refnumColumn]));
                }
                set {
                    this[this.tableAPCRITD.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string apcritcd {
                get {
                    return ((string)(this[this.tableAPCRITD.apcritcdColumn]));
                }
                set {
                    this[this.tableAPCRITD.apcritcdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public APCRITMRow APCRITMRow {
                get {
                    return ((APCRITMRow)(this.GetParentRow(this.Table.ParentRelations["FK_APCRITD_APCRITM"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_APCRITD_APCRITM"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_APCRITD_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_APCRITD_PROPMAIN"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class STATEMRow : System.Data.DataRow {
            
            private STATEMDataTable tableSTATEM;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STATEMRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSTATEM = ((STATEMDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string statecd {
                get {
                    return ((string)(this[this.tableSTATEM.statecdColumn]));
                }
                set {
                    this[this.tableSTATEM.statecdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string state {
                get {
                    return ((string)(this[this.tableSTATEM.stateColumn]));
                }
                set {
                    this[this.tableSTATEM.stateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COUNTYDRow[] GetCOUNTYDRows() {
                return ((COUNTYDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_COUNTYD_STATEM"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OSTATEDRow[] GetOSTATEDRows() {
                return ((OSTATEDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_OSTATED_STATEM"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEOCODEMRow[] GetGEOCODEMRowsByFK_GEOCODEM_STATEM() {
                return ((GEOCODEMRow[])(base.GetChildRows(this.Table.ChildRelations["FK_GEOCODEM_STATEM"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEOCODEMRow[] GetGEOCODEMRowsByFK_GEOCODEM_STATEM1() {
                return ((GEOCODEMRow[])(base.GetChildRows(this.Table.ChildRelations["FK_GEOCODEM_STATEM1"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class APCRITMRow : System.Data.DataRow {
            
            private APCRITMDataTable tableAPCRITM;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal APCRITMRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAPCRITM = ((APCRITMDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string apcritcd {
                get {
                    return ((string)(this[this.tableAPCRITM.apcritcdColumn]));
                }
                set {
                    this[this.tableAPCRITM.apcritcdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string apcrit {
                get {
                    return ((string)(this[this.tableAPCRITM.apcritColumn]));
                }
                set {
                    this[this.tableAPCRITM.apcritColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public APCRITDRow[] GetAPCRITDRows() {
                return ((APCRITDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_APCRITD_APCRITM"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ARCHTECDRow : System.Data.DataRow {
            
            private ARCHTECDDataTable tableARCHTECD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ARCHTECDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableARCHTECD = ((ARCHTECDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tableARCHTECD.refnumColumn]));
                }
                set {
                    this[this.tableARCHTECD.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string architect {
                get {
                    return ((string)(this[this.tableARCHTECD.architectColumn]));
                }
                set {
                    this[this.tableARCHTECD.architectColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CleanName {
                get {
                    try {
                        return ((string)(this[this.tableARCHTECD.CleanNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CleanName\' in table \'ARCHTECD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableARCHTECD.CleanNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_ARCHTECD_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ARCHTECD_PROPMAIN"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCleanNameNull() {
                return this.IsNull(this.tableARCHTECD.CleanNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCleanNameNull() {
                this[this.tableARCHTECD.CleanNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AREASGDRow : System.Data.DataRow {
            
            private AREASGDDataTable tableAREASGD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AREASGDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAREASGD = ((AREASGDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tableAREASGD.refnumColumn]));
                }
                set {
                    this[this.tableAREASGD.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int areasgcd {
                get {
                    return ((int)(this[this.tableAREASGD.areasgcdColumn]));
                }
                set {
                    this[this.tableAREASGD.areasgcdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AREASGMRow AREASGMRow {
                get {
                    return ((AREASGMRow)(this.GetParentRow(this.Table.ParentRelations["FK_AREASGD_AREASGM"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_AREASGD_AREASGM"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_AREASGD_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_AREASGD_PROPMAIN"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AREASGMRow : System.Data.DataRow {
            
            private AREASGMDataTable tableAREASGM;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AREASGMRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAREASGM = ((AREASGMDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int areasgcd {
                get {
                    return ((int)(this[this.tableAREASGM.areasgcdColumn]));
                }
                set {
                    this[this.tableAREASGM.areasgcdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string areasg {
                get {
                    return ((string)(this[this.tableAREASGM.areasgColumn]));
                }
                set {
                    this[this.tableAREASGM.areasgColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AREASGDRow[] GetAREASGDRows() {
                return ((AREASGDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_AREASGD_AREASGM"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CERTMRow : System.Data.DataRow {
            
            private CERTMDataTable tableCERTM;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CERTMRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCERTM = ((CERTMDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string certcd {
                get {
                    return ((string)(this[this.tableCERTM.certcdColumn]));
                }
                set {
                    this[this.tableCERTM.certcdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cert {
                get {
                    try {
                        return ((string)(this[this.tableCERTM.certColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'cert\' in table \'CERTM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCERTM.certColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscertNull() {
                return this.IsNull(this.tableCERTM.certColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcertNull() {
                this[this.tableCERTM.certColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHCERTDRow[] GetOTHCERTDRows() {
                return ((OTHCERTDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_OTHCERTD_CERTM"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow[] GetPROPMAINRows() {
                return ((PROPMAINRow[])(base.GetChildRows(this.Table.ChildRelations["FK_PROPMAIN_CERTM"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CFUNCDRow : System.Data.DataRow {
            
            private CFUNCDDataTable tableCFUNCD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CFUNCDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCFUNCD = ((CFUNCDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tableCFUNCD.refnumColumn]));
                }
                set {
                    this[this.tableCFUNCD.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cfunccd {
                get {
                    return ((string)(this[this.tableCFUNCD.cfunccdColumn]));
                }
                set {
                    this[this.tableCFUNCD.cfunccdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FUNCMRow FUNCMRow {
                get {
                    return ((FUNCMRow)(this.GetParentRow(this.Table.ParentRelations["FK_CFUNCD_FUNCM"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CFUNCD_FUNCM"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_CFUNCD_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CFUNCD_PROPMAIN"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class COUNTYDRow : System.Data.DataRow {
            
            private COUNTYDDataTable tableCOUNTYD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COUNTYDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCOUNTYD = ((COUNTYDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tableCOUNTYD.refnumColumn]));
                }
                set {
                    this[this.tableCOUNTYD.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string countycd {
                get {
                    return ((string)(this[this.tableCOUNTYD.countycdColumn]));
                }
                set {
                    this[this.tableCOUNTYD.countycdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string city {
                get {
                    return ((string)(this[this.tableCOUNTYD.cityColumn]));
                }
                set {
                    this[this.tableCOUNTYD.cityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool vicinity {
                get {
                    return ((bool)(this[this.tableCOUNTYD.vicinityColumn]));
                }
                set {
                    this[this.tableCOUNTYD.vicinityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string statecd {
                get {
                    return ((string)(this[this.tableCOUNTYD.statecdColumn]));
                }
                set {
                    this[this.tableCOUNTYD.statecdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool primeflg {
                get {
                    return ((bool)(this[this.tableCOUNTYD.primeflgColumn]));
                }
                set {
                    this[this.tableCOUNTYD.primeflgColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COUNTYMRow COUNTYMRow {
                get {
                    return ((COUNTYMRow)(this.GetParentRow(this.Table.ParentRelations["FK_COUNTYD_COUNTYM"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_COUNTYD_COUNTYM"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_COUNTYD_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_COUNTYD_PROPMAIN"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STATEMRow STATEMRow {
                get {
                    return ((STATEMRow)(this.GetParentRow(this.Table.ParentRelations["FK_COUNTYD_STATEM"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_COUNTYD_STATEM"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class COUNTYMRow : System.Data.DataRow {
            
            private COUNTYMDataTable tableCOUNTYM;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COUNTYMRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCOUNTYM = ((COUNTYMDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string countycd {
                get {
                    return ((string)(this[this.tableCOUNTYM.countycdColumn]));
                }
                set {
                    this[this.tableCOUNTYM.countycdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string county {
                get {
                    return ((string)(this[this.tableCOUNTYM.countyColumn]));
                }
                set {
                    this[this.tableCOUNTYM.countyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cntytype {
                get {
                    return ((string)(this[this.tableCOUNTYM.cntytypeColumn]));
                }
                set {
                    this[this.tableCOUNTYM.cntytypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COUNTYDRow[] GetCOUNTYDRows() {
                return ((COUNTYDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_COUNTYD_COUNTYM"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CRITCNDRow : System.Data.DataRow {
            
            private CRITCNDDataTable tableCRITCND;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CRITCNDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCRITCND = ((CRITCNDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tableCRITCND.refnumColumn]));
                }
                set {
                    this[this.tableCRITCND.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string critcncd {
                get {
                    return ((string)(this[this.tableCRITCND.critcncdColumn]));
                }
                set {
                    this[this.tableCRITCND.critcncdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CRITCNMRow CRITCNMRow {
                get {
                    return ((CRITCNMRow)(this.GetParentRow(this.Table.ParentRelations["FK_CRITCND_CRITCNM"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CRITCND_CRITCNM"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_CRITCND_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CRITCND_PROPMAIN"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CRITCNMRow : System.Data.DataRow {
            
            private CRITCNMDataTable tableCRITCNM;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CRITCNMRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCRITCNM = ((CRITCNMDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string critcncd {
                get {
                    return ((string)(this[this.tableCRITCNM.critcncdColumn]));
                }
                set {
                    this[this.tableCRITCNM.critcncdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string critcn {
                get {
                    return ((string)(this[this.tableCRITCNM.critcnColumn]));
                }
                set {
                    this[this.tableCRITCNM.critcnColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CRITCNDRow[] GetCRITCNDRows() {
                return ((CRITCNDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CRITCND_CRITCNM"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CSFUNCDRow : System.Data.DataRow {
            
            private CSFUNCDDataTable tableCSFUNCD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CSFUNCDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCSFUNCD = ((CSFUNCDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tableCSFUNCD.refnumColumn]));
                }
                set {
                    this[this.tableCSFUNCD.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string csfunccd {
                get {
                    return ((string)(this[this.tableCSFUNCD.csfunccdColumn]));
                }
                set {
                    this[this.tableCSFUNCD.csfunccdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FUNCMRow FUNCMRow {
                get {
                    return ((FUNCMRow)(this.GetParentRow(this.Table.ParentRelations["FK_CSFUNCD_FUNCM"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CSFUNCD_FUNCM"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_CSFUNCD_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CSFUNCD_PROPMAIN"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CULTAFFDRow : System.Data.DataRow {
            
            private CULTAFFDDataTable tableCULTAFFD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CULTAFFDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCULTAFFD = ((CULTAFFDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tableCULTAFFD.refnumColumn]));
                }
                set {
                    this[this.tableCULTAFFD.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cultaffl {
                get {
                    return ((string)(this[this.tableCULTAFFD.cultafflColumn]));
                }
                set {
                    this[this.tableCULTAFFD.cultafflColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_CULTAFFD_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CULTAFFD_PROPMAIN"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FEDAGDRow : System.Data.DataRow {
            
            private FEDAGDDataTable tableFEDAGD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FEDAGDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFEDAGD = ((FEDAGDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tableFEDAGD.refnumColumn]));
                }
                set {
                    this[this.tableFEDAGD.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fedagcd {
                get {
                    return ((string)(this[this.tableFEDAGD.fedagcdColumn]));
                }
                set {
                    this[this.tableFEDAGD.fedagcdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_FEDAGD_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_FEDAGD_PROPMAIN"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEDAGMRow FEDAGMRow {
                get {
                    return ((FEDAGMRow)(this.GetParentRow(this.Table.ParentRelations["FK_FEDAGD_FEDAGM"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_FEDAGD_FEDAGM"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FEDAGMRow : System.Data.DataRow {
            
            private FEDAGMDataTable tableFEDAGM;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FEDAGMRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFEDAGM = ((FEDAGMDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fedagcd {
                get {
                    return ((string)(this[this.tableFEDAGM.fedagcdColumn]));
                }
                set {
                    this[this.tableFEDAGM.fedagcdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fedag {
                get {
                    return ((string)(this[this.tableFEDAGM.fedagColumn]));
                }
                set {
                    this[this.tableFEDAGM.fedagColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEDAGDRow[] GetFEDAGDRows() {
                return ((FEDAGDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_FEDAGD_FEDAGM"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FUNCMRow : System.Data.DataRow {
            
            private FUNCMDataTable tableFUNCM;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FUNCMRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFUNCM = ((FUNCMDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string funccd {
                get {
                    return ((string)(this[this.tableFUNCM.funccdColumn]));
                }
                set {
                    this[this.tableFUNCM.funccdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string func {
                get {
                    return ((string)(this[this.tableFUNCM.funcColumn]));
                }
                set {
                    this[this.tableFUNCM.funcColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CFUNCDRow[] GetCFUNCDRows() {
                return ((CFUNCDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CFUNCD_FUNCM"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CSFUNCDRow[] GetCSFUNCDRows() {
                return ((CSFUNCDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CSFUNCD_FUNCM"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HFUNCDRow[] GetHFUNCDRows() {
                return ((HFUNCDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_HFUNCD_FUNCM"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HSFUNCDRow[] GetHSFUNCDRows() {
                return ((HSFUNCDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_HSFUNCD_FUNCM"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HFUNCDRow : System.Data.DataRow {
            
            private HFUNCDDataTable tableHFUNCD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HFUNCDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHFUNCD = ((HFUNCDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tableHFUNCD.refnumColumn]));
                }
                set {
                    this[this.tableHFUNCD.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string hfunccd {
                get {
                    return ((string)(this[this.tableHFUNCD.hfunccdColumn]));
                }
                set {
                    this[this.tableHFUNCD.hfunccdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FUNCMRow FUNCMRow {
                get {
                    return ((FUNCMRow)(this.GetParentRow(this.Table.ParentRelations["FK_HFUNCD_FUNCM"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_HFUNCD_FUNCM"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_HFUNCD_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_HFUNCD_PROPMAIN"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HSFUNCDRow : System.Data.DataRow {
            
            private HSFUNCDDataTable tableHSFUNCD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HSFUNCDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHSFUNCD = ((HSFUNCDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tableHSFUNCD.refnumColumn]));
                }
                set {
                    this[this.tableHSFUNCD.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string hsfunccd {
                get {
                    return ((string)(this[this.tableHSFUNCD.hsfunccdColumn]));
                }
                set {
                    this[this.tableHSFUNCD.hsfunccdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FUNCMRow FUNCMRow {
                get {
                    return ((FUNCMRow)(this.GetParentRow(this.Table.ParentRelations["FK_HSFUNCD_FUNCM"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_HSFUNCD_FUNCM"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_HSFUNCD_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_HSFUNCD_PROPMAIN"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LEVSGDRow : System.Data.DataRow {
            
            private LEVSGDDataTable tableLEVSGD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LEVSGDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLEVSGD = ((LEVSGDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tableLEVSGD.refnumColumn]));
                }
                set {
                    this[this.tableLEVSGD.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string levsgcd {
                get {
                    return ((string)(this[this.tableLEVSGD.levsgcdColumn]));
                }
                set {
                    this[this.tableLEVSGD.levsgcdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LEVSGMRow LEVSGMRow {
                get {
                    return ((LEVSGMRow)(this.GetParentRow(this.Table.ParentRelations["FK_LEVSGD_LEVSGM"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LEVSGD_LEVSGM"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_LEVSGD_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LEVSGD_PROPMAIN"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LEVSGMRow : System.Data.DataRow {
            
            private LEVSGMDataTable tableLEVSGM;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LEVSGMRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLEVSGM = ((LEVSGMDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string levsgcd {
                get {
                    return ((string)(this[this.tableLEVSGM.levsgcdColumn]));
                }
                set {
                    this[this.tableLEVSGM.levsgcdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string levsg {
                get {
                    return ((string)(this[this.tableLEVSGM.levsgColumn]));
                }
                set {
                    this[this.tableLEVSGM.levsgColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LEVSGDRow[] GetLEVSGDRows() {
                return ((LEVSGDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LEVSGD_LEVSGM"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MATDRow : System.Data.DataRow {
            
            private MATDDataTable tableMATD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MATDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMATD = ((MATDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tableMATD.refnumColumn]));
                }
                set {
                    this[this.tableMATD.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int matcd {
                get {
                    return ((int)(this[this.tableMATD.matcdColumn]));
                }
                set {
                    this[this.tableMATD.matcdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string matypecd {
                get {
                    return ((string)(this[this.tableMATD.matypecdColumn]));
                }
                set {
                    this[this.tableMATD.matypecdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATMRow MATMRow {
                get {
                    return ((MATMRow)(this.GetParentRow(this.Table.ParentRelations["FK_MATD_MATM"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_MATD_MATM"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_MATD_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_MATD_PROPMAIN"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MATMRow : System.Data.DataRow {
            
            private MATMDataTable tableMATM;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MATMRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMATM = ((MATMDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int matcd {
                get {
                    return ((int)(this[this.tableMATM.matcdColumn]));
                }
                set {
                    this[this.tableMATM.matcdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mat {
                get {
                    return ((string)(this[this.tableMATM.matColumn]));
                }
                set {
                    this[this.tableMATM.matColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATDRow[] GetMATDRows() {
                return ((MATDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_MATD_MATM"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NOMNADRow : System.Data.DataRow {
            
            private NOMNADDataTable tableNOMNAD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NOMNADRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNOMNAD = ((NOMNADDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tableNOMNAD.refnumColumn]));
                }
                set {
                    this[this.tableNOMNAD.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nomnacd {
                get {
                    return ((string)(this[this.tableNOMNAD.nomnacdColumn]));
                }
                set {
                    this[this.tableNOMNAD.nomnacdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNAMRow NOMNAMRow {
                get {
                    return ((NOMNAMRow)(this.GetParentRow(this.Table.ParentRelations["FK_NOMNAD_NOMNAM"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_NOMNAD_NOMNAM"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_NOMNAD_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_NOMNAD_PROPMAIN"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NOMNAMRow : System.Data.DataRow {
            
            private NOMNAMDataTable tableNOMNAM;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NOMNAMRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNOMNAM = ((NOMNAMDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nomnacd {
                get {
                    return ((string)(this[this.tableNOMNAM.nomnacdColumn]));
                }
                set {
                    this[this.tableNOMNAM.nomnacdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nomna {
                get {
                    return ((string)(this[this.tableNOMNAM.nomnaColumn]));
                }
                set {
                    this[this.tableNOMNAM.nomnaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNADRow[] GetNOMNADRows() {
                return ((NOMNADRow[])(base.GetChildRows(this.Table.ChildRelations["FK_NOMNAD_NOMNAM"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NOMNAMEDRow : System.Data.DataRow {
            
            private NOMNAMEDDataTable tableNOMNAMED;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NOMNAMEDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNOMNAMED = ((NOMNAMEDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tableNOMNAMED.refnumColumn]));
                }
                set {
                    this[this.tableNOMNAMED.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nomname {
                get {
                    return ((string)(this[this.tableNOMNAMED.nomnameColumn]));
                }
                set {
                    this[this.tableNOMNAMED.nomnameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_NOMNAMED_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_NOMNAMED_PROPMAIN"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OSTATEDRow : System.Data.DataRow {
            
            private OSTATEDDataTable tableOSTATED;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OSTATEDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOSTATED = ((OSTATEDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tableOSTATED.refnumColumn]));
                }
                set {
                    this[this.tableOSTATED.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string statecd {
                get {
                    return ((string)(this[this.tableOSTATED.statecdColumn]));
                }
                set {
                    this[this.tableOSTATED.statecdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_OSTATED_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_OSTATED_PROPMAIN"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STATEMRow STATEMRow {
                get {
                    return ((STATEMRow)(this.GetParentRow(this.Table.ParentRelations["FK_OSTATED_STATEM"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_OSTATED_STATEM"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OTHCERTDRow : System.Data.DataRow {
            
            private OTHCERTDDataTable tableOTHCERTD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OTHCERTDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOTHCERTD = ((OTHCERTDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tableOTHCERTD.refnumColumn]));
                }
                set {
                    this[this.tableOTHCERTD.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ocertcd {
                get {
                    return ((string)(this[this.tableOTHCERTD.ocertcdColumn]));
                }
                set {
                    this[this.tableOTHCERTD.ocertcdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ocertdte {
                get {
                    return ((System.DateTime)(this[this.tableOTHCERTD.ocertdteColumn]));
                }
                set {
                    this[this.tableOTHCERTD.ocertdteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CERTMRow CERTMRow {
                get {
                    return ((CERTMRow)(this.GetParentRow(this.Table.ParentRelations["FK_OTHCERTD_CERTM"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_OTHCERTD_CERTM"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_OTHCERTD_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_OTHCERTD_PROPMAIN"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OTHDOCDRow : System.Data.DataRow {
            
            private OTHDOCDDataTable tableOTHDOCD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OTHDOCDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOTHDOCD = ((OTHDOCDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tableOTHDOCD.refnumColumn]));
                }
                set {
                    this[this.tableOTHDOCD.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string othdoccd {
                get {
                    return ((string)(this[this.tableOTHDOCD.othdoccdColumn]));
                }
                set {
                    this[this.tableOTHDOCD.othdoccdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHDOCMRow OTHDOCMRow {
                get {
                    return ((OTHDOCMRow)(this.GetParentRow(this.Table.ParentRelations["FK_OTHDOCD_OTHDOCM"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_OTHDOCD_OTHDOCM"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_OTHDOCD_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_OTHDOCD_PROPMAIN"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OTHDOCMRow : System.Data.DataRow {
            
            private OTHDOCMDataTable tableOTHDOCM;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OTHDOCMRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOTHDOCM = ((OTHDOCMDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string othdoccd {
                get {
                    return ((string)(this[this.tableOTHDOCM.othdoccdColumn]));
                }
                set {
                    this[this.tableOTHDOCM.othdoccdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string othdoc {
                get {
                    return ((string)(this[this.tableOTHDOCM.othdocColumn]));
                }
                set {
                    this[this.tableOTHDOCM.othdocColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHDOCDRow[] GetOTHDOCDRows() {
                return ((OTHDOCDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_OTHDOCD_OTHDOCM"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OTHNAMEDRow : System.Data.DataRow {
            
            private OTHNAMEDDataTable tableOTHNAMED;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OTHNAMEDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOTHNAMED = ((OTHNAMEDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tableOTHNAMED.refnumColumn]));
                }
                set {
                    this[this.tableOTHNAMED.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string othrname {
                get {
                    return ((string)(this[this.tableOTHNAMED.othrnameColumn]));
                }
                set {
                    this[this.tableOTHNAMED.othrnameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_OTHNAMED_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_OTHNAMED_PROPMAIN"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OWNERDRow : System.Data.DataRow {
            
            private OWNERDDataTable tableOWNERD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OWNERDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOWNERD = ((OWNERDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tableOWNERD.refnumColumn]));
                }
                set {
                    this[this.tableOWNERD.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ownercd {
                get {
                    return ((string)(this[this.tableOWNERD.ownercdColumn]));
                }
                set {
                    this[this.tableOWNERD.ownercdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERMRow OWNERMRow {
                get {
                    return ((OWNERMRow)(this.GetParentRow(this.Table.ParentRelations["FK_OWNERD_OWNERM"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_OWNERD_OWNERM"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_OWNERD_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_OWNERD_PROPMAIN"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OWNERMRow : System.Data.DataRow {
            
            private OWNERMDataTable tableOWNERM;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OWNERMRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOWNERM = ((OWNERMDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ownercd {
                get {
                    return ((string)(this[this.tableOWNERM.ownercdColumn]));
                }
                set {
                    this[this.tableOWNERM.ownercdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string owner {
                get {
                    return ((string)(this[this.tableOWNERM.ownerColumn]));
                }
                set {
                    this[this.tableOWNERM.ownerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERDRow[] GetOWNERDRows() {
                return ((OWNERDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_OWNERD_OWNERM"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PERIODDRow : System.Data.DataRow {
            
            private PERIODDDataTable tablePERIODD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PERIODDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePERIODD = ((PERIODDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tablePERIODD.refnumColumn]));
                }
                set {
                    this[this.tablePERIODD.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int periodcd {
                get {
                    return ((int)(this[this.tablePERIODD.periodcdColumn]));
                }
                set {
                    this[this.tablePERIODD.periodcdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERIODMRow PERIODMRow {
                get {
                    return ((PERIODMRow)(this.GetParentRow(this.Table.ParentRelations["FK_PERIODD_PERIODM"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_PERIODD_PERIODM"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_PERIODD_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_PERIODD_PROPMAIN"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PERIODMRow : System.Data.DataRow {
            
            private PERIODMDataTable tablePERIODM;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PERIODMRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePERIODM = ((PERIODMDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int periodcd {
                get {
                    return ((int)(this[this.tablePERIODM.periodcdColumn]));
                }
                set {
                    this[this.tablePERIODM.periodcdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string period {
                get {
                    return ((string)(this[this.tablePERIODM.periodColumn]));
                }
                set {
                    this[this.tablePERIODM.periodColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERIODDRow[] GetPERIODDRows() {
                return ((PERIODDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_PERIODD_PERIODM"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PossibleArticlesRow : System.Data.DataRow {
            
            private PossibleArticlesDataTable tablePossibleArticles;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PossibleArticlesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePossibleArticles = ((PossibleArticlesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tablePossibleArticles.refnumColumn]));
                }
                set {
                    this[this.tablePossibleArticles.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ArticleID {
                get {
                    return ((int)(this[this.tablePossibleArticles.ArticleIDColumn]));
                }
                set {
                    this[this.tablePossibleArticles.ArticleIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArticleContent {
                get {
                    return ((string)(this[this.tablePossibleArticles.ArticleContentColumn]));
                }
                set {
                    this[this.tablePossibleArticles.ArticleContentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FoundOn {
                get {
                    return ((System.DateTime)(this[this.tablePossibleArticles.FoundOnColumn]));
                }
                set {
                    this[this.tablePossibleArticles.FoundOnColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FoundReason {
                get {
                    return ((string)(this[this.tablePossibleArticles.FoundReasonColumn]));
                }
                set {
                    this[this.tablePossibleArticles.FoundReasonColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NotAMatch {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePossibleArticles.NotAMatchColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NotAMatch\' in table \'PossibleArticles\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePossibleArticles.NotAMatchColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SeeAlso {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePossibleArticles.SeeAlsoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SeeAlso\' in table \'PossibleArticles\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePossibleArticles.SeeAlsoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_PossibleArticles_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_PossibleArticles_PROPMAIN"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotAMatchNull() {
                return this.IsNull(this.tablePossibleArticles.NotAMatchColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotAMatchNull() {
                this[this.tablePossibleArticles.NotAMatchColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeeAlsoNull() {
                return this.IsNull(this.tablePossibleArticles.SeeAlsoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeeAlsoNull() {
                this[this.tablePossibleArticles.SeeAlsoColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PROPMAINRow : System.Data.DataRow {
            
            private PROPMAINDataTable tablePROPMAIN;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PROPMAINRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePROPMAIN = ((PROPMAINDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tablePROPMAIN.refnumColumn]));
                }
                set {
                    this[this.tablePROPMAIN.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string resname {
                get {
                    return ((string)(this[this.tablePROPMAIN.resnameColumn]));
                }
                set {
                    this[this.tablePROPMAIN.resnameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string address {
                get {
                    try {
                        return ((string)(this[this.tablePROPMAIN.addressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'address\' in table \'PROPMAIN\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROPMAIN.addressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool restrict {
                get {
                    return ((bool)(this[this.tablePROPMAIN.restrictColumn]));
                }
                set {
                    this[this.tablePROPMAIN.restrictColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string retypecd {
                get {
                    try {
                        return ((string)(this[this.tablePROPMAIN.retypecdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'retypecd\' in table \'PROPMAIN\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROPMAIN.retypecdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int numcbldg {
                get {
                    try {
                        return ((int)(this[this.tablePROPMAIN.numcbldgColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'numcbldg\' in table \'PROPMAIN\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROPMAIN.numcbldgColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int numcsite {
                get {
                    try {
                        return ((int)(this[this.tablePROPMAIN.numcsiteColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'numcsite\' in table \'PROPMAIN\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROPMAIN.numcsiteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int numcstrc {
                get {
                    try {
                        return ((int)(this[this.tablePROPMAIN.numcstrcColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'numcstrc\' in table \'PROPMAIN\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROPMAIN.numcstrcColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int numcobj {
                get {
                    try {
                        return ((int)(this[this.tablePROPMAIN.numcobjColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'numcobj\' in table \'PROPMAIN\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROPMAIN.numcobjColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int numnbldg {
                get {
                    try {
                        return ((int)(this[this.tablePROPMAIN.numnbldgColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'numnbldg\' in table \'PROPMAIN\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROPMAIN.numnbldgColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int numnsite {
                get {
                    try {
                        return ((int)(this[this.tablePROPMAIN.numnsiteColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'numnsite\' in table \'PROPMAIN\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROPMAIN.numnsiteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int numnstrc {
                get {
                    try {
                        return ((int)(this[this.tablePROPMAIN.numnstrcColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'numnstrc\' in table \'PROPMAIN\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROPMAIN.numnstrcColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int numnobj {
                get {
                    try {
                        return ((int)(this[this.tablePROPMAIN.numnobjColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'numnobj\' in table \'PROPMAIN\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROPMAIN.numnobjColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string parknmcd {
                get {
                    try {
                        return ((string)(this[this.tablePROPMAIN.parknmcdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'parknmcd\' in table \'PROPMAIN\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROPMAIN.parknmcdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string certcd {
                get {
                    return ((string)(this[this.tablePROPMAIN.certcdColumn]));
                }
                set {
                    this[this.tablePROPMAIN.certcdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime certdate {
                get {
                    return ((System.DateTime)(this[this.tablePROPMAIN.certdateColumn]));
                }
                set {
                    this[this.tablePROPMAIN.certdateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string descothr {
                get {
                    try {
                        return ((string)(this[this.tablePROPMAIN.descothrColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'descothr\' in table \'PROPMAIN\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROPMAIN.descothrColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int acre {
                get {
                    try {
                        return ((int)(this[this.tablePROPMAIN.acreColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'acre\' in table \'PROPMAIN\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROPMAIN.acreColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string multname {
                get {
                    try {
                        return ((string)(this[this.tablePROPMAIN.multnameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'multname\' in table \'PROPMAIN\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROPMAIN.multnameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ArticleID {
                get {
                    try {
                        return ((int)(this[this.tablePROPMAIN.ArticleIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ArticleID\' in table \'PROPMAIN\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROPMAIN.ArticleIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CleanName {
                get {
                    try {
                        return ((string)(this[this.tablePROPMAIN.CleanNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CleanName\' in table \'PROPMAIN\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROPMAIN.CleanNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MainArticleRefnum {
                get {
                    try {
                        return ((int)(this[this.tablePROPMAIN.MainArticleRefnumColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MainArticleRefnum\' in table \'PROPMAIN\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROPMAIN.MainArticleRefnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrimaryCity {
                get {
                    return ((string)(this[this.tablePROPMAIN.PrimaryCityColumn]));
                }
                set {
                    this[this.tablePROPMAIN.PrimaryCityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrimaryCounty {
                get {
                    return ((string)(this[this.tablePROPMAIN.PrimaryCountyColumn]));
                }
                set {
                    this[this.tablePROPMAIN.PrimaryCountyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrimaryState {
                get {
                    return ((string)(this[this.tablePROPMAIN.PrimaryStateColumn]));
                }
                set {
                    this[this.tablePROPMAIN.PrimaryStateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PrimaryVicinity {
                get {
                    return ((bool)(this[this.tablePROPMAIN.PrimaryVicinityColumn]));
                }
                set {
                    this[this.tablePROPMAIN.PrimaryVicinityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CERTMRow CERTMRow {
                get {
                    return ((CERTMRow)(this.GetParentRow(this.Table.ParentRelations["FK_PROPMAIN_CERTM"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_PROPMAIN_CERTM"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RETYPEMRow RETYPEMRow {
                get {
                    return ((RETYPEMRow)(this.GetParentRow(this.Table.ParentRelations["FK_PROPMAIN_RETYPEM"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_PROPMAIN_RETYPEM"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRowParent {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_PROPMAIN_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_PROPMAIN_PROPMAIN"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEOCODEMRow GEOCODEMRow {
                get {
                    return ((GEOCODEMRow)(this.GetParentRow(this.Table.ParentRelations["FK_GEOCODEM_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_GEOCODEM_PROPMAIN"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaddressNull() {
                return this.IsNull(this.tablePROPMAIN.addressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaddressNull() {
                this[this.tablePROPMAIN.addressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsretypecdNull() {
                return this.IsNull(this.tablePROPMAIN.retypecdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetretypecdNull() {
                this[this.tablePROPMAIN.retypecdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnumcbldgNull() {
                return this.IsNull(this.tablePROPMAIN.numcbldgColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnumcbldgNull() {
                this[this.tablePROPMAIN.numcbldgColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnumcsiteNull() {
                return this.IsNull(this.tablePROPMAIN.numcsiteColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnumcsiteNull() {
                this[this.tablePROPMAIN.numcsiteColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnumcstrcNull() {
                return this.IsNull(this.tablePROPMAIN.numcstrcColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnumcstrcNull() {
                this[this.tablePROPMAIN.numcstrcColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnumcobjNull() {
                return this.IsNull(this.tablePROPMAIN.numcobjColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnumcobjNull() {
                this[this.tablePROPMAIN.numcobjColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnumnbldgNull() {
                return this.IsNull(this.tablePROPMAIN.numnbldgColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnumnbldgNull() {
                this[this.tablePROPMAIN.numnbldgColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnumnsiteNull() {
                return this.IsNull(this.tablePROPMAIN.numnsiteColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnumnsiteNull() {
                this[this.tablePROPMAIN.numnsiteColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnumnstrcNull() {
                return this.IsNull(this.tablePROPMAIN.numnstrcColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnumnstrcNull() {
                this[this.tablePROPMAIN.numnstrcColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnumnobjNull() {
                return this.IsNull(this.tablePROPMAIN.numnobjColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnumnobjNull() {
                this[this.tablePROPMAIN.numnobjColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsparknmcdNull() {
                return this.IsNull(this.tablePROPMAIN.parknmcdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetparknmcdNull() {
                this[this.tablePROPMAIN.parknmcdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescothrNull() {
                return this.IsNull(this.tablePROPMAIN.descothrColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescothrNull() {
                this[this.tablePROPMAIN.descothrColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsacreNull() {
                return this.IsNull(this.tablePROPMAIN.acreColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetacreNull() {
                this[this.tablePROPMAIN.acreColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmultnameNull() {
                return this.IsNull(this.tablePROPMAIN.multnameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmultnameNull() {
                this[this.tablePROPMAIN.multnameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArticleIDNull() {
                return this.IsNull(this.tablePROPMAIN.ArticleIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArticleIDNull() {
                this[this.tablePROPMAIN.ArticleIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCleanNameNull() {
                return this.IsNull(this.tablePROPMAIN.CleanNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCleanNameNull() {
                this[this.tablePROPMAIN.CleanNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMainArticleRefnumNull() {
                return this.IsNull(this.tablePROPMAIN.MainArticleRefnumColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMainArticleRefnumNull() {
                this[this.tablePROPMAIN.MainArticleRefnumColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PossibleArticlesRow[] GetPossibleArticlesRows() {
                return ((PossibleArticlesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_PossibleArticles_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEDAGDRow[] GetFEDAGDRows() {
                return ((FEDAGDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_FEDAGD_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public APCRITDRow[] GetAPCRITDRows() {
                return ((APCRITDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_APCRITD_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARCHTECDRow[] GetARCHTECDRows() {
                return ((ARCHTECDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ARCHTECD_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AREASGDRow[] GetAREASGDRows() {
                return ((AREASGDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_AREASGD_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CFUNCDRow[] GetCFUNCDRows() {
                return ((CFUNCDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CFUNCD_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COUNTYDRow[] GetCOUNTYDRows() {
                return ((COUNTYDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_COUNTYD_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CRITCNDRow[] GetCRITCNDRows() {
                return ((CRITCNDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CRITCND_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CSFUNCDRow[] GetCSFUNCDRows() {
                return ((CSFUNCDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CSFUNCD_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CULTAFFDRow[] GetCULTAFFDRows() {
                return ((CULTAFFDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CULTAFFD_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HFUNCDRow[] GetHFUNCDRows() {
                return ((HFUNCDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_HFUNCD_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HSFUNCDRow[] GetHSFUNCDRows() {
                return ((HSFUNCDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_HSFUNCD_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LEVSGDRow[] GetLEVSGDRows() {
                return ((LEVSGDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LEVSGD_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATDRow[] GetMATDRows() {
                return ((MATDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_MATD_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNADRow[] GetNOMNADRows() {
                return ((NOMNADRow[])(base.GetChildRows(this.Table.ChildRelations["FK_NOMNAD_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNAMEDRow[] GetNOMNAMEDRows() {
                return ((NOMNAMEDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_NOMNAMED_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OSTATEDRow[] GetOSTATEDRows() {
                return ((OSTATEDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_OSTATED_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHCERTDRow[] GetOTHCERTDRows() {
                return ((OTHCERTDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_OTHCERTD_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHDOCDRow[] GetOTHDOCDRows() {
                return ((OTHDOCDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_OTHDOCD_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHNAMEDRow[] GetOTHNAMEDRows() {
                return ((OTHNAMEDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_OTHNAMED_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERDRow[] GetOWNERDRows() {
                return ((OWNERDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_OWNERD_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERIODDRow[] GetPERIODDRows() {
                return ((PERIODDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_PERIODD_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIGNAMEDRow[] GetSIGNAMEDRows() {
                return ((SIGNAMEDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SIGNAMED_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIGYEARDRow[] GetSIGYEARDRows() {
                return ((SIGYEARDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SIGYEARD_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow[] GetPROPMAINRows() {
                return ((PROPMAINRow[])(base.GetChildRows(this.Table.ChildRelations["FK_PROPMAIN_PROPMAIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARSTYLDRow[] GetARSTYLDRows() {
                return ((ARSTYLDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_PROPMAIN_ARSTYLD"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RETYPEMRow : System.Data.DataRow {
            
            private RETYPEMDataTable tableRETYPEM;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RETYPEMRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRETYPEM = ((RETYPEMDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string retypecd {
                get {
                    return ((string)(this[this.tableRETYPEM.retypecdColumn]));
                }
                set {
                    this[this.tableRETYPEM.retypecdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string retype {
                get {
                    return ((string)(this[this.tableRETYPEM.retypeColumn]));
                }
                set {
                    this[this.tableRETYPEM.retypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow[] GetPROPMAINRows() {
                return ((PROPMAINRow[])(base.GetChildRows(this.Table.ChildRelations["FK_PROPMAIN_RETYPEM"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SIGNAMEDRow : System.Data.DataRow {
            
            private SIGNAMEDDataTable tableSIGNAMED;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SIGNAMEDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSIGNAMED = ((SIGNAMEDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tableSIGNAMED.refnumColumn]));
                }
                set {
                    this[this.tableSIGNAMED.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string signame {
                get {
                    return ((string)(this[this.tableSIGNAMED.signameColumn]));
                }
                set {
                    this[this.tableSIGNAMED.signameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CleanName {
                get {
                    try {
                        return ((string)(this[this.tableSIGNAMED.CleanNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CleanName\' in table \'SIGNAMED\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIGNAMED.CleanNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableSIGNAMED.LastNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LastName\' in table \'SIGNAMED\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIGNAMED.LastNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableSIGNAMED.FirstNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FirstName\' in table \'SIGNAMED\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIGNAMED.FirstNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Suffix {
                get {
                    try {
                        return ((string)(this[this.tableSIGNAMED.SuffixColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Suffix\' in table \'SIGNAMED\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIGNAMED.SuffixColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Prefix {
                get {
                    try {
                        return ((string)(this[this.tableSIGNAMED.PrefixColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Prefix\' in table \'SIGNAMED\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIGNAMED.PrefixColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Middle {
                get {
                    try {
                        return ((string)(this[this.tableSIGNAMED.MiddleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Middle\' in table \'SIGNAMED\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIGNAMED.MiddleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OtherPerson {
                get {
                    try {
                        return ((string)(this[this.tableSIGNAMED.OtherPersonColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OtherPerson\' in table \'SIGNAMED\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIGNAMED.OtherPersonColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_SIGNAMED_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SIGNAMED_PROPMAIN"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCleanNameNull() {
                return this.IsNull(this.tableSIGNAMED.CleanNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCleanNameNull() {
                this[this.tableSIGNAMED.CleanNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastNameNull() {
                return this.IsNull(this.tableSIGNAMED.LastNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastNameNull() {
                this[this.tableSIGNAMED.LastNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableSIGNAMED.FirstNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tableSIGNAMED.FirstNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSuffixNull() {
                return this.IsNull(this.tableSIGNAMED.SuffixColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSuffixNull() {
                this[this.tableSIGNAMED.SuffixColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrefixNull() {
                return this.IsNull(this.tableSIGNAMED.PrefixColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrefixNull() {
                this[this.tableSIGNAMED.PrefixColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMiddleNull() {
                return this.IsNull(this.tableSIGNAMED.MiddleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMiddleNull() {
                this[this.tableSIGNAMED.MiddleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherPersonNull() {
                return this.IsNull(this.tableSIGNAMED.OtherPersonColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherPersonNull() {
                this[this.tableSIGNAMED.OtherPersonColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SIGYEARDRow : System.Data.DataRow {
            
            private SIGYEARDDataTable tableSIGYEARD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SIGYEARDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSIGYEARD = ((SIGYEARDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tableSIGYEARD.refnumColumn]));
                }
                set {
                    this[this.tableSIGYEARD.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool circa {
                get {
                    return ((bool)(this[this.tableSIGYEARD.circaColumn]));
                }
                set {
                    this[this.tableSIGYEARD.circaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short sigyear {
                get {
                    return ((short)(this[this.tableSIGYEARD.sigyearColumn]));
                }
                set {
                    this[this.tableSIGYEARD.sigyearColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_SIGYEARD_PROPMAIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SIGYEARD_PROPMAIN"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ARSTYLDRow : System.Data.DataRow {
            
            private ARSTYLDDataTable tableARSTYLD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ARSTYLDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableARSTYLD = ((ARSTYLDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tableARSTYLD.refnumColumn]));
                }
                set {
                    this[this.tableARSTYLD.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int arstylcd {
                get {
                    return ((int)(this[this.tableARSTYLD.arstylcdColumn]));
                }
                set {
                    this[this.tableARSTYLD.arstylcdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARSTYLMRow ARSTYLMRow {
                get {
                    return ((ARSTYLMRow)(this.GetParentRow(this.Table.ParentRelations["FK_ARSTYLD_ARSTYLM"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ARSTYLD_ARSTYLM"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow PROPMAINRow {
                get {
                    return ((PROPMAINRow)(this.GetParentRow(this.Table.ParentRelations["FK_PROPMAIN_ARSTYLD"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_PROPMAIN_ARSTYLD"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ARSTYLMRow : System.Data.DataRow {
            
            private ARSTYLMDataTable tableARSTYLM;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ARSTYLMRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableARSTYLM = ((ARSTYLMDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int arstylcd {
                get {
                    return ((int)(this[this.tableARSTYLM.arstylcdColumn]));
                }
                set {
                    this[this.tableARSTYLM.arstylcdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string arstyl {
                get {
                    return ((string)(this[this.tableARSTYLM.arstylColumn]));
                }
                set {
                    this[this.tableARSTYLM.arstylColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARSTYLDRow[] GetARSTYLDRows() {
                return ((ARSTYLDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ARSTYLD_ARSTYLM"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GEOCODEMRow : System.Data.DataRow {
            
            private GEOCODEMDataTable tableGEOCODEM;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GEOCODEMRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGEOCODEM = ((GEOCODEMDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int refnum {
                get {
                    return ((int)(this[this.tableGEOCODEM.refnumColumn]));
                }
                set {
                    this[this.tableGEOCODEM.refnumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string statecd {
                get {
                    try {
                        return ((string)(this[this.tableGEOCODEM.statecdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'statecd\' in table \'GEOCODEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEOCODEM.statecdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string county {
                get {
                    return ((string)(this[this.tableGEOCODEM.countyColumn]));
                }
                set {
                    this[this.tableGEOCODEM.countyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string city {
                get {
                    return ((string)(this[this.tableGEOCODEM.cityColumn]));
                }
                set {
                    this[this.tableGEOCODEM.cityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string zip {
                get {
                    try {
                        return ((string)(this[this.tableGEOCODEM.zipColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'zip\' in table \'GEOCODEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEOCODEM.zipColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableGEOCODEM.nameColumn]));
                }
                set {
                    this[this.tableGEOCODEM.nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string address {
                get {
                    return ((string)(this[this.tableGEOCODEM.addressColumn]));
                }
                set {
                    this[this.tableGEOCODEM.addressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string gdtplus4 {
                get {
                    try {
                        return ((string)(this[this.tableGEOCODEM.gdtplus4Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'gdtplus4\' in table \'GEOCODEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEOCODEM.gdtplus4Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string gdtsad {
                get {
                    try {
                        return ((string)(this[this.tableGEOCODEM.gdtsadColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'gdtsad\' in table \'GEOCODEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEOCODEM.gdtsadColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string gdtcity {
                get {
                    try {
                        return ((string)(this[this.tableGEOCODEM.gdtcityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'gdtcity\' in table \'GEOCODEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEOCODEM.gdtcityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string gdtstatecd {
                get {
                    try {
                        return ((string)(this[this.tableGEOCODEM.gdtstatecdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'gdtstatecd\' in table \'GEOCODEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEOCODEM.gdtstatecdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string gdtpcode {
                get {
                    try {
                        return ((string)(this[this.tableGEOCODEM.gdtpcodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'gdtpcode\' in table \'GEOCODEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEOCODEM.gdtpcodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal gdtlat {
                get {
                    try {
                        return ((decimal)(this[this.tableGEOCODEM.gdtlatColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'gdtlat\' in table \'GEOCODEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEOCODEM.gdtlatColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal gdtlong {
                get {
                    try {
                        return ((decimal)(this[this.tableGEOCODEM.gdtlongColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'gdtlong\' in table \'GEOCODEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEOCODEM.gdtlongColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string gdtxin {
                get {
                    try {
                        return ((string)(this[this.tableGEOCODEM.gdtxinColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'gdtxin\' in table \'GEOCODEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEOCODEM.gdtxinColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string gdtstat {
                get {
                    return ((string)(this[this.tableGEOCODEM.gdtstatColumn]));
                }
                set {
                    this[this.tableGEOCODEM.gdtstatColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STATEMRow STATEMRowByFK_GEOCODEM_STATEM {
                get {
                    return ((STATEMRow)(this.GetParentRow(this.Table.ParentRelations["FK_GEOCODEM_STATEM"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_GEOCODEM_STATEM"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STATEMRow STATEMRowByFK_GEOCODEM_STATEM1 {
                get {
                    return ((STATEMRow)(this.GetParentRow(this.Table.ParentRelations["FK_GEOCODEM_STATEM1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_GEOCODEM_STATEM1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstatecdNull() {
                return this.IsNull(this.tableGEOCODEM.statecdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstatecdNull() {
                this[this.tableGEOCODEM.statecdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IszipNull() {
                return this.IsNull(this.tableGEOCODEM.zipColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetzipNull() {
                this[this.tableGEOCODEM.zipColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isgdtplus4Null() {
                return this.IsNull(this.tableGEOCODEM.gdtplus4Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setgdtplus4Null() {
                this[this.tableGEOCODEM.gdtplus4Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgdtsadNull() {
                return this.IsNull(this.tableGEOCODEM.gdtsadColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgdtsadNull() {
                this[this.tableGEOCODEM.gdtsadColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgdtcityNull() {
                return this.IsNull(this.tableGEOCODEM.gdtcityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgdtcityNull() {
                this[this.tableGEOCODEM.gdtcityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgdtstatecdNull() {
                return this.IsNull(this.tableGEOCODEM.gdtstatecdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgdtstatecdNull() {
                this[this.tableGEOCODEM.gdtstatecdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgdtpcodeNull() {
                return this.IsNull(this.tableGEOCODEM.gdtpcodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgdtpcodeNull() {
                this[this.tableGEOCODEM.gdtpcodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgdtlatNull() {
                return this.IsNull(this.tableGEOCODEM.gdtlatColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgdtlatNull() {
                this[this.tableGEOCODEM.gdtlatColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgdtlongNull() {
                return this.IsNull(this.tableGEOCODEM.gdtlongColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgdtlongNull() {
                this[this.tableGEOCODEM.gdtlongColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgdtxinNull() {
                return this.IsNull(this.tableGEOCODEM.gdtxinColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgdtxinNull() {
                this[this.tableGEOCODEM.gdtxinColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow[] GetPROPMAINRows() {
                return ((PROPMAINRow[])(base.GetChildRows(this.Table.ChildRelations["FK_GEOCODEM_PROPMAIN"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class APCRITDRowChangeEvent : System.EventArgs {
            
            private APCRITDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public APCRITDRowChangeEvent(APCRITDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public APCRITDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class STATEMRowChangeEvent : System.EventArgs {
            
            private STATEMRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STATEMRowChangeEvent(STATEMRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STATEMRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class APCRITMRowChangeEvent : System.EventArgs {
            
            private APCRITMRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public APCRITMRowChangeEvent(APCRITMRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public APCRITMRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ARCHTECDRowChangeEvent : System.EventArgs {
            
            private ARCHTECDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARCHTECDRowChangeEvent(ARCHTECDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARCHTECDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AREASGDRowChangeEvent : System.EventArgs {
            
            private AREASGDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AREASGDRowChangeEvent(AREASGDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AREASGDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AREASGMRowChangeEvent : System.EventArgs {
            
            private AREASGMRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AREASGMRowChangeEvent(AREASGMRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AREASGMRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CERTMRowChangeEvent : System.EventArgs {
            
            private CERTMRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CERTMRowChangeEvent(CERTMRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CERTMRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CFUNCDRowChangeEvent : System.EventArgs {
            
            private CFUNCDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CFUNCDRowChangeEvent(CFUNCDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CFUNCDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class COUNTYDRowChangeEvent : System.EventArgs {
            
            private COUNTYDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COUNTYDRowChangeEvent(COUNTYDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COUNTYDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class COUNTYMRowChangeEvent : System.EventArgs {
            
            private COUNTYMRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COUNTYMRowChangeEvent(COUNTYMRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COUNTYMRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CRITCNDRowChangeEvent : System.EventArgs {
            
            private CRITCNDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CRITCNDRowChangeEvent(CRITCNDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CRITCNDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CRITCNMRowChangeEvent : System.EventArgs {
            
            private CRITCNMRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CRITCNMRowChangeEvent(CRITCNMRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CRITCNMRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CSFUNCDRowChangeEvent : System.EventArgs {
            
            private CSFUNCDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CSFUNCDRowChangeEvent(CSFUNCDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CSFUNCDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CULTAFFDRowChangeEvent : System.EventArgs {
            
            private CULTAFFDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CULTAFFDRowChangeEvent(CULTAFFDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CULTAFFDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FEDAGDRowChangeEvent : System.EventArgs {
            
            private FEDAGDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEDAGDRowChangeEvent(FEDAGDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEDAGDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FEDAGMRowChangeEvent : System.EventArgs {
            
            private FEDAGMRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEDAGMRowChangeEvent(FEDAGMRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEDAGMRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FUNCMRowChangeEvent : System.EventArgs {
            
            private FUNCMRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FUNCMRowChangeEvent(FUNCMRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FUNCMRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HFUNCDRowChangeEvent : System.EventArgs {
            
            private HFUNCDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HFUNCDRowChangeEvent(HFUNCDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HFUNCDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HSFUNCDRowChangeEvent : System.EventArgs {
            
            private HSFUNCDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HSFUNCDRowChangeEvent(HSFUNCDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HSFUNCDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LEVSGDRowChangeEvent : System.EventArgs {
            
            private LEVSGDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LEVSGDRowChangeEvent(LEVSGDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LEVSGDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LEVSGMRowChangeEvent : System.EventArgs {
            
            private LEVSGMRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LEVSGMRowChangeEvent(LEVSGMRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LEVSGMRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MATDRowChangeEvent : System.EventArgs {
            
            private MATDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATDRowChangeEvent(MATDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MATMRowChangeEvent : System.EventArgs {
            
            private MATMRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATMRowChangeEvent(MATMRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MATMRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NOMNADRowChangeEvent : System.EventArgs {
            
            private NOMNADRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNADRowChangeEvent(NOMNADRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNADRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NOMNAMRowChangeEvent : System.EventArgs {
            
            private NOMNAMRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNAMRowChangeEvent(NOMNAMRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNAMRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NOMNAMEDRowChangeEvent : System.EventArgs {
            
            private NOMNAMEDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNAMEDRowChangeEvent(NOMNAMEDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NOMNAMEDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OSTATEDRowChangeEvent : System.EventArgs {
            
            private OSTATEDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OSTATEDRowChangeEvent(OSTATEDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OSTATEDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OTHCERTDRowChangeEvent : System.EventArgs {
            
            private OTHCERTDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHCERTDRowChangeEvent(OTHCERTDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHCERTDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OTHDOCDRowChangeEvent : System.EventArgs {
            
            private OTHDOCDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHDOCDRowChangeEvent(OTHDOCDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHDOCDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OTHDOCMRowChangeEvent : System.EventArgs {
            
            private OTHDOCMRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHDOCMRowChangeEvent(OTHDOCMRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHDOCMRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OTHNAMEDRowChangeEvent : System.EventArgs {
            
            private OTHNAMEDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHNAMEDRowChangeEvent(OTHNAMEDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OTHNAMEDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OWNERDRowChangeEvent : System.EventArgs {
            
            private OWNERDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERDRowChangeEvent(OWNERDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OWNERMRowChangeEvent : System.EventArgs {
            
            private OWNERMRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERMRowChangeEvent(OWNERMRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERMRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PERIODDRowChangeEvent : System.EventArgs {
            
            private PERIODDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERIODDRowChangeEvent(PERIODDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERIODDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PERIODMRowChangeEvent : System.EventArgs {
            
            private PERIODMRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERIODMRowChangeEvent(PERIODMRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERIODMRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PossibleArticlesRowChangeEvent : System.EventArgs {
            
            private PossibleArticlesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PossibleArticlesRowChangeEvent(PossibleArticlesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PossibleArticlesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PROPMAINRowChangeEvent : System.EventArgs {
            
            private PROPMAINRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRowChangeEvent(PROPMAINRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROPMAINRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RETYPEMRowChangeEvent : System.EventArgs {
            
            private RETYPEMRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RETYPEMRowChangeEvent(RETYPEMRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RETYPEMRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SIGNAMEDRowChangeEvent : System.EventArgs {
            
            private SIGNAMEDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIGNAMEDRowChangeEvent(SIGNAMEDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIGNAMEDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SIGYEARDRowChangeEvent : System.EventArgs {
            
            private SIGYEARDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIGYEARDRowChangeEvent(SIGYEARDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIGYEARDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ARSTYLDRowChangeEvent : System.EventArgs {
            
            private ARSTYLDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARSTYLDRowChangeEvent(ARSTYLDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARSTYLDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ARSTYLMRowChangeEvent : System.EventArgs {
            
            private ARSTYLMRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARSTYLMRowChangeEvent(ARSTYLMRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARSTYLMRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GEOCODEMRowChangeEvent : System.EventArgs {
            
            private GEOCODEMRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEOCODEMRowChangeEvent(GEOCODEMRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEOCODEMRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace NRHPStubber.NrhpDatabaseTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class APCRITDTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public APCRITDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "APCRITD";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("apcritcd", "apcritcd");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[APCRITD] WHERE (([refnum] = @Original_refnum) AND ([apcritcd] " +
                "= @Original_apcritcd))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_apcritcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "apcritcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[APCRITD] ([refnum], [apcritcd]) VALUES (@refnum, @apcritcd);\r\n" +
                "SELECT refnum, apcritcd FROM APCRITD WHERE (apcritcd = @apcritcd) AND (refnum = " +
                "@refnum)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@apcritcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "apcritcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[APCRITD] SET [refnum] = @refnum, [apcritcd] = @apcritcd WHERE (([re" +
                "fnum] = @Original_refnum) AND ([apcritcd] = @Original_apcritcd));\r\nSELECT refnum" +
                ", apcritcd FROM APCRITD WHERE (apcritcd = @apcritcd) AND (refnum = @refnum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@apcritcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "apcritcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_apcritcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "apcritcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, apcritcd FROM dbo.APCRITD";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.APCRITDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.APCRITDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.APCRITDDataTable dataTable = new NrhpDatabase.APCRITDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.APCRITDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "APCRITD");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, string Original_apcritcd) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            if ((Original_apcritcd == null)) {
                throw new System.ArgumentNullException("Original_apcritcd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_apcritcd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, string apcritcd) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            if ((apcritcd == null)) {
                throw new System.ArgumentNullException("apcritcd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(apcritcd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int refnum, string apcritcd, int Original_refnum, string Original_apcritcd) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            if ((apcritcd == null)) {
                throw new System.ArgumentNullException("apcritcd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(apcritcd));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_refnum));
            if ((Original_apcritcd == null)) {
                throw new System.ArgumentNullException("Original_apcritcd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_apcritcd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class STATEMTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STATEMTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "STATEM";
            tableMapping.ColumnMappings.Add("statecd", "statecd");
            tableMapping.ColumnMappings.Add("state", "state");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[STATEM] WHERE (([statecd] = @Original_statecd) AND ([state] = " +
                "@Original_state))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_statecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "statecd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_state", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "state", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[STATEM] ([statecd], [state]) VALUES (@statecd, @state);\r\nSELEC" +
                "T statecd, state FROM STATEM WHERE (statecd = @statecd)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@statecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "statecd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@state", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "state", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[STATEM] SET [statecd] = @statecd, [state] = @state WHERE (([statecd" +
                "] = @Original_statecd) AND ([state] = @Original_state));\r\nSELECT statecd, state " +
                "FROM STATEM WHERE (statecd = @statecd)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@statecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "statecd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@state", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "state", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_statecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "statecd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_state", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "state", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT statecd, state FROM dbo.STATEM";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.STATEMDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.STATEMDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.STATEMDataTable dataTable = new NrhpDatabase.STATEMDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.STATEMDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "STATEM");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_statecd, string Original_state) {
            if ((Original_statecd == null)) {
                throw new System.ArgumentNullException("Original_statecd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_statecd));
            }
            if ((Original_state == null)) {
                throw new System.ArgumentNullException("Original_state");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_state));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string statecd, string state) {
            if ((statecd == null)) {
                throw new System.ArgumentNullException("statecd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(statecd));
            }
            if ((state == null)) {
                throw new System.ArgumentNullException("state");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(state));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string statecd, string state, string Original_statecd, string Original_state) {
            if ((statecd == null)) {
                throw new System.ArgumentNullException("statecd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(statecd));
            }
            if ((state == null)) {
                throw new System.ArgumentNullException("state");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(state));
            }
            if ((Original_statecd == null)) {
                throw new System.ArgumentNullException("Original_statecd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_statecd));
            }
            if ((Original_state == null)) {
                throw new System.ArgumentNullException("Original_state");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_state));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class APCRITMTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public APCRITMTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "APCRITM";
            tableMapping.ColumnMappings.Add("apcritcd", "apcritcd");
            tableMapping.ColumnMappings.Add("apcrit", "apcrit");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[APCRITM] WHERE (([apcritcd] = @Original_apcritcd) AND ([apcrit" +
                "] = @Original_apcrit))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_apcritcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "apcritcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_apcrit", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "apcrit", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[APCRITM] ([apcritcd], [apcrit]) VALUES (@apcritcd, @apcrit);\r\n" +
                "SELECT apcritcd, apcrit FROM APCRITM WHERE (apcritcd = @apcritcd)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@apcritcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "apcritcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@apcrit", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "apcrit", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[APCRITM] SET [apcritcd] = @apcritcd, [apcrit] = @apcrit WHERE (([ap" +
                "critcd] = @Original_apcritcd) AND ([apcrit] = @Original_apcrit));\r\nSELECT apcrit" +
                "cd, apcrit FROM APCRITM WHERE (apcritcd = @apcritcd)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@apcritcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "apcritcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@apcrit", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "apcrit", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_apcritcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "apcritcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_apcrit", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "apcrit", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT apcritcd, apcrit FROM dbo.APCRITM";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.APCRITMDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.APCRITMDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.APCRITMDataTable dataTable = new NrhpDatabase.APCRITMDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.APCRITMDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "APCRITM");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_apcritcd, string Original_apcrit) {
            if ((Original_apcritcd == null)) {
                throw new System.ArgumentNullException("Original_apcritcd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_apcritcd));
            }
            if ((Original_apcrit == null)) {
                throw new System.ArgumentNullException("Original_apcrit");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_apcrit));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string apcritcd, string apcrit) {
            if ((apcritcd == null)) {
                throw new System.ArgumentNullException("apcritcd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(apcritcd));
            }
            if ((apcrit == null)) {
                throw new System.ArgumentNullException("apcrit");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(apcrit));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string apcritcd, string apcrit, string Original_apcritcd, string Original_apcrit) {
            if ((apcritcd == null)) {
                throw new System.ArgumentNullException("apcritcd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(apcritcd));
            }
            if ((apcrit == null)) {
                throw new System.ArgumentNullException("apcrit");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(apcrit));
            }
            if ((Original_apcritcd == null)) {
                throw new System.ArgumentNullException("Original_apcritcd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_apcritcd));
            }
            if ((Original_apcrit == null)) {
                throw new System.ArgumentNullException("Original_apcrit");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_apcrit));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ARCHTECDTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ARCHTECDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ARCHTECD";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("architect", "architect");
            tableMapping.ColumnMappings.Add("CleanName", "CleanName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ARCHTECD] WHERE (([refnum] = @Original_refnum) AND ([architect" +
                "] = @Original_architect) AND ((@IsNull_CleanName = 1 AND [CleanName] IS NULL) OR" +
                " ([CleanName] = @Original_CleanName)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_architect", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "architect", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_CleanName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CleanName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CleanName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CleanName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ARCHTECD] ([refnum], [architect], [CleanName]) VALUES (@refnum" +
                ", @architect, @CleanName);\r\nSELECT refnum, architect, CleanName FROM ARCHTECD WH" +
                "ERE (architect = @architect) AND (refnum = @refnum)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@architect", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "architect", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CleanName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CleanName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ARCHTECD] SET [refnum] = @refnum, [architect] = @architect, [CleanName] = @CleanName WHERE (([refnum] = @Original_refnum) AND ([architect] = @Original_architect) AND ((@IsNull_CleanName = 1 AND [CleanName] IS NULL) OR ([CleanName] = @Original_CleanName)));
SELECT refnum, architect, CleanName FROM ARCHTECD WHERE (architect = @architect) AND (refnum = @refnum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@architect", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "architect", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CleanName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CleanName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_architect", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "architect", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_CleanName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CleanName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CleanName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CleanName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, architect, CleanName FROM dbo.ARCHTECD";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.ARCHTECDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.ARCHTECDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.ARCHTECDDataTable dataTable = new NrhpDatabase.ARCHTECDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.ARCHTECDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "ARCHTECD");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, string Original_architect, string Original_CleanName) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            if ((Original_architect == null)) {
                throw new System.ArgumentNullException("Original_architect");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_architect));
            }
            if ((Original_CleanName == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_CleanName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, string architect, string CleanName) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            if ((architect == null)) {
                throw new System.ArgumentNullException("architect");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(architect));
            }
            if ((CleanName == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(CleanName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int refnum, string architect, string CleanName, int Original_refnum, string Original_architect, string Original_CleanName) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            if ((architect == null)) {
                throw new System.ArgumentNullException("architect");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(architect));
            }
            if ((CleanName == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(CleanName));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_refnum));
            if ((Original_architect == null)) {
                throw new System.ArgumentNullException("Original_architect");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_architect));
            }
            if ((Original_CleanName == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_CleanName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AREASGDTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AREASGDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "AREASGD";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("areasgcd", "areasgcd");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[AREASGD] WHERE (([refnum] = @Original_refnum) AND ([areasgcd] " +
                "= @Original_areasgcd))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_areasgcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "areasgcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[AREASGD] ([refnum], [areasgcd]) VALUES (@refnum, @areasgcd);\r\n" +
                "SELECT refnum, areasgcd FROM AREASGD WHERE (areasgcd = @areasgcd) AND (refnum = " +
                "@refnum)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@areasgcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "areasgcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[AREASGD] SET [refnum] = @refnum, [areasgcd] = @areasgcd WHERE (([re" +
                "fnum] = @Original_refnum) AND ([areasgcd] = @Original_areasgcd));\r\nSELECT refnum" +
                ", areasgcd FROM AREASGD WHERE (areasgcd = @areasgcd) AND (refnum = @refnum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@areasgcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "areasgcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_areasgcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "areasgcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, areasgcd FROM dbo.AREASGD";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.AREASGDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.AREASGDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.AREASGDDataTable dataTable = new NrhpDatabase.AREASGDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.AREASGDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "AREASGD");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, int Original_areasgcd) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_areasgcd));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, int areasgcd) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(areasgcd));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int refnum, int areasgcd, int Original_refnum, int Original_areasgcd) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(areasgcd));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_refnum));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_areasgcd));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AREASGMTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AREASGMTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "AREASGM";
            tableMapping.ColumnMappings.Add("areasgcd", "areasgcd");
            tableMapping.ColumnMappings.Add("areasg", "areasg");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[AREASGM] WHERE (([areasgcd] = @Original_areasgcd) AND ([areasg" +
                "] = @Original_areasg))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_areasgcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "areasgcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_areasg", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "areasg", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[AREASGM] ([areasgcd], [areasg]) VALUES (@areasgcd, @areasg);\r\n" +
                "SELECT areasgcd, areasg FROM AREASGM WHERE (areasgcd = @areasgcd)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@areasgcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "areasgcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@areasg", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "areasg", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[AREASGM] SET [areasgcd] = @areasgcd, [areasg] = @areasg WHERE (([ar" +
                "easgcd] = @Original_areasgcd) AND ([areasg] = @Original_areasg));\r\nSELECT areasg" +
                "cd, areasg FROM AREASGM WHERE (areasgcd = @areasgcd)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@areasgcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "areasgcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@areasg", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "areasg", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_areasgcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "areasgcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_areasg", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "areasg", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT areasgcd, areasg FROM dbo.AREASGM";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.AREASGMDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.AREASGMDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.AREASGMDataTable dataTable = new NrhpDatabase.AREASGMDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.AREASGMDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "AREASGM");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_areasgcd, string Original_areasg) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_areasgcd));
            if ((Original_areasg == null)) {
                throw new System.ArgumentNullException("Original_areasg");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_areasg));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int areasgcd, string areasg) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(areasgcd));
            if ((areasg == null)) {
                throw new System.ArgumentNullException("areasg");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(areasg));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int areasgcd, string areasg, int Original_areasgcd, string Original_areasg) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(areasgcd));
            if ((areasg == null)) {
                throw new System.ArgumentNullException("areasg");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(areasg));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_areasgcd));
            if ((Original_areasg == null)) {
                throw new System.ArgumentNullException("Original_areasg");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_areasg));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CERTMTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CERTMTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CERTM";
            tableMapping.ColumnMappings.Add("certcd", "certcd");
            tableMapping.ColumnMappings.Add("cert", "cert");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CERTM] WHERE (([certcd] = @Original_certcd) AND ((@IsNull_cert" +
                " = 1 AND [cert] IS NULL) OR ([cert] = @Original_cert)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_certcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "certcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_cert", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "cert", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_cert", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "cert", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CERTM] ([certcd], [cert]) VALUES (@certcd, @cert);\r\nSELECT cer" +
                "tcd, cert FROM CERTM WHERE (certcd = @certcd)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@certcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "certcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@cert", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "cert", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CERTM] SET [certcd] = @certcd, [cert] = @cert WHERE (([certcd] = @O" +
                "riginal_certcd) AND ((@IsNull_cert = 1 AND [cert] IS NULL) OR ([cert] = @Origina" +
                "l_cert)));\r\nSELECT certcd, cert FROM CERTM WHERE (certcd = @certcd)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@certcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "certcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@cert", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "cert", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_certcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "certcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_cert", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "cert", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_cert", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "cert", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT certcd, cert FROM dbo.CERTM";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.CERTMDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.CERTMDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.CERTMDataTable dataTable = new NrhpDatabase.CERTMDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.CERTMDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "CERTM");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_certcd, string Original_cert) {
            if ((Original_certcd == null)) {
                throw new System.ArgumentNullException("Original_certcd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_certcd));
            }
            if ((Original_cert == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_cert));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string certcd, string cert) {
            if ((certcd == null)) {
                throw new System.ArgumentNullException("certcd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(certcd));
            }
            if ((cert == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(cert));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string certcd, string cert, string Original_certcd, string Original_cert) {
            if ((certcd == null)) {
                throw new System.ArgumentNullException("certcd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(certcd));
            }
            if ((cert == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(cert));
            }
            if ((Original_certcd == null)) {
                throw new System.ArgumentNullException("Original_certcd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_certcd));
            }
            if ((Original_cert == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_cert));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CFUNCDTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CFUNCDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CFUNCD";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("cfunccd", "cfunccd");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CFUNCD] WHERE (([refnum] = @Original_refnum) AND ([cfunccd] = " +
                "@Original_cfunccd))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_cfunccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "cfunccd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CFUNCD] ([refnum], [cfunccd]) VALUES (@refnum, @cfunccd);\r\nSEL" +
                "ECT refnum, cfunccd FROM CFUNCD WHERE (cfunccd = @cfunccd) AND (refnum = @refnum" +
                ")";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@cfunccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "cfunccd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CFUNCD] SET [refnum] = @refnum, [cfunccd] = @cfunccd WHERE (([refnu" +
                "m] = @Original_refnum) AND ([cfunccd] = @Original_cfunccd));\r\nSELECT refnum, cfu" +
                "nccd FROM CFUNCD WHERE (cfunccd = @cfunccd) AND (refnum = @refnum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@cfunccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "cfunccd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_cfunccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "cfunccd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, cfunccd FROM dbo.CFUNCD";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.CFUNCDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.CFUNCDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.CFUNCDDataTable dataTable = new NrhpDatabase.CFUNCDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.CFUNCDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "CFUNCD");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, string Original_cfunccd) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            if ((Original_cfunccd == null)) {
                throw new System.ArgumentNullException("Original_cfunccd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_cfunccd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, string cfunccd) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            if ((cfunccd == null)) {
                throw new System.ArgumentNullException("cfunccd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(cfunccd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int refnum, string cfunccd, int Original_refnum, string Original_cfunccd) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            if ((cfunccd == null)) {
                throw new System.ArgumentNullException("cfunccd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(cfunccd));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_refnum));
            if ((Original_cfunccd == null)) {
                throw new System.ArgumentNullException("Original_cfunccd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_cfunccd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class COUNTYDTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public COUNTYDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "COUNTYD";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("countycd", "countycd");
            tableMapping.ColumnMappings.Add("city", "city");
            tableMapping.ColumnMappings.Add("vicinity", "vicinity");
            tableMapping.ColumnMappings.Add("statecd", "statecd");
            tableMapping.ColumnMappings.Add("primeflg", "primeflg");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[COUNTYD] WHERE (([refnum] = @Original_refnum) AND ([countycd] = @Original_countycd) AND ([city] = @Original_city) AND ((@IsNull_vicinity = 1 AND [vicinity] IS NULL) OR ([vicinity] = @Original_vicinity)) AND ([statecd] = @Original_statecd) AND ((@IsNull_primeflg = 1 AND [primeflg] IS NULL) OR ([primeflg] = @Original_primeflg)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_countycd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "countycd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_city", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "city", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_vicinity", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "vicinity", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_vicinity", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "vicinity", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_statecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "statecd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_primeflg", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "primeflg", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_primeflg", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "primeflg", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[COUNTYD] ([refnum], [countycd], [city], [vicinity], [statecd], [primeflg]) VALUES (@refnum, @countycd, @city, @vicinity, @statecd, @primeflg);
SELECT refnum, countycd, city, vicinity, statecd, primeflg FROM COUNTYD WHERE (city = @city) AND (countycd = @countycd) AND (refnum = @refnum)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@countycd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "countycd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@city", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "city", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@vicinity", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "vicinity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@statecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "statecd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@primeflg", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "primeflg", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[COUNTYD] SET [refnum] = @refnum, [countycd] = @countycd, [city] = @city, [vicinity] = @vicinity, [statecd] = @statecd, [primeflg] = @primeflg WHERE (([refnum] = @Original_refnum) AND ([countycd] = @Original_countycd) AND ([city] = @Original_city) AND ((@IsNull_vicinity = 1 AND [vicinity] IS NULL) OR ([vicinity] = @Original_vicinity)) AND ([statecd] = @Original_statecd) AND ((@IsNull_primeflg = 1 AND [primeflg] IS NULL) OR ([primeflg] = @Original_primeflg)));
SELECT refnum, countycd, city, vicinity, statecd, primeflg FROM COUNTYD WHERE (city = @city) AND (countycd = @countycd) AND (refnum = @refnum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@countycd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "countycd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@city", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "city", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@vicinity", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "vicinity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@statecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "statecd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@primeflg", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "primeflg", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_countycd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "countycd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_city", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "city", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_vicinity", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "vicinity", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_vicinity", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "vicinity", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_statecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "statecd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_primeflg", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "primeflg", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_primeflg", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "primeflg", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, countycd, city, vicinity, statecd, primeflg FROM COUNTYD";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.COUNTYDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.COUNTYDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.COUNTYDDataTable dataTable = new NrhpDatabase.COUNTYDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.COUNTYDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "COUNTYD");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, string Original_countycd, string Original_city, bool Original_vicinity, string Original_statecd, bool Original_primeflg) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            if ((Original_countycd == null)) {
                throw new System.ArgumentNullException("Original_countycd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_countycd));
            }
            if ((Original_city == null)) {
                throw new System.ArgumentNullException("Original_city");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_city));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_vicinity));
            if ((Original_statecd == null)) {
                throw new System.ArgumentNullException("Original_statecd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_statecd));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((bool)(Original_primeflg));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, string countycd, string city, bool vicinity, string statecd, bool primeflg) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            if ((countycd == null)) {
                throw new System.ArgumentNullException("countycd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(countycd));
            }
            if ((city == null)) {
                throw new System.ArgumentNullException("city");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(city));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(vicinity));
            if ((statecd == null)) {
                throw new System.ArgumentNullException("statecd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(statecd));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(primeflg));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int refnum, string countycd, string city, bool vicinity, string statecd, bool primeflg, int Original_refnum, string Original_countycd, string Original_city, bool Original_vicinity, string Original_statecd, bool Original_primeflg) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            if ((countycd == null)) {
                throw new System.ArgumentNullException("countycd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(countycd));
            }
            if ((city == null)) {
                throw new System.ArgumentNullException("city");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(city));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(vicinity));
            if ((statecd == null)) {
                throw new System.ArgumentNullException("statecd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(statecd));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(primeflg));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_refnum));
            if ((Original_countycd == null)) {
                throw new System.ArgumentNullException("Original_countycd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_countycd));
            }
            if ((Original_city == null)) {
                throw new System.ArgumentNullException("Original_city");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_city));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(Original_vicinity));
            if ((Original_statecd == null)) {
                throw new System.ArgumentNullException("Original_statecd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_statecd));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((bool)(Original_primeflg));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class COUNTYMTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public COUNTYMTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "COUNTYM";
            tableMapping.ColumnMappings.Add("countycd", "countycd");
            tableMapping.ColumnMappings.Add("county", "county");
            tableMapping.ColumnMappings.Add("cntytype", "cntytype");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[COUNTYM] WHERE (([countycd] = @Original_countycd) AND ([county" +
                "] = @Original_county) AND ([cntytype] = @Original_cntytype))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_countycd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "countycd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_county", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "county", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_cntytype", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "cntytype", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[COUNTYM] ([countycd], [county], [cntytype]) VALUES (@countycd," +
                " @county, @cntytype);\r\nSELECT countycd, county, cntytype FROM COUNTYM WHERE (cou" +
                "ntycd = @countycd)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@countycd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "countycd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@county", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "county", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@cntytype", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "cntytype", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[COUNTYM] SET [countycd] = @countycd, [county] = @county, [cntytype] = @cntytype WHERE (([countycd] = @Original_countycd) AND ([county] = @Original_county) AND ([cntytype] = @Original_cntytype));
SELECT countycd, county, cntytype FROM COUNTYM WHERE (countycd = @countycd)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@countycd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "countycd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@county", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "county", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@cntytype", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "cntytype", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_countycd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "countycd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_county", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "county", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_cntytype", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "cntytype", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT countycd, county, cntytype FROM dbo.COUNTYM";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.COUNTYMDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.COUNTYMDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.COUNTYMDataTable dataTable = new NrhpDatabase.COUNTYMDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.COUNTYMDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "COUNTYM");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_countycd, string Original_county, string Original_cntytype) {
            if ((Original_countycd == null)) {
                throw new System.ArgumentNullException("Original_countycd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_countycd));
            }
            if ((Original_county == null)) {
                throw new System.ArgumentNullException("Original_county");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_county));
            }
            if ((Original_cntytype == null)) {
                throw new System.ArgumentNullException("Original_cntytype");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_cntytype));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string countycd, string county, string cntytype) {
            if ((countycd == null)) {
                throw new System.ArgumentNullException("countycd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(countycd));
            }
            if ((county == null)) {
                throw new System.ArgumentNullException("county");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(county));
            }
            if ((cntytype == null)) {
                throw new System.ArgumentNullException("cntytype");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(cntytype));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string countycd, string county, string cntytype, string Original_countycd, string Original_county, string Original_cntytype) {
            if ((countycd == null)) {
                throw new System.ArgumentNullException("countycd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(countycd));
            }
            if ((county == null)) {
                throw new System.ArgumentNullException("county");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(county));
            }
            if ((cntytype == null)) {
                throw new System.ArgumentNullException("cntytype");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(cntytype));
            }
            if ((Original_countycd == null)) {
                throw new System.ArgumentNullException("Original_countycd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_countycd));
            }
            if ((Original_county == null)) {
                throw new System.ArgumentNullException("Original_county");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_county));
            }
            if ((Original_cntytype == null)) {
                throw new System.ArgumentNullException("Original_cntytype");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_cntytype));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CRITCNDTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CRITCNDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CRITCND";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("critcncd", "critcncd");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CRITCND] WHERE (([refnum] = @Original_refnum) AND ([critcncd] " +
                "= @Original_critcncd))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_critcncd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "critcncd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CRITCND] ([refnum], [critcncd]) VALUES (@refnum, @critcncd);\r\n" +
                "SELECT refnum, critcncd FROM CRITCND WHERE (critcncd = @critcncd) AND (refnum = " +
                "@refnum)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@critcncd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "critcncd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CRITCND] SET [refnum] = @refnum, [critcncd] = @critcncd WHERE (([re" +
                "fnum] = @Original_refnum) AND ([critcncd] = @Original_critcncd));\r\nSELECT refnum" +
                ", critcncd FROM CRITCND WHERE (critcncd = @critcncd) AND (refnum = @refnum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@critcncd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "critcncd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_critcncd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "critcncd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, critcncd FROM dbo.CRITCND";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.CRITCNDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.CRITCNDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.CRITCNDDataTable dataTable = new NrhpDatabase.CRITCNDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.CRITCNDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "CRITCND");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, string Original_critcncd) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            if ((Original_critcncd == null)) {
                throw new System.ArgumentNullException("Original_critcncd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_critcncd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, string critcncd) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            if ((critcncd == null)) {
                throw new System.ArgumentNullException("critcncd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(critcncd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int refnum, string critcncd, int Original_refnum, string Original_critcncd) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            if ((critcncd == null)) {
                throw new System.ArgumentNullException("critcncd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(critcncd));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_refnum));
            if ((Original_critcncd == null)) {
                throw new System.ArgumentNullException("Original_critcncd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_critcncd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CRITCNMTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CRITCNMTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CRITCNM";
            tableMapping.ColumnMappings.Add("critcncd", "critcncd");
            tableMapping.ColumnMappings.Add("critcn", "critcn");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CRITCNM] WHERE (([critcncd] = @Original_critcncd) AND ([critcn" +
                "] = @Original_critcn))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_critcncd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "critcncd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_critcn", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "critcn", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CRITCNM] ([critcncd], [critcn]) VALUES (@critcncd, @critcn);\r\n" +
                "SELECT critcncd, critcn FROM CRITCNM WHERE (critcncd = @critcncd)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@critcncd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "critcncd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@critcn", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "critcn", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CRITCNM] SET [critcncd] = @critcncd, [critcn] = @critcn WHERE (([cr" +
                "itcncd] = @Original_critcncd) AND ([critcn] = @Original_critcn));\r\nSELECT critcn" +
                "cd, critcn FROM CRITCNM WHERE (critcncd = @critcncd)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@critcncd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "critcncd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@critcn", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "critcn", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_critcncd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "critcncd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_critcn", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "critcn", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT critcncd, critcn FROM dbo.CRITCNM";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.CRITCNMDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.CRITCNMDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.CRITCNMDataTable dataTable = new NrhpDatabase.CRITCNMDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.CRITCNMDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "CRITCNM");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_critcncd, string Original_critcn) {
            if ((Original_critcncd == null)) {
                throw new System.ArgumentNullException("Original_critcncd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_critcncd));
            }
            if ((Original_critcn == null)) {
                throw new System.ArgumentNullException("Original_critcn");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_critcn));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string critcncd, string critcn) {
            if ((critcncd == null)) {
                throw new System.ArgumentNullException("critcncd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(critcncd));
            }
            if ((critcn == null)) {
                throw new System.ArgumentNullException("critcn");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(critcn));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string critcncd, string critcn, string Original_critcncd, string Original_critcn) {
            if ((critcncd == null)) {
                throw new System.ArgumentNullException("critcncd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(critcncd));
            }
            if ((critcn == null)) {
                throw new System.ArgumentNullException("critcn");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(critcn));
            }
            if ((Original_critcncd == null)) {
                throw new System.ArgumentNullException("Original_critcncd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_critcncd));
            }
            if ((Original_critcn == null)) {
                throw new System.ArgumentNullException("Original_critcn");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_critcn));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CSFUNCDTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CSFUNCDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CSFUNCD";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("csfunccd", "csfunccd");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CSFUNCD] WHERE (([refnum] = @Original_refnum) AND ([csfunccd] " +
                "= @Original_csfunccd))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_csfunccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "csfunccd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CSFUNCD] ([refnum], [csfunccd]) VALUES (@refnum, @csfunccd);\r\n" +
                "SELECT refnum, csfunccd FROM CSFUNCD WHERE (csfunccd = @csfunccd) AND (refnum = " +
                "@refnum)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@csfunccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "csfunccd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CSFUNCD] SET [refnum] = @refnum, [csfunccd] = @csfunccd WHERE (([re" +
                "fnum] = @Original_refnum) AND ([csfunccd] = @Original_csfunccd));\r\nSELECT refnum" +
                ", csfunccd FROM CSFUNCD WHERE (csfunccd = @csfunccd) AND (refnum = @refnum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@csfunccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "csfunccd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_csfunccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "csfunccd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, csfunccd FROM dbo.CSFUNCD";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.CSFUNCDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.CSFUNCDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.CSFUNCDDataTable dataTable = new NrhpDatabase.CSFUNCDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.CSFUNCDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "CSFUNCD");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, string Original_csfunccd) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            if ((Original_csfunccd == null)) {
                throw new System.ArgumentNullException("Original_csfunccd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_csfunccd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, string csfunccd) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            if ((csfunccd == null)) {
                throw new System.ArgumentNullException("csfunccd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(csfunccd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int refnum, string csfunccd, int Original_refnum, string Original_csfunccd) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            if ((csfunccd == null)) {
                throw new System.ArgumentNullException("csfunccd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(csfunccd));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_refnum));
            if ((Original_csfunccd == null)) {
                throw new System.ArgumentNullException("Original_csfunccd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_csfunccd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CULTAFFDTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CULTAFFDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CULTAFFD";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("cultaffl", "cultaffl");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CULTAFFD] WHERE (([refnum] = @Original_refnum) AND ([cultaffl]" +
                " = @Original_cultaffl))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_cultaffl", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "cultaffl", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CULTAFFD] ([refnum], [cultaffl]) VALUES (@refnum, @cultaffl);\r" +
                "\nSELECT refnum, cultaffl FROM CULTAFFD WHERE (cultaffl = @cultaffl) AND (refnum " +
                "= @refnum)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@cultaffl", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "cultaffl", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CULTAFFD] SET [refnum] = @refnum, [cultaffl] = @cultaffl WHERE (([r" +
                "efnum] = @Original_refnum) AND ([cultaffl] = @Original_cultaffl));\r\nSELECT refnu" +
                "m, cultaffl FROM CULTAFFD WHERE (cultaffl = @cultaffl) AND (refnum = @refnum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@cultaffl", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "cultaffl", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_cultaffl", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "cultaffl", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, cultaffl FROM dbo.CULTAFFD";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.CULTAFFDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.CULTAFFDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.CULTAFFDDataTable dataTable = new NrhpDatabase.CULTAFFDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.CULTAFFDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "CULTAFFD");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, string Original_cultaffl) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            if ((Original_cultaffl == null)) {
                throw new System.ArgumentNullException("Original_cultaffl");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_cultaffl));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, string cultaffl) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            if ((cultaffl == null)) {
                throw new System.ArgumentNullException("cultaffl");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(cultaffl));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int refnum, string cultaffl, int Original_refnum, string Original_cultaffl) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            if ((cultaffl == null)) {
                throw new System.ArgumentNullException("cultaffl");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(cultaffl));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_refnum));
            if ((Original_cultaffl == null)) {
                throw new System.ArgumentNullException("Original_cultaffl");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_cultaffl));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FEDAGDTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FEDAGDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FEDAGD";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("fedagcd", "fedagcd");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[FEDAGD] WHERE (([refnum] = @Original_refnum) AND ([fedagcd] = " +
                "@Original_fedagcd))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_fedagcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "fedagcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[FEDAGD] ([refnum], [fedagcd]) VALUES (@refnum, @fedagcd);\r\nSEL" +
                "ECT refnum, fedagcd FROM FEDAGD WHERE (fedagcd = @fedagcd) AND (refnum = @refnum" +
                ")";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@fedagcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "fedagcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[FEDAGD] SET [refnum] = @refnum, [fedagcd] = @fedagcd WHERE (([refnu" +
                "m] = @Original_refnum) AND ([fedagcd] = @Original_fedagcd));\r\nSELECT refnum, fed" +
                "agcd FROM FEDAGD WHERE (fedagcd = @fedagcd) AND (refnum = @refnum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@fedagcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "fedagcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_fedagcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "fedagcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, fedagcd FROM dbo.FEDAGD";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.FEDAGDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.FEDAGDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.FEDAGDDataTable dataTable = new NrhpDatabase.FEDAGDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.FEDAGDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "FEDAGD");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, string Original_fedagcd) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            if ((Original_fedagcd == null)) {
                throw new System.ArgumentNullException("Original_fedagcd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_fedagcd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, string fedagcd) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            if ((fedagcd == null)) {
                throw new System.ArgumentNullException("fedagcd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(fedagcd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int refnum, string fedagcd, int Original_refnum, string Original_fedagcd) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            if ((fedagcd == null)) {
                throw new System.ArgumentNullException("fedagcd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(fedagcd));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_refnum));
            if ((Original_fedagcd == null)) {
                throw new System.ArgumentNullException("Original_fedagcd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_fedagcd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FEDAGMTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FEDAGMTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FEDAGM";
            tableMapping.ColumnMappings.Add("fedagcd", "fedagcd");
            tableMapping.ColumnMappings.Add("fedag", "fedag");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[FEDAGM] WHERE (([fedagcd] = @Original_fedagcd) AND ([fedag] = " +
                "@Original_fedag))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_fedagcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "fedagcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_fedag", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "fedag", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[FEDAGM] ([fedagcd], [fedag]) VALUES (@fedagcd, @fedag);\r\nSELEC" +
                "T fedagcd, fedag FROM FEDAGM WHERE (fedagcd = @fedagcd)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@fedagcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "fedagcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@fedag", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "fedag", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[FEDAGM] SET [fedagcd] = @fedagcd, [fedag] = @fedag WHERE (([fedagcd" +
                "] = @Original_fedagcd) AND ([fedag] = @Original_fedag));\r\nSELECT fedagcd, fedag " +
                "FROM FEDAGM WHERE (fedagcd = @fedagcd)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@fedagcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "fedagcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@fedag", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "fedag", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_fedagcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "fedagcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_fedag", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "fedag", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT fedagcd, fedag FROM dbo.FEDAGM";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.FEDAGMDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.FEDAGMDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.FEDAGMDataTable dataTable = new NrhpDatabase.FEDAGMDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.FEDAGMDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "FEDAGM");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_fedagcd, string Original_fedag) {
            if ((Original_fedagcd == null)) {
                throw new System.ArgumentNullException("Original_fedagcd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_fedagcd));
            }
            if ((Original_fedag == null)) {
                throw new System.ArgumentNullException("Original_fedag");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_fedag));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string fedagcd, string fedag) {
            if ((fedagcd == null)) {
                throw new System.ArgumentNullException("fedagcd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(fedagcd));
            }
            if ((fedag == null)) {
                throw new System.ArgumentNullException("fedag");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(fedag));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string fedagcd, string fedag, string Original_fedagcd, string Original_fedag) {
            if ((fedagcd == null)) {
                throw new System.ArgumentNullException("fedagcd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(fedagcd));
            }
            if ((fedag == null)) {
                throw new System.ArgumentNullException("fedag");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(fedag));
            }
            if ((Original_fedagcd == null)) {
                throw new System.ArgumentNullException("Original_fedagcd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_fedagcd));
            }
            if ((Original_fedag == null)) {
                throw new System.ArgumentNullException("Original_fedag");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_fedag));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FUNCMTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FUNCMTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FUNCM";
            tableMapping.ColumnMappings.Add("funccd", "funccd");
            tableMapping.ColumnMappings.Add("func", "func");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[FUNCM] WHERE (([funccd] = @Original_funccd) AND ([func] = @Ori" +
                "ginal_func))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_funccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "funccd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_func", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "func", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[FUNCM] ([funccd], [func]) VALUES (@funccd, @func);\r\nSELECT fun" +
                "ccd, func FROM FUNCM WHERE (funccd = @funccd)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@funccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "funccd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@func", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "func", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[FUNCM] SET [funccd] = @funccd, [func] = @func WHERE (([funccd] = @O" +
                "riginal_funccd) AND ([func] = @Original_func));\r\nSELECT funccd, func FROM FUNCM " +
                "WHERE (funccd = @funccd)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@funccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "funccd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@func", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "func", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_funccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "funccd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_func", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "func", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT funccd, func FROM dbo.FUNCM";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.FUNCMDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.FUNCMDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.FUNCMDataTable dataTable = new NrhpDatabase.FUNCMDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.FUNCMDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "FUNCM");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_funccd, string Original_func) {
            if ((Original_funccd == null)) {
                throw new System.ArgumentNullException("Original_funccd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_funccd));
            }
            if ((Original_func == null)) {
                throw new System.ArgumentNullException("Original_func");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_func));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string funccd, string func) {
            if ((funccd == null)) {
                throw new System.ArgumentNullException("funccd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(funccd));
            }
            if ((func == null)) {
                throw new System.ArgumentNullException("func");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(func));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string funccd, string func, string Original_funccd, string Original_func) {
            if ((funccd == null)) {
                throw new System.ArgumentNullException("funccd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(funccd));
            }
            if ((func == null)) {
                throw new System.ArgumentNullException("func");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(func));
            }
            if ((Original_funccd == null)) {
                throw new System.ArgumentNullException("Original_funccd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_funccd));
            }
            if ((Original_func == null)) {
                throw new System.ArgumentNullException("Original_func");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_func));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class HFUNCDTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public HFUNCDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "HFUNCD";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("hfunccd", "hfunccd");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[HFUNCD] WHERE (([refnum] = @Original_refnum) AND ([hfunccd] = " +
                "@Original_hfunccd))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_hfunccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "hfunccd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[HFUNCD] ([refnum], [hfunccd]) VALUES (@refnum, @hfunccd);\r\nSEL" +
                "ECT refnum, hfunccd FROM HFUNCD WHERE (hfunccd = @hfunccd) AND (refnum = @refnum" +
                ")";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@hfunccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "hfunccd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[HFUNCD] SET [refnum] = @refnum, [hfunccd] = @hfunccd WHERE (([refnu" +
                "m] = @Original_refnum) AND ([hfunccd] = @Original_hfunccd));\r\nSELECT refnum, hfu" +
                "nccd FROM HFUNCD WHERE (hfunccd = @hfunccd) AND (refnum = @refnum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@hfunccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "hfunccd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_hfunccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "hfunccd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, hfunccd FROM dbo.HFUNCD";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.HFUNCDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.HFUNCDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.HFUNCDDataTable dataTable = new NrhpDatabase.HFUNCDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.HFUNCDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "HFUNCD");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, string Original_hfunccd) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            if ((Original_hfunccd == null)) {
                throw new System.ArgumentNullException("Original_hfunccd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_hfunccd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, string hfunccd) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            if ((hfunccd == null)) {
                throw new System.ArgumentNullException("hfunccd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(hfunccd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int refnum, string hfunccd, int Original_refnum, string Original_hfunccd) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            if ((hfunccd == null)) {
                throw new System.ArgumentNullException("hfunccd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(hfunccd));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_refnum));
            if ((Original_hfunccd == null)) {
                throw new System.ArgumentNullException("Original_hfunccd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_hfunccd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class HSFUNCDTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public HSFUNCDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "HSFUNCD";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("hsfunccd", "hsfunccd");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[HSFUNCD] WHERE (([refnum] = @Original_refnum) AND ([hsfunccd] " +
                "= @Original_hsfunccd))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_hsfunccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "hsfunccd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[HSFUNCD] ([refnum], [hsfunccd]) VALUES (@refnum, @hsfunccd);\r\n" +
                "SELECT refnum, hsfunccd FROM HSFUNCD WHERE (hsfunccd = @hsfunccd) AND (refnum = " +
                "@refnum)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@hsfunccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "hsfunccd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[HSFUNCD] SET [refnum] = @refnum, [hsfunccd] = @hsfunccd WHERE (([re" +
                "fnum] = @Original_refnum) AND ([hsfunccd] = @Original_hsfunccd));\r\nSELECT refnum" +
                ", hsfunccd FROM HSFUNCD WHERE (hsfunccd = @hsfunccd) AND (refnum = @refnum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@hsfunccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "hsfunccd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_hsfunccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "hsfunccd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, hsfunccd FROM dbo.HSFUNCD";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.HSFUNCDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.HSFUNCDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.HSFUNCDDataTable dataTable = new NrhpDatabase.HSFUNCDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.HSFUNCDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "HSFUNCD");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, string Original_hsfunccd) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            if ((Original_hsfunccd == null)) {
                throw new System.ArgumentNullException("Original_hsfunccd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_hsfunccd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, string hsfunccd) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            if ((hsfunccd == null)) {
                throw new System.ArgumentNullException("hsfunccd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(hsfunccd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int refnum, string hsfunccd, int Original_refnum, string Original_hsfunccd) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            if ((hsfunccd == null)) {
                throw new System.ArgumentNullException("hsfunccd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(hsfunccd));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_refnum));
            if ((Original_hsfunccd == null)) {
                throw new System.ArgumentNullException("Original_hsfunccd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_hsfunccd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LEVSGDTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LEVSGDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LEVSGD";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("levsgcd", "levsgcd");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[LEVSGD] WHERE (([refnum] = @Original_refnum) AND ([levsgcd] = " +
                "@Original_levsgcd))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_levsgcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "levsgcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[LEVSGD] ([refnum], [levsgcd]) VALUES (@refnum, @levsgcd);\r\nSEL" +
                "ECT refnum, levsgcd FROM LEVSGD WHERE (levsgcd = @levsgcd) AND (refnum = @refnum" +
                ")";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@levsgcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "levsgcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[LEVSGD] SET [refnum] = @refnum, [levsgcd] = @levsgcd WHERE (([refnu" +
                "m] = @Original_refnum) AND ([levsgcd] = @Original_levsgcd));\r\nSELECT refnum, lev" +
                "sgcd FROM LEVSGD WHERE (levsgcd = @levsgcd) AND (refnum = @refnum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@levsgcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "levsgcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_levsgcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "levsgcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, levsgcd FROM dbo.LEVSGD";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.LEVSGDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.LEVSGDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.LEVSGDDataTable dataTable = new NrhpDatabase.LEVSGDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.LEVSGDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "LEVSGD");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, string Original_levsgcd) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            if ((Original_levsgcd == null)) {
                throw new System.ArgumentNullException("Original_levsgcd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_levsgcd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, string levsgcd) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            if ((levsgcd == null)) {
                throw new System.ArgumentNullException("levsgcd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(levsgcd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int refnum, string levsgcd, int Original_refnum, string Original_levsgcd) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            if ((levsgcd == null)) {
                throw new System.ArgumentNullException("levsgcd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(levsgcd));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_refnum));
            if ((Original_levsgcd == null)) {
                throw new System.ArgumentNullException("Original_levsgcd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_levsgcd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LEVSGMTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LEVSGMTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LEVSGM";
            tableMapping.ColumnMappings.Add("levsgcd", "levsgcd");
            tableMapping.ColumnMappings.Add("levsg", "levsg");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[LEVSGM] WHERE (([levsgcd] = @Original_levsgcd) AND ([levsg] = " +
                "@Original_levsg))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_levsgcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "levsgcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_levsg", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "levsg", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[LEVSGM] ([levsgcd], [levsg]) VALUES (@levsgcd, @levsg);\r\nSELEC" +
                "T levsgcd, levsg FROM LEVSGM WHERE (levsgcd = @levsgcd)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@levsgcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "levsgcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@levsg", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "levsg", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[LEVSGM] SET [levsgcd] = @levsgcd, [levsg] = @levsg WHERE (([levsgcd" +
                "] = @Original_levsgcd) AND ([levsg] = @Original_levsg));\r\nSELECT levsgcd, levsg " +
                "FROM LEVSGM WHERE (levsgcd = @levsgcd)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@levsgcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "levsgcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@levsg", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "levsg", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_levsgcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "levsgcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_levsg", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "levsg", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT levsgcd, levsg FROM dbo.LEVSGM";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.LEVSGMDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.LEVSGMDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.LEVSGMDataTable dataTable = new NrhpDatabase.LEVSGMDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.LEVSGMDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "LEVSGM");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_levsgcd, string Original_levsg) {
            if ((Original_levsgcd == null)) {
                throw new System.ArgumentNullException("Original_levsgcd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_levsgcd));
            }
            if ((Original_levsg == null)) {
                throw new System.ArgumentNullException("Original_levsg");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_levsg));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string levsgcd, string levsg) {
            if ((levsgcd == null)) {
                throw new System.ArgumentNullException("levsgcd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(levsgcd));
            }
            if ((levsg == null)) {
                throw new System.ArgumentNullException("levsg");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(levsg));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string levsgcd, string levsg, string Original_levsgcd, string Original_levsg) {
            if ((levsgcd == null)) {
                throw new System.ArgumentNullException("levsgcd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(levsgcd));
            }
            if ((levsg == null)) {
                throw new System.ArgumentNullException("levsg");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(levsg));
            }
            if ((Original_levsgcd == null)) {
                throw new System.ArgumentNullException("Original_levsgcd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_levsgcd));
            }
            if ((Original_levsg == null)) {
                throw new System.ArgumentNullException("Original_levsg");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_levsg));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MATDTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MATDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MATD";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("matcd", "matcd");
            tableMapping.ColumnMappings.Add("matypecd", "matypecd");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MATD] WHERE (([refnum] = @Original_refnum) AND ([matcd] = @Ori" +
                "ginal_matcd) AND ([matypecd] = @Original_matypecd))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_matcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "matcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_matypecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "matypecd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MATD] ([refnum], [matcd], [matypecd]) VALUES (@refnum, @matcd," +
                " @matypecd);\r\nSELECT refnum, matcd, matypecd FROM MATD WHERE (matcd = @matcd) AN" +
                "D (matypecd = @matypecd) AND (refnum = @refnum)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@matcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "matcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@matypecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "matypecd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[MATD] SET [refnum] = @refnum, [matcd] = @matcd, [matypecd] = @matypecd WHERE (([refnum] = @Original_refnum) AND ([matcd] = @Original_matcd) AND ([matypecd] = @Original_matypecd));
SELECT refnum, matcd, matypecd FROM MATD WHERE (matcd = @matcd) AND (matypecd = @matypecd) AND (refnum = @refnum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@matcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "matcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@matypecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "matypecd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_matcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "matcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_matypecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "matypecd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, matcd, matypecd FROM dbo.MATD";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.MATDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.MATDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.MATDDataTable dataTable = new NrhpDatabase.MATDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.MATDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "MATD");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, int Original_matcd, string Original_matypecd) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_matcd));
            if ((Original_matypecd == null)) {
                throw new System.ArgumentNullException("Original_matypecd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_matypecd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, int matcd, string matypecd) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(matcd));
            if ((matypecd == null)) {
                throw new System.ArgumentNullException("matypecd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(matypecd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int refnum, int matcd, string matypecd, int Original_refnum, int Original_matcd, string Original_matypecd) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(matcd));
            if ((matypecd == null)) {
                throw new System.ArgumentNullException("matypecd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(matypecd));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_refnum));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_matcd));
            if ((Original_matypecd == null)) {
                throw new System.ArgumentNullException("Original_matypecd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_matypecd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MATMTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MATMTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MATM";
            tableMapping.ColumnMappings.Add("matcd", "matcd");
            tableMapping.ColumnMappings.Add("mat", "mat");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MATM] WHERE (([matcd] = @Original_matcd) AND ([mat] = @Origina" +
                "l_mat))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_matcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "matcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_mat", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "mat", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MATM] ([matcd], [mat]) VALUES (@matcd, @mat);\r\nSELECT matcd, m" +
                "at FROM MATM WHERE (matcd = @matcd)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@matcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "matcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@mat", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "mat", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[MATM] SET [matcd] = @matcd, [mat] = @mat WHERE (([matcd] = @Origina" +
                "l_matcd) AND ([mat] = @Original_mat));\r\nSELECT matcd, mat FROM MATM WHERE (matcd" +
                " = @matcd)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@matcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "matcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@mat", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "mat", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_matcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "matcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_mat", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "mat", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT matcd, mat FROM dbo.MATM";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.MATMDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.MATMDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.MATMDataTable dataTable = new NrhpDatabase.MATMDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.MATMDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "MATM");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_matcd, string Original_mat) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_matcd));
            if ((Original_mat == null)) {
                throw new System.ArgumentNullException("Original_mat");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_mat));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int matcd, string mat) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(matcd));
            if ((mat == null)) {
                throw new System.ArgumentNullException("mat");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(mat));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int matcd, string mat, int Original_matcd, string Original_mat) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(matcd));
            if ((mat == null)) {
                throw new System.ArgumentNullException("mat");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(mat));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_matcd));
            if ((Original_mat == null)) {
                throw new System.ArgumentNullException("Original_mat");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_mat));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class NOMNADTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NOMNADTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "NOMNAD";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("nomnacd", "nomnacd");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[NOMNAD] WHERE (([refnum] = @Original_refnum) AND ([nomnacd] = " +
                "@Original_nomnacd))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nomnacd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nomnacd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[NOMNAD] ([refnum], [nomnacd]) VALUES (@refnum, @nomnacd);\r\nSEL" +
                "ECT refnum, nomnacd FROM NOMNAD WHERE (nomnacd = @nomnacd) AND (refnum = @refnum" +
                ")";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nomnacd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nomnacd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[NOMNAD] SET [refnum] = @refnum, [nomnacd] = @nomnacd WHERE (([refnu" +
                "m] = @Original_refnum) AND ([nomnacd] = @Original_nomnacd));\r\nSELECT refnum, nom" +
                "nacd FROM NOMNAD WHERE (nomnacd = @nomnacd) AND (refnum = @refnum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nomnacd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nomnacd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nomnacd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nomnacd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, nomnacd FROM dbo.NOMNAD";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.NOMNADDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.NOMNADDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.NOMNADDataTable dataTable = new NrhpDatabase.NOMNADDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.NOMNADDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "NOMNAD");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, string Original_nomnacd) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            if ((Original_nomnacd == null)) {
                throw new System.ArgumentNullException("Original_nomnacd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_nomnacd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, string nomnacd) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            if ((nomnacd == null)) {
                throw new System.ArgumentNullException("nomnacd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(nomnacd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int refnum, string nomnacd, int Original_refnum, string Original_nomnacd) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            if ((nomnacd == null)) {
                throw new System.ArgumentNullException("nomnacd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(nomnacd));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_refnum));
            if ((Original_nomnacd == null)) {
                throw new System.ArgumentNullException("Original_nomnacd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_nomnacd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class NOMNAMTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NOMNAMTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "NOMNAM";
            tableMapping.ColumnMappings.Add("nomnacd", "nomnacd");
            tableMapping.ColumnMappings.Add("nomna", "nomna");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[NOMNAM] WHERE (([nomnacd] = @Original_nomnacd) AND ([nomna] = " +
                "@Original_nomna))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nomnacd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nomnacd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nomna", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nomna", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[NOMNAM] ([nomnacd], [nomna]) VALUES (@nomnacd, @nomna);\r\nSELEC" +
                "T nomnacd, nomna FROM NOMNAM WHERE (nomnacd = @nomnacd)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nomnacd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nomnacd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nomna", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nomna", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[NOMNAM] SET [nomnacd] = @nomnacd, [nomna] = @nomna WHERE (([nomnacd" +
                "] = @Original_nomnacd) AND ([nomna] = @Original_nomna));\r\nSELECT nomnacd, nomna " +
                "FROM NOMNAM WHERE (nomnacd = @nomnacd)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nomnacd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nomnacd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nomna", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nomna", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nomnacd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nomnacd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nomna", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nomna", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT nomnacd, nomna FROM dbo.NOMNAM";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.NOMNAMDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.NOMNAMDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.NOMNAMDataTable dataTable = new NrhpDatabase.NOMNAMDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.NOMNAMDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "NOMNAM");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_nomnacd, string Original_nomna) {
            if ((Original_nomnacd == null)) {
                throw new System.ArgumentNullException("Original_nomnacd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_nomnacd));
            }
            if ((Original_nomna == null)) {
                throw new System.ArgumentNullException("Original_nomna");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_nomna));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string nomnacd, string nomna) {
            if ((nomnacd == null)) {
                throw new System.ArgumentNullException("nomnacd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(nomnacd));
            }
            if ((nomna == null)) {
                throw new System.ArgumentNullException("nomna");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(nomna));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string nomnacd, string nomna, string Original_nomnacd, string Original_nomna) {
            if ((nomnacd == null)) {
                throw new System.ArgumentNullException("nomnacd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(nomnacd));
            }
            if ((nomna == null)) {
                throw new System.ArgumentNullException("nomna");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(nomna));
            }
            if ((Original_nomnacd == null)) {
                throw new System.ArgumentNullException("Original_nomnacd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_nomnacd));
            }
            if ((Original_nomna == null)) {
                throw new System.ArgumentNullException("Original_nomna");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_nomna));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class NOMNAMEDTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NOMNAMEDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "NOMNAMED";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("nomname", "nomname");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[NOMNAMED] WHERE (([refnum] = @Original_refnum) AND ([nomname] " +
                "= @Original_nomname))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nomname", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nomname", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[NOMNAMED] ([refnum], [nomname]) VALUES (@refnum, @nomname);\r\nS" +
                "ELECT refnum, nomname FROM NOMNAMED WHERE (nomname = @nomname) AND (refnum = @re" +
                "fnum)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nomname", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nomname", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[NOMNAMED] SET [refnum] = @refnum, [nomname] = @nomname WHERE (([ref" +
                "num] = @Original_refnum) AND ([nomname] = @Original_nomname));\r\nSELECT refnum, n" +
                "omname FROM NOMNAMED WHERE (nomname = @nomname) AND (refnum = @refnum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nomname", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nomname", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nomname", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nomname", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, nomname FROM dbo.NOMNAMED";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.NOMNAMEDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.NOMNAMEDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.NOMNAMEDDataTable dataTable = new NrhpDatabase.NOMNAMEDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.NOMNAMEDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "NOMNAMED");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, string Original_nomname) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            if ((Original_nomname == null)) {
                throw new System.ArgumentNullException("Original_nomname");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_nomname));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, string nomname) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            if ((nomname == null)) {
                throw new System.ArgumentNullException("nomname");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(nomname));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int refnum, string nomname, int Original_refnum, string Original_nomname) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            if ((nomname == null)) {
                throw new System.ArgumentNullException("nomname");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(nomname));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_refnum));
            if ((Original_nomname == null)) {
                throw new System.ArgumentNullException("Original_nomname");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_nomname));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OSTATEDTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OSTATEDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OSTATED";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("statecd", "statecd");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[OSTATED] WHERE (([refnum] = @Original_refnum) AND ([statecd] =" +
                " @Original_statecd))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_statecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "statecd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[OSTATED] ([refnum], [statecd]) VALUES (@refnum, @statecd);\r\nSE" +
                "LECT refnum, statecd FROM OSTATED WHERE (refnum = @refnum) AND (statecd = @state" +
                "cd)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@statecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "statecd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[OSTATED] SET [refnum] = @refnum, [statecd] = @statecd WHERE (([refn" +
                "um] = @Original_refnum) AND ([statecd] = @Original_statecd));\r\nSELECT refnum, st" +
                "atecd FROM OSTATED WHERE (refnum = @refnum) AND (statecd = @statecd)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@statecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "statecd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_statecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "statecd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, statecd FROM dbo.OSTATED";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.OSTATEDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.OSTATEDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.OSTATEDDataTable dataTable = new NrhpDatabase.OSTATEDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.OSTATEDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "OSTATED");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, string Original_statecd) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            if ((Original_statecd == null)) {
                throw new System.ArgumentNullException("Original_statecd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_statecd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, string statecd) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            if ((statecd == null)) {
                throw new System.ArgumentNullException("statecd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(statecd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int refnum, string statecd, int Original_refnum, string Original_statecd) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            if ((statecd == null)) {
                throw new System.ArgumentNullException("statecd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(statecd));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_refnum));
            if ((Original_statecd == null)) {
                throw new System.ArgumentNullException("Original_statecd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_statecd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OTHCERTDTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OTHCERTDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OTHCERTD";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("ocertcd", "ocertcd");
            tableMapping.ColumnMappings.Add("ocertdte", "ocertdte");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[OTHCERTD] WHERE (([refnum] = @Original_refnum) AND ([ocertcd] " +
                "= @Original_ocertcd) AND ([ocertdte] = @Original_ocertdte))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ocertcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ocertcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ocertdte", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "ocertdte", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[OTHCERTD] ([refnum], [ocertcd], [ocertdte]) VALUES (@refnum, @" +
                "ocertcd, @ocertdte);\r\nSELECT refnum, ocertcd, ocertdte FROM OTHCERTD WHERE (ocer" +
                "tcd = @ocertcd) AND (ocertdte = @ocertdte) AND (refnum = @refnum)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ocertcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ocertcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ocertdte", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "ocertdte", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[OTHCERTD] SET [refnum] = @refnum, [ocertcd] = @ocertcd, [ocertdte] = @ocertdte WHERE (([refnum] = @Original_refnum) AND ([ocertcd] = @Original_ocertcd) AND ([ocertdte] = @Original_ocertdte));
SELECT refnum, ocertcd, ocertdte FROM OTHCERTD WHERE (ocertcd = @ocertcd) AND (ocertdte = @ocertdte) AND (refnum = @refnum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ocertcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ocertcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ocertdte", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "ocertdte", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ocertcd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ocertcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ocertdte", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "ocertdte", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, ocertcd, ocertdte FROM dbo.OTHCERTD";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.OTHCERTDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.OTHCERTDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.OTHCERTDDataTable dataTable = new NrhpDatabase.OTHCERTDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.OTHCERTDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "OTHCERTD");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, string Original_ocertcd, System.DateTime Original_ocertdte) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            if ((Original_ocertcd == null)) {
                throw new System.ArgumentNullException("Original_ocertcd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_ocertcd));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_ocertdte));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, string ocertcd, System.DateTime ocertdte) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            if ((ocertcd == null)) {
                throw new System.ArgumentNullException("ocertcd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ocertcd));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(ocertdte));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int refnum, string ocertcd, System.DateTime ocertdte, int Original_refnum, string Original_ocertcd, System.DateTime Original_ocertdte) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            if ((ocertcd == null)) {
                throw new System.ArgumentNullException("ocertcd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ocertcd));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(ocertdte));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_refnum));
            if ((Original_ocertcd == null)) {
                throw new System.ArgumentNullException("Original_ocertcd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_ocertcd));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(Original_ocertdte));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OTHDOCDTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OTHDOCDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OTHDOCD";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("othdoccd", "othdoccd");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[OTHDOCD] WHERE (([refnum] = @Original_refnum) AND ([othdoccd] " +
                "= @Original_othdoccd))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_othdoccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "othdoccd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[OTHDOCD] ([refnum], [othdoccd]) VALUES (@refnum, @othdoccd);\r\n" +
                "SELECT refnum, othdoccd FROM OTHDOCD WHERE (othdoccd = @othdoccd) AND (refnum = " +
                "@refnum)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@othdoccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "othdoccd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[OTHDOCD] SET [refnum] = @refnum, [othdoccd] = @othdoccd WHERE (([re" +
                "fnum] = @Original_refnum) AND ([othdoccd] = @Original_othdoccd));\r\nSELECT refnum" +
                ", othdoccd FROM OTHDOCD WHERE (othdoccd = @othdoccd) AND (refnum = @refnum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@othdoccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "othdoccd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_othdoccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "othdoccd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, othdoccd FROM dbo.OTHDOCD";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.OTHDOCDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.OTHDOCDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.OTHDOCDDataTable dataTable = new NrhpDatabase.OTHDOCDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.OTHDOCDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "OTHDOCD");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, string Original_othdoccd) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            if ((Original_othdoccd == null)) {
                throw new System.ArgumentNullException("Original_othdoccd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_othdoccd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, string othdoccd) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            if ((othdoccd == null)) {
                throw new System.ArgumentNullException("othdoccd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(othdoccd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int refnum, string othdoccd, int Original_refnum, string Original_othdoccd) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            if ((othdoccd == null)) {
                throw new System.ArgumentNullException("othdoccd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(othdoccd));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_refnum));
            if ((Original_othdoccd == null)) {
                throw new System.ArgumentNullException("Original_othdoccd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_othdoccd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OTHDOCMTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OTHDOCMTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OTHDOCM";
            tableMapping.ColumnMappings.Add("othdoccd", "othdoccd");
            tableMapping.ColumnMappings.Add("othdoc", "othdoc");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[OTHDOCM] WHERE (([othdoccd] = @Original_othdoccd) AND ([othdoc" +
                "] = @Original_othdoc))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_othdoccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "othdoccd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_othdoc", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "othdoc", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[OTHDOCM] ([othdoccd], [othdoc]) VALUES (@othdoccd, @othdoc);\r\n" +
                "SELECT othdoccd, othdoc FROM OTHDOCM WHERE (othdoccd = @othdoccd)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@othdoccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "othdoccd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@othdoc", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "othdoc", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[OTHDOCM] SET [othdoccd] = @othdoccd, [othdoc] = @othdoc WHERE (([ot" +
                "hdoccd] = @Original_othdoccd) AND ([othdoc] = @Original_othdoc));\r\nSELECT othdoc" +
                "cd, othdoc FROM OTHDOCM WHERE (othdoccd = @othdoccd)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@othdoccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "othdoccd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@othdoc", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "othdoc", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_othdoccd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "othdoccd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_othdoc", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "othdoc", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT othdoccd, othdoc FROM dbo.OTHDOCM";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.OTHDOCMDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.OTHDOCMDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.OTHDOCMDataTable dataTable = new NrhpDatabase.OTHDOCMDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.OTHDOCMDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "OTHDOCM");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_othdoccd, string Original_othdoc) {
            if ((Original_othdoccd == null)) {
                throw new System.ArgumentNullException("Original_othdoccd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_othdoccd));
            }
            if ((Original_othdoc == null)) {
                throw new System.ArgumentNullException("Original_othdoc");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_othdoc));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string othdoccd, string othdoc) {
            if ((othdoccd == null)) {
                throw new System.ArgumentNullException("othdoccd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(othdoccd));
            }
            if ((othdoc == null)) {
                throw new System.ArgumentNullException("othdoc");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(othdoc));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string othdoccd, string othdoc, string Original_othdoccd, string Original_othdoc) {
            if ((othdoccd == null)) {
                throw new System.ArgumentNullException("othdoccd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(othdoccd));
            }
            if ((othdoc == null)) {
                throw new System.ArgumentNullException("othdoc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(othdoc));
            }
            if ((Original_othdoccd == null)) {
                throw new System.ArgumentNullException("Original_othdoccd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_othdoccd));
            }
            if ((Original_othdoc == null)) {
                throw new System.ArgumentNullException("Original_othdoc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_othdoc));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OTHNAMEDTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OTHNAMEDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OTHNAMED";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("othrname", "othrname");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[OTHNAMED] WHERE (([refnum] = @Original_refnum) AND ([othrname]" +
                " = @Original_othrname))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_othrname", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "othrname", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[OTHNAMED] ([refnum], [othrname]) VALUES (@refnum, @othrname);\r" +
                "\nSELECT refnum, othrname FROM OTHNAMED WHERE (othrname = @othrname) AND (refnum " +
                "= @refnum)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@othrname", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "othrname", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[OTHNAMED] SET [refnum] = @refnum, [othrname] = @othrname WHERE (([r" +
                "efnum] = @Original_refnum) AND ([othrname] = @Original_othrname));\r\nSELECT refnu" +
                "m, othrname FROM OTHNAMED WHERE (othrname = @othrname) AND (refnum = @refnum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@othrname", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "othrname", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_othrname", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "othrname", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, othrname FROM dbo.OTHNAMED";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.OTHNAMEDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.OTHNAMEDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.OTHNAMEDDataTable dataTable = new NrhpDatabase.OTHNAMEDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.OTHNAMEDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "OTHNAMED");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, string Original_othrname) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            if ((Original_othrname == null)) {
                throw new System.ArgumentNullException("Original_othrname");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_othrname));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, string othrname) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            if ((othrname == null)) {
                throw new System.ArgumentNullException("othrname");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(othrname));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int refnum, string othrname, int Original_refnum, string Original_othrname) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            if ((othrname == null)) {
                throw new System.ArgumentNullException("othrname");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(othrname));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_refnum));
            if ((Original_othrname == null)) {
                throw new System.ArgumentNullException("Original_othrname");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_othrname));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OWNERDTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OWNERDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OWNERD";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("ownercd", "ownercd");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[OWNERD] WHERE (([refnum] = @Original_refnum) AND ([ownercd] = " +
                "@Original_ownercd))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ownercd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ownercd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[OWNERD] ([refnum], [ownercd]) VALUES (@refnum, @ownercd);\r\nSEL" +
                "ECT refnum, ownercd FROM OWNERD WHERE (ownercd = @ownercd) AND (refnum = @refnum" +
                ")";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ownercd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ownercd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[OWNERD] SET [refnum] = @refnum, [ownercd] = @ownercd WHERE (([refnu" +
                "m] = @Original_refnum) AND ([ownercd] = @Original_ownercd));\r\nSELECT refnum, own" +
                "ercd FROM OWNERD WHERE (ownercd = @ownercd) AND (refnum = @refnum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ownercd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ownercd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ownercd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ownercd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, ownercd FROM dbo.OWNERD";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.OWNERDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.OWNERDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.OWNERDDataTable dataTable = new NrhpDatabase.OWNERDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.OWNERDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "OWNERD");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, string Original_ownercd) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            if ((Original_ownercd == null)) {
                throw new System.ArgumentNullException("Original_ownercd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_ownercd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, string ownercd) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            if ((ownercd == null)) {
                throw new System.ArgumentNullException("ownercd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ownercd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int refnum, string ownercd, int Original_refnum, string Original_ownercd) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            if ((ownercd == null)) {
                throw new System.ArgumentNullException("ownercd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ownercd));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_refnum));
            if ((Original_ownercd == null)) {
                throw new System.ArgumentNullException("Original_ownercd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_ownercd));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OWNERMTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OWNERMTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OWNERM";
            tableMapping.ColumnMappings.Add("ownercd", "ownercd");
            tableMapping.ColumnMappings.Add("owner", "owner");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[OWNERM] WHERE (([ownercd] = @Original_ownercd) AND ([owner] = " +
                "@Original_owner))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ownercd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ownercd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_owner", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "owner", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[OWNERM] ([ownercd], [owner]) VALUES (@ownercd, @owner);\r\nSELEC" +
                "T ownercd, owner FROM OWNERM WHERE (ownercd = @ownercd)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ownercd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ownercd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@owner", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "owner", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[OWNERM] SET [ownercd] = @ownercd, [owner] = @owner WHERE (([ownercd" +
                "] = @Original_ownercd) AND ([owner] = @Original_owner));\r\nSELECT ownercd, owner " +
                "FROM OWNERM WHERE (ownercd = @ownercd)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ownercd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ownercd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@owner", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "owner", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ownercd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ownercd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_owner", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "owner", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ownercd, owner FROM dbo.OWNERM";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.OWNERMDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.OWNERMDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.OWNERMDataTable dataTable = new NrhpDatabase.OWNERMDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.OWNERMDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "OWNERM");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_ownercd, string Original_owner) {
            if ((Original_ownercd == null)) {
                throw new System.ArgumentNullException("Original_ownercd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_ownercd));
            }
            if ((Original_owner == null)) {
                throw new System.ArgumentNullException("Original_owner");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_owner));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ownercd, string owner) {
            if ((ownercd == null)) {
                throw new System.ArgumentNullException("ownercd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ownercd));
            }
            if ((owner == null)) {
                throw new System.ArgumentNullException("owner");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(owner));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ownercd, string owner, string Original_ownercd, string Original_owner) {
            if ((ownercd == null)) {
                throw new System.ArgumentNullException("ownercd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ownercd));
            }
            if ((owner == null)) {
                throw new System.ArgumentNullException("owner");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(owner));
            }
            if ((Original_ownercd == null)) {
                throw new System.ArgumentNullException("Original_ownercd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_ownercd));
            }
            if ((Original_owner == null)) {
                throw new System.ArgumentNullException("Original_owner");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_owner));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PERIODDTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PERIODDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PERIODD";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("periodcd", "periodcd");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[PERIODD] WHERE (([refnum] = @Original_refnum) AND ([periodcd] " +
                "= @Original_periodcd))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_periodcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "periodcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PERIODD] ([refnum], [periodcd]) VALUES (@refnum, @periodcd);\r\n" +
                "SELECT refnum, periodcd FROM PERIODD WHERE (periodcd = @periodcd) AND (refnum = " +
                "@refnum)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@periodcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "periodcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[PERIODD] SET [refnum] = @refnum, [periodcd] = @periodcd WHERE (([re" +
                "fnum] = @Original_refnum) AND ([periodcd] = @Original_periodcd));\r\nSELECT refnum" +
                ", periodcd FROM PERIODD WHERE (periodcd = @periodcd) AND (refnum = @refnum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@periodcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "periodcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_periodcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "periodcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, periodcd FROM dbo.PERIODD";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.PERIODDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.PERIODDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.PERIODDDataTable dataTable = new NrhpDatabase.PERIODDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.PERIODDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "PERIODD");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, int Original_periodcd) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_periodcd));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, int periodcd) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(periodcd));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int refnum, int periodcd, int Original_refnum, int Original_periodcd) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(periodcd));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_refnum));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_periodcd));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PERIODMTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PERIODMTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PERIODM";
            tableMapping.ColumnMappings.Add("periodcd", "periodcd");
            tableMapping.ColumnMappings.Add("period", "period");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[PERIODM] WHERE (([periodcd] = @Original_periodcd) AND ([period" +
                "] = @Original_period))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_periodcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "periodcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_period", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "period", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PERIODM] ([periodcd], [period]) VALUES (@periodcd, @period);\r\n" +
                "SELECT periodcd, period FROM PERIODM WHERE (periodcd = @periodcd)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@periodcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "periodcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@period", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "period", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[PERIODM] SET [periodcd] = @periodcd, [period] = @period WHERE (([pe" +
                "riodcd] = @Original_periodcd) AND ([period] = @Original_period));\r\nSELECT period" +
                "cd, period FROM PERIODM WHERE (periodcd = @periodcd)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@periodcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "periodcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@period", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "period", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_periodcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "periodcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_period", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "period", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT periodcd, period FROM dbo.PERIODM";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.PERIODMDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.PERIODMDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.PERIODMDataTable dataTable = new NrhpDatabase.PERIODMDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.PERIODMDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "PERIODM");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_periodcd, string Original_period) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_periodcd));
            if ((Original_period == null)) {
                throw new System.ArgumentNullException("Original_period");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_period));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int periodcd, string period) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(periodcd));
            if ((period == null)) {
                throw new System.ArgumentNullException("period");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(period));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int periodcd, string period, int Original_periodcd, string Original_period) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(periodcd));
            if ((period == null)) {
                throw new System.ArgumentNullException("period");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(period));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_periodcd));
            if ((Original_period == null)) {
                throw new System.ArgumentNullException("Original_period");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_period));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PossibleArticlesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PossibleArticlesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PossibleArticles";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("ArticleID", "ArticleID");
            tableMapping.ColumnMappings.Add("ArticleContent", "ArticleContent");
            tableMapping.ColumnMappings.Add("FoundOn", "FoundOn");
            tableMapping.ColumnMappings.Add("FoundReason", "FoundReason");
            tableMapping.ColumnMappings.Add("NotAMatch", "NotAMatch");
            tableMapping.ColumnMappings.Add("SeeAlso", "SeeAlso");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [PossibleArticles] WHERE (([refnum] = @Original_refnum) AND ([ArticleID] = @Original_ArticleID) AND ([FoundOn] = @Original_FoundOn) AND ((@IsNull_NotAMatch = 1 AND [NotAMatch] IS NULL) OR ([NotAMatch] = @Original_NotAMatch)) AND ((@IsNull_SeeAlso = 1 AND [SeeAlso] IS NULL) OR ([SeeAlso] = @Original_SeeAlso)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ArticleID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ArticleID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FoundOn", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FoundOn", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_NotAMatch", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NotAMatch", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NotAMatch", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "NotAMatch", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_SeeAlso", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SeeAlso", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SeeAlso", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SeeAlso", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [PossibleArticles] ([refnum], [ArticleID], [ArticleContent], [FoundOn], [FoundReason], [NotAMatch], [SeeAlso]) VALUES (@refnum, @ArticleID, @ArticleContent, @FoundOn, @FoundReason, @NotAMatch, @SeeAlso);
SELECT refnum, ArticleID, ArticleContent, FoundOn, FoundReason, NotAMatch, SeeAlso FROM PossibleArticles WHERE (ArticleID = @ArticleID) AND (refnum = @refnum) ORDER BY FoundOn";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ArticleID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ArticleID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ArticleContent", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "ArticleContent", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FoundOn", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FoundOn", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FoundReason", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "FoundReason", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NotAMatch", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "NotAMatch", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SeeAlso", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SeeAlso", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [PossibleArticles] SET [refnum] = @refnum, [ArticleID] = @ArticleID, [ArticleContent] = @ArticleContent, [FoundOn] = @FoundOn, [FoundReason] = @FoundReason, [NotAMatch] = @NotAMatch, [SeeAlso] = @SeeAlso WHERE (([refnum] = @Original_refnum) AND ([ArticleID] = @Original_ArticleID) AND ([FoundOn] = @Original_FoundOn) AND ((@IsNull_NotAMatch = 1 AND [NotAMatch] IS NULL) OR ([NotAMatch] = @Original_NotAMatch)) AND ((@IsNull_SeeAlso = 1 AND [SeeAlso] IS NULL) OR ([SeeAlso] = @Original_SeeAlso)));
SELECT refnum, ArticleID, ArticleContent, FoundOn, FoundReason, NotAMatch, SeeAlso FROM PossibleArticles WHERE (ArticleID = @ArticleID) AND (refnum = @refnum) ORDER BY FoundOn";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ArticleID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ArticleID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ArticleContent", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "ArticleContent", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FoundOn", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FoundOn", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FoundReason", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "FoundReason", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NotAMatch", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "NotAMatch", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SeeAlso", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SeeAlso", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ArticleID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ArticleID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FoundOn", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FoundOn", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_NotAMatch", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NotAMatch", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NotAMatch", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "NotAMatch", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_SeeAlso", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SeeAlso", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SeeAlso", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SeeAlso", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     refnum, ArticleID, ArticleContent, FoundOn, FoundReason, NotAMatch, Se" +
                "eAlso\r\nFROM         PossibleArticles\r\nORDER BY FoundOn";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT     refnum, ArticleID, ArticleContent, FoundOn, FoundReason, NotAMatch, Se" +
                "eAlso\r\nFROM         PossibleArticles\r\nWHERE     (NotAMatch IS NULL) AND (SeeAlso" +
                " IS NULL)\r\nORDER BY FoundOn desc";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.PossibleArticlesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.PossibleArticlesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.PossibleArticlesDataTable dataTable = new NrhpDatabase.PossibleArticlesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillNeedingEvaluation(NrhpDatabase.PossibleArticlesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.PossibleArticlesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "PossibleArticles");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, int Original_ArticleID, System.DateTime Original_FoundOn, System.Nullable<System.DateTime> Original_NotAMatch, System.Nullable<System.DateTime> Original_SeeAlso) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ArticleID));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_FoundOn));
            if ((Original_NotAMatch.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_NotAMatch.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_SeeAlso.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(Original_SeeAlso.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, int ArticleID, string ArticleContent, System.DateTime FoundOn, string FoundReason, System.Nullable<System.DateTime> NotAMatch, System.Nullable<System.DateTime> SeeAlso) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ArticleID));
            if ((ArticleContent == null)) {
                throw new System.ArgumentNullException("ArticleContent");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ArticleContent));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(FoundOn));
            if ((FoundReason == null)) {
                throw new System.ArgumentNullException("FoundReason");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(FoundReason));
            }
            if ((NotAMatch.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(NotAMatch.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((SeeAlso.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(SeeAlso.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int refnum, int ArticleID, string ArticleContent, System.DateTime FoundOn, string FoundReason, System.Nullable<System.DateTime> NotAMatch, System.Nullable<System.DateTime> SeeAlso, int Original_refnum, int Original_ArticleID, System.DateTime Original_FoundOn, System.Nullable<System.DateTime> Original_NotAMatch, System.Nullable<System.DateTime> Original_SeeAlso) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ArticleID));
            if ((ArticleContent == null)) {
                throw new System.ArgumentNullException("ArticleContent");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ArticleContent));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(FoundOn));
            if ((FoundReason == null)) {
                throw new System.ArgumentNullException("FoundReason");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(FoundReason));
            }
            if ((NotAMatch.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(NotAMatch.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((SeeAlso.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(SeeAlso.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_refnum));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_ArticleID));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(Original_FoundOn));
            if ((Original_NotAMatch.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Original_NotAMatch.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((Original_SeeAlso.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(Original_SeeAlso.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PROPMAINTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PROPMAINTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PROPMAIN";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("resname", "resname");
            tableMapping.ColumnMappings.Add("address", "address");
            tableMapping.ColumnMappings.Add("restrict", "restrict");
            tableMapping.ColumnMappings.Add("retypecd", "retypecd");
            tableMapping.ColumnMappings.Add("numcbldg", "numcbldg");
            tableMapping.ColumnMappings.Add("numcsite", "numcsite");
            tableMapping.ColumnMappings.Add("numcstrc", "numcstrc");
            tableMapping.ColumnMappings.Add("numcobj", "numcobj");
            tableMapping.ColumnMappings.Add("numnbldg", "numnbldg");
            tableMapping.ColumnMappings.Add("numnsite", "numnsite");
            tableMapping.ColumnMappings.Add("numnstrc", "numnstrc");
            tableMapping.ColumnMappings.Add("numnobj", "numnobj");
            tableMapping.ColumnMappings.Add("parknmcd", "parknmcd");
            tableMapping.ColumnMappings.Add("certcd", "certcd");
            tableMapping.ColumnMappings.Add("certdate", "certdate");
            tableMapping.ColumnMappings.Add("descothr", "descothr");
            tableMapping.ColumnMappings.Add("acre", "acre");
            tableMapping.ColumnMappings.Add("multname", "multname");
            tableMapping.ColumnMappings.Add("ArticleID", "ArticleID");
            tableMapping.ColumnMappings.Add("CleanName", "CleanName");
            tableMapping.ColumnMappings.Add("MainArticleRefnum", "MainArticleRefnum");
            tableMapping.ColumnMappings.Add("PrimaryState", "PrimaryState");
            tableMapping.ColumnMappings.Add("PrimaryCounty", "PrimaryCounty");
            tableMapping.ColumnMappings.Add("PrimaryCity", "PrimaryCity");
            tableMapping.ColumnMappings.Add("PrimaryVicinity", "PrimaryVicinity");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    PROPMAIN\r\nSET              CleanName = @CleanName, ArticleID = @Article" +
                "ID, MainArticleRefnum = @MainArticleRefnum\r\nWHERE     (refnum = @Original_refnum" +
                ")";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CleanName", System.Data.SqlDbType.VarChar, 200, System.Data.ParameterDirection.Input, 0, 0, "CleanName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ArticleID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ArticleID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MainArticleRefnum", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "MainArticleRefnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     pm.refnum, pm.resname, pm.address, pm.[restrict], pm.retypecd, pm.numcbldg, pm.numcsite, pm.numcstrc, pm.numcobj, pm.numnbldg, pm.numnsite, 
                      pm.numnstrc, pm.numnobj, pm.parknmcd, pm.certcd, pm.certdate, pm.descothr, pm.acre, pm.multname, pm.ArticleID, pm.CleanName, 
                      pm.MainArticleRefnum, sm.state AS PrimaryState, cm.county AS PrimaryCounty, cd.city AS PrimaryCity, cd.vicinity AS PrimaryVicinity
FROM         STATEM AS sm INNER JOIN
                      COUNTYD AS cd ON sm.statecd = cd.statecd INNER JOIN
                      PROPMAIN AS pm ON cd.refnum = pm.refnum AND cd.primeflg = 1 INNER JOIN
                      COUNTYM AS cm ON cm.countycd = cd.countycd
WHERE     (pm.certcd IN ('LI', 'NL', 'UN'))
ORDER BY pm.resname";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT     pm.refnum, pm.resname, pm.address, pm.[restrict], pm.retypecd, pm.numcbldg, pm.numcsite, pm.numcstrc, pm.numcobj, pm.numnbldg, pm.numnsite, 
                      pm.numnstrc, pm.numnobj, pm.parknmcd, pm.certcd, pm.certdate, pm.descothr, pm.acre, pm.multname, pm.ArticleID, pm.CleanName, 
                      pm.MainArticleRefnum, sm.state AS PrimaryState, cm.county AS PrimaryCounty, cd.city AS PrimaryCity, cd.vicinity AS PrimaryVicinity
FROM         PROPMAIN AS pm INNER JOIN
                      COUNTYD AS cd ON cd.refnum = pm.refnum AND cd.primeflg = 1 INNER JOIN
                      COUNTYM AS cm ON cm.countycd = cd.countycd INNER JOIN
                      STATEM AS sm ON sm.statecd = cd.statecd
WHERE     (pm.refnum IN
                          (SELECT     refnum
                            FROM          COUNTYD
                            WHERE      (statecd = 'OH'))) AND (pm.certcd IN ('LI', 'NL', 'UN')) AND (pm.refnum IN
                          (SELECT     refnum
                            FROM          PossibleArticles
                            WHERE      (NotAMatch IS NULL) AND (SeeAlso IS NULL))) AND (pm.ArticleID IS NULL)
ORDER BY pm.resname";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT pm.refnum, pm.resname, pm.address, pm.[restrict], pm.retypecd, pm.numcbldg, pm.numcsite, pm.numcstrc, pm.numcobj, pm.numnbldg, pm.numnsite, 
                      pm.numnstrc, pm.numnobj, pm.parknmcd, pm.certcd, pm.certdate, pm.descothr, pm.acre, pm.multname, pm.ArticleID, pm.CleanName, 
                      pm.MainArticleRefnum, sm.state AS PrimaryState, cm.county AS PrimaryCounty, cd.city AS PrimaryCity, cd.vicinity AS PrimaryVicinity
FROM         STATEM AS sm INNER JOIN
                      COUNTYD AS cd ON sm.statecd = cd.statecd INNER JOIN
                      PROPMAIN AS pm ON cd.refnum = pm.refnum AND cd.primeflg = 1 INNER JOIN
                      COUNTYM AS cm ON cm.countycd = cd.countycd
WHERE     (pm.refnum IN
                          (SELECT     refnum
                            FROM          COUNTYD
                            WHERE      (countycd like @countycd))) AND (pm.certcd IN ('LI', 'NL', 'UN')) AND (pm.ArticleID IS NULL) AND (pm.MainArticleRefnum IS NULL)

ORDER BY pm.resname";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@countycd", System.Data.SqlDbType.VarChar, 6, System.Data.ParameterDirection.Input, 0, 0, "", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"SELECT pm.refnum, pm.resname, pm.address, pm.[restrict], pm.retypecd, pm.numcbldg, pm.numcsite, pm.numcstrc, pm.numcobj, pm.numnbldg, pm.numnsite, 
                      pm.numnstrc, pm.numnobj, pm.parknmcd, pm.certcd, pm.certdate, pm.descothr, pm.acre, pm.multname, pm.ArticleID, pm.CleanName, 
                      pm.MainArticleRefnum, sm.state AS PrimaryState, cm.county AS PrimaryCounty, cd.city AS PrimaryCity, cd.vicinity AS PrimaryVicinity
FROM         STATEM AS sm INNER JOIN
                      COUNTYD AS cd ON sm.statecd = cd.statecd INNER JOIN
                      PROPMAIN AS pm ON cd.refnum = pm.refnum AND cd.primeflg = 1 INNER JOIN
                      COUNTYM AS cm ON cm.countycd = cd.countycd
WHERE     (pm.certcd IN ('LI', 'NL', 'UN')) AND Isnull(pm.CleanName, pm.Resname) like @name

ORDER BY sm.state, case cd.vicinity when 1 then cm.county + ' County' else cd.city end, isnull(cleanname, resname)";
            this._commandCollection[3].CommandType = System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.VarChar, 1024, System.Data.ParameterDirection.Input, 0, 0, "", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.PROPMAINDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.PROPMAINDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.PROPMAINDataTable dataTable = new NrhpDatabase.PROPMAINDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillArticlesNeedingChecking(NrhpDatabase.PROPMAINDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByCountyToCreate(NrhpDatabase.PROPMAINDataTable dataTable, string countycd) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((countycd == null)) {
                throw new System.ArgumentNullException("countycd");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(countycd));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByName(NrhpDatabase.PROPMAINDataTable dataTable, string name) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((name == null)) {
                throw new System.ArgumentNullException("name");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(name));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.PROPMAINDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "PROPMAIN");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class RETYPEMTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RETYPEMTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "RETYPEM";
            tableMapping.ColumnMappings.Add("retypecd", "retypecd");
            tableMapping.ColumnMappings.Add("retype", "retype");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[RETYPEM] WHERE (([retypecd] = @Original_retypecd) AND ([retype" +
                "] = @Original_retype))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_retypecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "retypecd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_retype", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "retype", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[RETYPEM] ([retypecd], [retype]) VALUES (@retypecd, @retype);\r\n" +
                "SELECT retypecd, retype FROM RETYPEM WHERE (retypecd = @retypecd)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@retypecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "retypecd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@retype", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "retype", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[RETYPEM] SET [retypecd] = @retypecd, [retype] = @retype WHERE (([re" +
                "typecd] = @Original_retypecd) AND ([retype] = @Original_retype));\r\nSELECT retype" +
                "cd, retype FROM RETYPEM WHERE (retypecd = @retypecd)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@retypecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "retypecd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@retype", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "retype", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_retypecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "retypecd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_retype", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "retype", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT retypecd, retype FROM dbo.RETYPEM";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.RETYPEMDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.RETYPEMDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.RETYPEMDataTable dataTable = new NrhpDatabase.RETYPEMDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.RETYPEMDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "RETYPEM");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_retypecd, string Original_retype) {
            if ((Original_retypecd == null)) {
                throw new System.ArgumentNullException("Original_retypecd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_retypecd));
            }
            if ((Original_retype == null)) {
                throw new System.ArgumentNullException("Original_retype");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_retype));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string retypecd, string retype) {
            if ((retypecd == null)) {
                throw new System.ArgumentNullException("retypecd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(retypecd));
            }
            if ((retype == null)) {
                throw new System.ArgumentNullException("retype");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(retype));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string retypecd, string retype, string Original_retypecd, string Original_retype) {
            if ((retypecd == null)) {
                throw new System.ArgumentNullException("retypecd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(retypecd));
            }
            if ((retype == null)) {
                throw new System.ArgumentNullException("retype");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(retype));
            }
            if ((Original_retypecd == null)) {
                throw new System.ArgumentNullException("Original_retypecd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_retypecd));
            }
            if ((Original_retype == null)) {
                throw new System.ArgumentNullException("Original_retype");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_retype));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SIGNAMEDTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SIGNAMEDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SIGNAMED";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("signame", "signame");
            tableMapping.ColumnMappings.Add("CleanName", "CleanName");
            tableMapping.ColumnMappings.Add("LastName", "LastName");
            tableMapping.ColumnMappings.Add("FirstName", "FirstName");
            tableMapping.ColumnMappings.Add("Suffix", "Suffix");
            tableMapping.ColumnMappings.Add("Prefix", "Prefix");
            tableMapping.ColumnMappings.Add("Middle", "Middle");
            tableMapping.ColumnMappings.Add("OtherPerson", "OtherPerson");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[SIGNAMED] WHERE (([refnum] = @Original_refnum) AND ([signame] = @Original_signame) AND ((@IsNull_CleanName = 1 AND [CleanName] IS NULL) OR ([CleanName] = @Original_CleanName)) AND ((@IsNull_LastName = 1 AND [LastName] IS NULL) OR ([LastName] = @Original_LastName)) AND ((@IsNull_FirstName = 1 AND [FirstName] IS NULL) OR ([FirstName] = @Original_FirstName)) AND ((@IsNull_Suffix = 1 AND [Suffix] IS NULL) OR ([Suffix] = @Original_Suffix)) AND ((@IsNull_Prefix = 1 AND [Prefix] IS NULL) OR ([Prefix] = @Original_Prefix)) AND ((@IsNull_Middle = 1 AND [Middle] IS NULL) OR ([Middle] = @Original_Middle)) AND ((@IsNull_OtherPerson = 1 AND [OtherPerson] IS NULL) OR ([OtherPerson] = @Original_OtherPerson)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_signame", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "signame", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_CleanName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CleanName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CleanName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CleanName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_LastName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LastName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LastName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LastName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_FirstName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FirstName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FirstName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FirstName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Suffix", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Suffix", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Suffix", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Suffix", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Prefix", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Prefix", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Prefix", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Prefix", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Middle", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Middle", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Middle", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Middle", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_OtherPerson", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OtherPerson", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_OtherPerson", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "OtherPerson", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[SIGNAMED] ([refnum], [signame], [CleanName], [LastName], [FirstName], [Suffix], [Prefix], [Middle], [OtherPerson]) VALUES (@refnum, @signame, @CleanName, @LastName, @FirstName, @Suffix, @Prefix, @Middle, @OtherPerson);
SELECT refnum, signame, CleanName, LastName, FirstName, Suffix, Prefix, Middle, OtherPerson FROM SIGNAMED WHERE (refnum = @refnum) AND (signame = @signame)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@signame", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "signame", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CleanName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CleanName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LastName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FirstName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FirstName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Suffix", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Suffix", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Prefix", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Prefix", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Middle", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Middle", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OtherPerson", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "OtherPerson", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[SIGNAMED] SET [refnum] = @refnum, [signame] = @signame, [CleanName] = @CleanName, [LastName] = @LastName, [FirstName] = @FirstName, [Suffix] = @Suffix, [Prefix] = @Prefix, [Middle] = @Middle, [OtherPerson] = @OtherPerson WHERE (([refnum] = @Original_refnum) AND ([signame] = @Original_signame) AND ((@IsNull_CleanName = 1 AND [CleanName] IS NULL) OR ([CleanName] = @Original_CleanName)) AND ((@IsNull_LastName = 1 AND [LastName] IS NULL) OR ([LastName] = @Original_LastName)) AND ((@IsNull_FirstName = 1 AND [FirstName] IS NULL) OR ([FirstName] = @Original_FirstName)) AND ((@IsNull_Suffix = 1 AND [Suffix] IS NULL) OR ([Suffix] = @Original_Suffix)) AND ((@IsNull_Prefix = 1 AND [Prefix] IS NULL) OR ([Prefix] = @Original_Prefix)) AND ((@IsNull_Middle = 1 AND [Middle] IS NULL) OR ([Middle] = @Original_Middle)) AND ((@IsNull_OtherPerson = 1 AND [OtherPerson] IS NULL) OR ([OtherPerson] = @Original_OtherPerson)));
SELECT refnum, signame, CleanName, LastName, FirstName, Suffix, Prefix, Middle, OtherPerson FROM SIGNAMED WHERE (refnum = @refnum) AND (signame = @signame)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@signame", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "signame", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CleanName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CleanName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LastName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FirstName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FirstName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Suffix", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Suffix", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Prefix", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Prefix", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Middle", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Middle", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OtherPerson", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "OtherPerson", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_signame", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "signame", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_CleanName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CleanName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CleanName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CleanName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_LastName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LastName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LastName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LastName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_FirstName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FirstName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FirstName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FirstName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Suffix", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Suffix", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Suffix", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Suffix", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Prefix", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Prefix", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Prefix", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Prefix", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Middle", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Middle", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Middle", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Middle", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_OtherPerson", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OtherPerson", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_OtherPerson", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "OtherPerson", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, signame, CleanName, LastName, FirstName, Suffix, Prefix, Middle, O" +
                "therPerson FROM dbo.SIGNAMED";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.SIGNAMEDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.SIGNAMEDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.SIGNAMEDDataTable dataTable = new NrhpDatabase.SIGNAMEDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.SIGNAMEDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "SIGNAMED");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, string Original_signame, string Original_CleanName, string Original_LastName, string Original_FirstName, string Original_Suffix, string Original_Prefix, string Original_Middle, string Original_OtherPerson) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            if ((Original_signame == null)) {
                throw new System.ArgumentNullException("Original_signame");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_signame));
            }
            if ((Original_CleanName == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_CleanName));
            }
            if ((Original_LastName == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_LastName));
            }
            if ((Original_FirstName == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_FirstName));
            }
            if ((Original_Suffix == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_Suffix));
            }
            if ((Original_Prefix == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_Prefix));
            }
            if ((Original_Middle == null)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_Middle));
            }
            if ((Original_OtherPerson == null)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_OtherPerson));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, string signame, string CleanName, string LastName, string FirstName, string Suffix, string Prefix, string Middle, string OtherPerson) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            if ((signame == null)) {
                throw new System.ArgumentNullException("signame");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(signame));
            }
            if ((CleanName == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(CleanName));
            }
            if ((LastName == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(LastName));
            }
            if ((FirstName == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(FirstName));
            }
            if ((Suffix == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Suffix));
            }
            if ((Prefix == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Prefix));
            }
            if ((Middle == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Middle));
            }
            if ((OtherPerson == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(OtherPerson));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int refnum, 
                    string signame, 
                    string CleanName, 
                    string LastName, 
                    string FirstName, 
                    string Suffix, 
                    string Prefix, 
                    string Middle, 
                    string OtherPerson, 
                    int Original_refnum, 
                    string Original_signame, 
                    string Original_CleanName, 
                    string Original_LastName, 
                    string Original_FirstName, 
                    string Original_Suffix, 
                    string Original_Prefix, 
                    string Original_Middle, 
                    string Original_OtherPerson) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            if ((signame == null)) {
                throw new System.ArgumentNullException("signame");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(signame));
            }
            if ((CleanName == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(CleanName));
            }
            if ((LastName == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(LastName));
            }
            if ((FirstName == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(FirstName));
            }
            if ((Suffix == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Suffix));
            }
            if ((Prefix == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Prefix));
            }
            if ((Middle == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Middle));
            }
            if ((OtherPerson == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(OtherPerson));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_refnum));
            if ((Original_signame == null)) {
                throw new System.ArgumentNullException("Original_signame");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_signame));
            }
            if ((Original_CleanName == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_CleanName));
            }
            if ((Original_LastName == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_LastName));
            }
            if ((Original_FirstName == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_FirstName));
            }
            if ((Original_Suffix == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_Suffix));
            }
            if ((Original_Prefix == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_Prefix));
            }
            if ((Original_Middle == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_Middle));
            }
            if ((Original_OtherPerson == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_OtherPerson));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SIGYEARDTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SIGYEARDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SIGYEARD";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("circa", "circa");
            tableMapping.ColumnMappings.Add("sigyear", "sigyear");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SIGYEARD] WHERE (([refnum] = @Original_refnum) AND ((@IsNull_c" +
                "irca = 1 AND [circa] IS NULL) OR ([circa] = @Original_circa)) AND ([sigyear] = @" +
                "Original_sigyear))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_circa", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "circa", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_circa", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "circa", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_sigyear", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "sigyear", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SIGYEARD] ([refnum], [circa], [sigyear]) VALUES (@refnum, @cir" +
                "ca, @sigyear);\r\nSELECT refnum, circa, sigyear FROM SIGYEARD WHERE (refnum = @ref" +
                "num) AND (sigyear = @sigyear)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@circa", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "circa", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sigyear", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "sigyear", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[SIGYEARD] SET [refnum] = @refnum, [circa] = @circa, [sigyear] = @sigyear WHERE (([refnum] = @Original_refnum) AND ((@IsNull_circa = 1 AND [circa] IS NULL) OR ([circa] = @Original_circa)) AND ([sigyear] = @Original_sigyear));
SELECT refnum, circa, sigyear FROM SIGYEARD WHERE (refnum = @refnum) AND (sigyear = @sigyear)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@circa", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "circa", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sigyear", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "sigyear", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_circa", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "circa", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_circa", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "circa", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_sigyear", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "sigyear", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, circa, sigyear FROM dbo.SIGYEARD";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.SIGYEARDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.SIGYEARDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.SIGYEARDDataTable dataTable = new NrhpDatabase.SIGYEARDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.SIGYEARDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "SIGYEARD");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, bool Original_circa, short Original_sigyear) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((bool)(Original_circa));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((short)(Original_sigyear));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, bool circa, short sigyear) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            this.Adapter.InsertCommand.Parameters[1].Value = ((bool)(circa));
            this.Adapter.InsertCommand.Parameters[2].Value = ((short)(sigyear));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int refnum, bool circa, short sigyear, int Original_refnum, bool Original_circa, short Original_sigyear) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((bool)(circa));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((short)(sigyear));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_refnum));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(Original_circa));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((short)(Original_sigyear));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ARSTYLDTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ARSTYLDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ARSTYLD";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("arstylcd", "arstylcd");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ARSTYLD] WHERE (([refnum] = @Original_refnum) AND ([arstylcd] " +
                "= @Original_arstylcd))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_arstylcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "arstylcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ARSTYLD] ([refnum], [arstylcd]) VALUES (@refnum, @arstylcd);\r\n" +
                "SELECT refnum, arstylcd FROM ARSTYLD WHERE (arstylcd = @arstylcd) AND (refnum = " +
                "@refnum)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@arstylcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "arstylcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ARSTYLD] SET [refnum] = @refnum, [arstylcd] = @arstylcd WHERE (([re" +
                "fnum] = @Original_refnum) AND ([arstylcd] = @Original_arstylcd));\r\nSELECT refnum" +
                ", arstylcd FROM ARSTYLD WHERE (arstylcd = @arstylcd) AND (refnum = @refnum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@arstylcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "arstylcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_arstylcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "arstylcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, arstylcd FROM dbo.ARSTYLD";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.ARSTYLDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.ARSTYLDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.ARSTYLDDataTable dataTable = new NrhpDatabase.ARSTYLDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.ARSTYLDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "ARSTYLD");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_refnum, int Original_arstylcd) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_arstylcd));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int refnum, int arstylcd) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(arstylcd));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int refnum, int arstylcd, int Original_refnum, int Original_arstylcd) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(arstylcd));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_refnum));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_arstylcd));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ARSTYLMTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ARSTYLMTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ARSTYLM";
            tableMapping.ColumnMappings.Add("arstylcd", "arstylcd");
            tableMapping.ColumnMappings.Add("arstyl", "arstyl");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ARSTYLM] WHERE (([arstylcd] = @Original_arstylcd) AND ([arstyl" +
                "] = @Original_arstyl))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_arstylcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "arstylcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_arstyl", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "arstyl", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ARSTYLM] ([arstylcd], [arstyl]) VALUES (@arstylcd, @arstyl);\r\n" +
                "SELECT arstylcd, arstyl FROM ARSTYLM WHERE (arstylcd = @arstylcd)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@arstylcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "arstylcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@arstyl", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "arstyl", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ARSTYLM] SET [arstylcd] = @arstylcd, [arstyl] = @arstyl WHERE (([ar" +
                "stylcd] = @Original_arstylcd) AND ([arstyl] = @Original_arstyl));\r\nSELECT arstyl" +
                "cd, arstyl FROM ARSTYLM WHERE (arstylcd = @arstylcd)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@arstylcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "arstylcd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@arstyl", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "arstyl", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_arstylcd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "arstylcd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_arstyl", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "arstyl", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT arstylcd, arstyl FROM dbo.ARSTYLM";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.ARSTYLMDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.ARSTYLMDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.ARSTYLMDataTable dataTable = new NrhpDatabase.ARSTYLMDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.ARSTYLMDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "ARSTYLM");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_arstylcd, string Original_arstyl) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_arstylcd));
            if ((Original_arstyl == null)) {
                throw new System.ArgumentNullException("Original_arstyl");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_arstyl));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int arstylcd, string arstyl) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(arstylcd));
            if ((arstyl == null)) {
                throw new System.ArgumentNullException("arstyl");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(arstyl));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int arstylcd, string arstyl, int Original_arstylcd, string Original_arstyl) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(arstylcd));
            if ((arstyl == null)) {
                throw new System.ArgumentNullException("arstyl");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(arstyl));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_arstylcd));
            if ((Original_arstyl == null)) {
                throw new System.ArgumentNullException("Original_arstyl");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_arstyl));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GEOCODEMTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GEOCODEMTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GEOCODEM";
            tableMapping.ColumnMappings.Add("refnum", "refnum");
            tableMapping.ColumnMappings.Add("statecd", "statecd");
            tableMapping.ColumnMappings.Add("county", "county");
            tableMapping.ColumnMappings.Add("city", "city");
            tableMapping.ColumnMappings.Add("zip", "zip");
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("address", "address");
            tableMapping.ColumnMappings.Add("gdtplus4", "gdtplus4");
            tableMapping.ColumnMappings.Add("gdtsad", "gdtsad");
            tableMapping.ColumnMappings.Add("gdtcity", "gdtcity");
            tableMapping.ColumnMappings.Add("gdtstatecd", "gdtstatecd");
            tableMapping.ColumnMappings.Add("gdtpcode", "gdtpcode");
            tableMapping.ColumnMappings.Add("gdtlat", "gdtlat");
            tableMapping.ColumnMappings.Add("gdtlong", "gdtlong");
            tableMapping.ColumnMappings.Add("gdtxin", "gdtxin");
            tableMapping.ColumnMappings.Add("gdtstat", "gdtstat");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[GEOCODEM] WHERE (([refnum] = @Original_refnum) AND ((@IsNull_statecd = 1 AND [statecd] IS NULL) OR ([statecd] = @Original_statecd)) AND ([county] = @Original_county) AND ([city] = @Original_city) AND ((@IsNull_zip = 1 AND [zip] IS NULL) OR ([zip] = @Original_zip)) AND ([name] = @Original_name) AND ([address] = @Original_address) AND ((@IsNull_gdtplus4 = 1 AND [gdtplus4] IS NULL) OR ([gdtplus4] = @Original_gdtplus4)) AND ((@IsNull_gdtsad = 1 AND [gdtsad] IS NULL) OR ([gdtsad] = @Original_gdtsad)) AND ((@IsNull_gdtcity = 1 AND [gdtcity] IS NULL) OR ([gdtcity] = @Original_gdtcity)) AND ((@IsNull_gdtstatecd = 1 AND [gdtstatecd] IS NULL) OR ([gdtstatecd] = @Original_gdtstatecd)) AND ((@IsNull_gdtpcode = 1 AND [gdtpcode] IS NULL) OR ([gdtpcode] = @Original_gdtpcode)) AND ((@IsNull_gdtlat = 1 AND [gdtlat] IS NULL) OR ([gdtlat] = @Original_gdtlat)) AND ((@IsNull_gdtlong = 1 AND [gdtlong] IS NULL) OR ([gdtlong] = @Original_gdtlong)) AND ((@IsNull_gdtxin = 1 AND [gdtxin] IS NULL) OR ([gdtxin] = @Original_gdtxin)) AND ([gdtstat] = @Original_gdtstat))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_statecd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "statecd", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_statecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "statecd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_county", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "county", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_city", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "city", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_zip", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "zip", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_zip", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "zip", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_address", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "address", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_gdtplus4", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtplus4", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_gdtplus4", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtplus4", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_gdtsad", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtsad", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_gdtsad", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtsad", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_gdtcity", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtcity", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_gdtcity", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtcity", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_gdtstatecd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtstatecd", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_gdtstatecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtstatecd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_gdtpcode", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtpcode", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_gdtpcode", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtpcode", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_gdtlat", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtlat", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_gdtlat", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 10, "gdtlat", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_gdtlong", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtlong", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_gdtlong", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 11, "gdtlong", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_gdtxin", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtxin", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_gdtxin", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtxin", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_gdtstat", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtstat", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[GEOCODEM] ([refnum], [statecd], [county], [city], [zip], [name], [address], [gdtplus4], [gdtsad], [gdtcity], [gdtstatecd], [gdtpcode], [gdtlat], [gdtlong], [gdtxin], [gdtstat]) VALUES (@refnum, @statecd, @county, @city, @zip, @name, @address, @gdtplus4, @gdtsad, @gdtcity, @gdtstatecd, @gdtpcode, @gdtlat, @gdtlong, @gdtxin, @gdtstat);
SELECT refnum, statecd, county, city, zip, name, address, gdtplus4, gdtsad, gdtcity, gdtstatecd, gdtpcode, gdtlat, gdtlong, gdtxin, gdtstat FROM GEOCODEM WHERE (refnum = @refnum)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@statecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "statecd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@county", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "county", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@city", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "city", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@zip", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "zip", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@address", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "address", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@gdtplus4", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtplus4", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@gdtsad", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtsad", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@gdtcity", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtcity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@gdtstatecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtstatecd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@gdtpcode", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtpcode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@gdtlat", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 10, "gdtlat", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@gdtlong", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 11, "gdtlong", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@gdtxin", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtxin", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@gdtstat", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtstat", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[GEOCODEM] SET [refnum] = @refnum, [statecd] = @statecd, [county] = " +
                "@county, [city] = @city, [zip] = @zip, [name] = @name, [address] = @address, [gd" +
                "tplus4] = @gdtplus4, [gdtsad] = @gdtsad, [gdtcity] = @gdtcity, [gdtstatecd] = @g" +
                "dtstatecd, [gdtpcode] = @gdtpcode, [gdtlat] = @gdtlat, [gdtlong] = @gdtlong, [gd" +
                "txin] = @gdtxin, [gdtstat] = @gdtstat WHERE (([refnum] = @Original_refnum) AND (" +
                "(@IsNull_statecd = 1 AND [statecd] IS NULL) OR ([statecd] = @Original_statecd)) " +
                "AND ([county] = @Original_county) AND ([city] = @Original_city) AND ((@IsNull_zi" +
                "p = 1 AND [zip] IS NULL) OR ([zip] = @Original_zip)) AND ([name] = @Original_nam" +
                "e) AND ([address] = @Original_address) AND ((@IsNull_gdtplus4 = 1 AND [gdtplus4]" +
                " IS NULL) OR ([gdtplus4] = @Original_gdtplus4)) AND ((@IsNull_gdtsad = 1 AND [gd" +
                "tsad] IS NULL) OR ([gdtsad] = @Original_gdtsad)) AND ((@IsNull_gdtcity = 1 AND [" +
                "gdtcity] IS NULL) OR ([gdtcity] = @Original_gdtcity)) AND ((@IsNull_gdtstatecd =" +
                " 1 AND [gdtstatecd] IS NULL) OR ([gdtstatecd] = @Original_gdtstatecd)) AND ((@Is" +
                "Null_gdtpcode = 1 AND [gdtpcode] IS NULL) OR ([gdtpcode] = @Original_gdtpcode)) " +
                "AND ((@IsNull_gdtlat = 1 AND [gdtlat] IS NULL) OR ([gdtlat] = @Original_gdtlat))" +
                " AND ((@IsNull_gdtlong = 1 AND [gdtlong] IS NULL) OR ([gdtlong] = @Original_gdtl" +
                "ong)) AND ((@IsNull_gdtxin = 1 AND [gdtxin] IS NULL) OR ([gdtxin] = @Original_gd" +
                "txin)) AND ([gdtstat] = @Original_gdtstat));\r\nSELECT refnum, statecd, county, ci" +
                "ty, zip, name, address, gdtplus4, gdtsad, gdtcity, gdtstatecd, gdtpcode, gdtlat," +
                " gdtlong, gdtxin, gdtstat FROM GEOCODEM WHERE (refnum = @refnum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@statecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "statecd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@county", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "county", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@city", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "city", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@zip", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "zip", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@address", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "address", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@gdtplus4", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtplus4", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@gdtsad", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtsad", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@gdtcity", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtcity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@gdtstatecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtstatecd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@gdtpcode", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtpcode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@gdtlat", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 10, "gdtlat", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@gdtlong", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 11, "gdtlong", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@gdtxin", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtxin", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@gdtstat", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtstat", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_refnum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "refnum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_statecd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "statecd", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_statecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "statecd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_county", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "county", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_city", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "city", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_zip", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "zip", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_zip", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "zip", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_address", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "address", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_gdtplus4", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtplus4", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_gdtplus4", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtplus4", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_gdtsad", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtsad", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_gdtsad", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtsad", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_gdtcity", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtcity", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_gdtcity", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtcity", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_gdtstatecd", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtstatecd", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_gdtstatecd", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtstatecd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_gdtpcode", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtpcode", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_gdtpcode", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtpcode", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_gdtlat", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtlat", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_gdtlat", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 10, "gdtlat", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_gdtlong", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtlong", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_gdtlong", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 11, "gdtlong", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_gdtxin", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtxin", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_gdtxin", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtxin", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_gdtstat", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "gdtstat", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::NRHPStubber.Properties.Settings.Default.NRHP20070628;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT refnum, statecd, county, city, zip, name, address, gdtplus4, gdtsad, gdtci" +
                "ty, gdtstatecd, gdtpcode, gdtlat, gdtlong, gdtxin, gdtstat FROM GEOCODEM";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NrhpDatabase.GEOCODEMDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NrhpDatabase.GEOCODEMDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NrhpDatabase.GEOCODEMDataTable dataTable = new NrhpDatabase.GEOCODEMDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase.GEOCODEMDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NrhpDatabase dataSet) {
            return this.Adapter.Update(dataSet, "GEOCODEM");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_refnum, 
                    string Original_statecd, 
                    string Original_county, 
                    string Original_city, 
                    string Original_zip, 
                    string Original_name, 
                    string Original_address, 
                    string Original_gdtplus4, 
                    string Original_gdtsad, 
                    string Original_gdtcity, 
                    string Original_gdtstatecd, 
                    string Original_gdtpcode, 
                    System.Nullable<decimal> Original_gdtlat, 
                    System.Nullable<decimal> Original_gdtlong, 
                    string Original_gdtxin, 
                    string Original_gdtstat) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_refnum));
            if ((Original_statecd == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_statecd));
            }
            if ((Original_county == null)) {
                throw new System.ArgumentNullException("Original_county");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_county));
            }
            if ((Original_city == null)) {
                throw new System.ArgumentNullException("Original_city");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_city));
            }
            if ((Original_zip == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_zip));
            }
            if ((Original_name == null)) {
                throw new System.ArgumentNullException("Original_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_name));
            }
            if ((Original_address == null)) {
                throw new System.ArgumentNullException("Original_address");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_address));
            }
            if ((Original_gdtplus4 == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_gdtplus4));
            }
            if ((Original_gdtsad == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_gdtsad));
            }
            if ((Original_gdtcity == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_gdtcity));
            }
            if ((Original_gdtstatecd == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_gdtstatecd));
            }
            if ((Original_gdtpcode == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_gdtpcode));
            }
            if ((Original_gdtlat.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((decimal)(Original_gdtlat.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = System.DBNull.Value;
            }
            if ((Original_gdtlong.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((decimal)(Original_gdtlong.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = System.DBNull.Value;
            }
            if ((Original_gdtxin == null)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_gdtxin));
            }
            if ((Original_gdtstat == null)) {
                throw new System.ArgumentNullException("Original_gdtstat");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((string)(Original_gdtstat));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int refnum, 
                    string statecd, 
                    string county, 
                    string city, 
                    string zip, 
                    string name, 
                    string address, 
                    string gdtplus4, 
                    string gdtsad, 
                    string gdtcity, 
                    string gdtstatecd, 
                    string gdtpcode, 
                    System.Nullable<decimal> gdtlat, 
                    System.Nullable<decimal> gdtlong, 
                    string gdtxin, 
                    string gdtstat) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(refnum));
            if ((statecd == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(statecd));
            }
            if ((county == null)) {
                throw new System.ArgumentNullException("county");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(county));
            }
            if ((city == null)) {
                throw new System.ArgumentNullException("city");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(city));
            }
            if ((zip == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(zip));
            }
            if ((name == null)) {
                throw new System.ArgumentNullException("name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(name));
            }
            if ((address == null)) {
                throw new System.ArgumentNullException("address");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(address));
            }
            if ((gdtplus4 == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(gdtplus4));
            }
            if ((gdtsad == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(gdtsad));
            }
            if ((gdtcity == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(gdtcity));
            }
            if ((gdtstatecd == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(gdtstatecd));
            }
            if ((gdtpcode == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(gdtpcode));
            }
            if ((gdtlat.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(gdtlat.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((gdtlong.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((decimal)(gdtlong.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
            }
            if ((gdtxin == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(gdtxin));
            }
            if ((gdtstat == null)) {
                throw new System.ArgumentNullException("gdtstat");
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(gdtstat));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int refnum, 
                    string statecd, 
                    string county, 
                    string city, 
                    string zip, 
                    string name, 
                    string address, 
                    string gdtplus4, 
                    string gdtsad, 
                    string gdtcity, 
                    string gdtstatecd, 
                    string gdtpcode, 
                    System.Nullable<decimal> gdtlat, 
                    System.Nullable<decimal> gdtlong, 
                    string gdtxin, 
                    string gdtstat, 
                    int Original_refnum, 
                    string Original_statecd, 
                    string Original_county, 
                    string Original_city, 
                    string Original_zip, 
                    string Original_name, 
                    string Original_address, 
                    string Original_gdtplus4, 
                    string Original_gdtsad, 
                    string Original_gdtcity, 
                    string Original_gdtstatecd, 
                    string Original_gdtpcode, 
                    System.Nullable<decimal> Original_gdtlat, 
                    System.Nullable<decimal> Original_gdtlong, 
                    string Original_gdtxin, 
                    string Original_gdtstat) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(refnum));
            if ((statecd == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(statecd));
            }
            if ((county == null)) {
                throw new System.ArgumentNullException("county");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(county));
            }
            if ((city == null)) {
                throw new System.ArgumentNullException("city");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(city));
            }
            if ((zip == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(zip));
            }
            if ((name == null)) {
                throw new System.ArgumentNullException("name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(name));
            }
            if ((address == null)) {
                throw new System.ArgumentNullException("address");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(address));
            }
            if ((gdtplus4 == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(gdtplus4));
            }
            if ((gdtsad == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(gdtsad));
            }
            if ((gdtcity == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(gdtcity));
            }
            if ((gdtstatecd == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(gdtstatecd));
            }
            if ((gdtpcode == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(gdtpcode));
            }
            if ((gdtlat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(gdtlat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((gdtlong.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((decimal)(gdtlong.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            if ((gdtxin == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(gdtxin));
            }
            if ((gdtstat == null)) {
                throw new System.ArgumentNullException("gdtstat");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(gdtstat));
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_refnum));
            if ((Original_statecd == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_statecd));
            }
            if ((Original_county == null)) {
                throw new System.ArgumentNullException("Original_county");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_county));
            }
            if ((Original_city == null)) {
                throw new System.ArgumentNullException("Original_city");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_city));
            }
            if ((Original_zip == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_zip));
            }
            if ((Original_name == null)) {
                throw new System.ArgumentNullException("Original_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_name));
            }
            if ((Original_address == null)) {
                throw new System.ArgumentNullException("Original_address");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_address));
            }
            if ((Original_gdtplus4 == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_gdtplus4));
            }
            if ((Original_gdtsad == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_gdtsad));
            }
            if ((Original_gdtcity == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_gdtcity));
            }
            if ((Original_gdtstatecd == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_gdtstatecd));
            }
            if ((Original_gdtpcode == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_gdtpcode));
            }
            if ((Original_gdtlat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((decimal)(Original_gdtlat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = System.DBNull.Value;
            }
            if ((Original_gdtlong.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((decimal)(Original_gdtlong.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = System.DBNull.Value;
            }
            if ((Original_gdtxin == null)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(Original_gdtxin));
            }
            if ((Original_gdtstat == null)) {
                throw new System.ArgumentNullException("Original_gdtstat");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((string)(Original_gdtstat));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591